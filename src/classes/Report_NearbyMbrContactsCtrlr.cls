/*
 * Report: Nearby Member Contacts Controller
 * 
 * Version: 1.01
 * 16th December 2014
 * 
 * Version History
 * 1.01 - updated
 * 1.0 - created
 * 
 * Copyright (c) 2014 SEIU-UHW
 * 560 Thomas L Berkley Way
 * Oakland, CA 94612, USA
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of SEIU-UHW.
 * ("Confidential Information").
 */

public class Report_NearbyMbrContactsCtrlr {

    // constructor
    public Report_NearbyMbrContactsCtrlr () {
      
    }

    @RemoteAction
    public static String getNearbyContacts() {
      //String fullAddress = ApexPages.currentPage().getParameters().get('fullAddress');
      String latString = ApexPages.currentPage().getParameters().get('latitude');
      if (latString == null) {
        latString = '33.619400';
      }
      String lonString = ApexPages.currentPage().getParameters().get('longitude');
      if (lonString == null) {
        lonString = '-117.677628';
      }      
      return getNearbyContacts(Decimal.valueOf(latString), Decimal.valueOf(lonString));
    }
     
    @RemoteAction
    public static String getNearbyContacts(Decimal pLatitude, Decimal pLongitude) {

        String q = 'select Id, Name, fid__c, account.name, department, title, phone, homephone, mobilephone, mailingcity, mailingpostalcode, Geolocation__Latitude__s, Geolocation__Longitude__s, email, surveys_encoded__c from Contact ';
        q += 'where DISTANCE(Geolocation__c, GEOLOCATION( ';
        q += String.valueOf(pLatitude) + ', ' + String.valueOf(pLongitude);
        q += ' ), \'mi\') < 5.0';
        q += ' and Division_Type__c != \'New Organizing\' and Division_Type__c != \'Staff\' ';
        q += ' ORDER BY DISTANCE(Geolocation__c, GEOLOCATION(';
        q += String.valueOf(pLatitude) + ', ' + String.valueOf(pLongitude);
        q += '), \'mi\') limit 500';

        List<Contact> clist = Database.query(q);       
        String s = '<table bgcolor=\"#000000\" class=\"datacell\" cellspacing=\"1\" cellpadding=\"6\">\n<tr valign=\"bottom\">';
        s+= headerStart() + 'FID' + headerEnd();
        s+= headerStart() + 'Full Name' + headerEnd();
        s+= headerStart() + 'Employer' + headerEnd();
        s+= headerStart() + 'Department' + headerEnd();
        s+= headerStart() + 'Job Class' + headerEnd();                        
        s+= headerStart() + 'City' + headerEnd();
        s+= headerStart() + 'Zip Code' + headerEnd();
        s+= headerStart() + 'Home Phone' + headerEnd();
        s+= headerStart() + 'Cell Phone' + headerEnd();
        s+= headerStart() + 'Email' + headerEnd();
        s+= headerStart() + '2013-14<br/>Enroll<br/>Ldr?' + headerEnd();
        s+= headerStart() + 'Distance' + headerEnd();
        s+= '</tr>\n';
        for (Contact c: clist) {
          s+='\n<tr valign=\"top\">\n';
          s+= cellStart('center') + c.fid__c + cellEnd();
          s+= cellStart('left') + '<a href=\"' + c.id + '\">' + Report_Custom_Utils.toProperCase(c.name) + '</a>' + cellEnd();
          s+= cellStart('left') + Report_Custom_Utils.toProperCase(c.Account.Name) + cellEnd();
          s+= cellStart('left') + Report_Custom_Utils.toProperCase(c.department) + cellEnd();
          s+= cellStart('left') + Report_Custom_Utils.toProperCase(c.title) + cellEnd();
          s+= cellStart('left') + c.mailingcity + cellEnd();
          s+= cellStart('center') + c.mailingpostalcode + cellEnd();
          String phone= '';
          if (c.homephone != null && !c.homephone.trim().equals('')) {
            phone= c.homephone;
          } else if (c.phone != null && !c.phone.trim().equals('')) {
            phone= c.phone;
          }
          String mobile = '';
          if (c.mobilephone != null) {
            mobile = c.mobilephone;
          }
          s+=cellStart('center')  + Report_Custom_Utils.formatPhone(phone) + cellEnd();                    
          s+=cellStart('center')  + Report_Custom_Utils.formatPhone(mobile) + cellEnd();
          String email = '';
          if (c.email!= null) {
            email = c.email;
          }
          s+= cellStart('left')  +  + email + cellEnd();
          s+= cellStart('center');
          if (c.surveys_encoded__c != null && c.surveys_encoded__c.contains('AHX')) {
            s+='yes';
          } else {
            s+='&nbsp;&nbsp;&nbsp;&nbsp;';
          }
          s+=cellEnd();
          
          s+= cellStart('center');
          double distance = Report_Custom_Utils.calculateDistance(c.Geolocation__latitude__s, c.Geolocation__longitude__s, pLatitude, pLongitude);
          distance = distance * 10.0;
          distance = distance.round() / 10.0;
          s+=distance;
          s+= cellEnd();
          
          s+='</tr>\n\n';                              
        }        
        s += '</table>\n';
        
        return s;
    }   
    
    private static String cellStart(String pAlign) {
      return '    <td bgcolor=\"#FFFFFF\" class=\"datacell\" align=\"' + pAlign + '\"><font size=\"-2\">';
    }
    
    private static String cellEnd() {
      return '</font></td>\n';
    }
    
    private static String headerStart() {
      return '    <th valign=\"bottom\" class=\"datacell\" align=\"center\" bgcolor=\"#481C60\"><font color=\"#FFFFFF\" size=\"-2\">';
    }
    
    private static String headerEnd() {
      return '</font></th>\n';
    }
    
    public Integer cheese() {
    Integer i = 0;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
        i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;   
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
        i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;    
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
        i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;    
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
        i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;    
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
        i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;    
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
        i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;                            
    i++;         
    return i;    
  }
}