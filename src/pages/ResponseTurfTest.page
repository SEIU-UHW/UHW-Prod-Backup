<apex:page sidebar="false" docType="html-5.0" showHeader="false" standardStylesheets="false">

    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1"></meta>
        <script src="/soap/ajax/31.0/connection.js" type="text/javascript"></script>
        <script src="/soap/ajax/31.0/apex.js" type="text/javascript"></script>

        <apex:includeScript value="{!$Resource.jquery_2_1_3_min}"/>
        <apex:includeScript value="{!URLFOR($Resource.jQueryUiMinZip2,'jquery-ui.min.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.agGridMinZip400,'ag-grid.min.js')}"/>

        <apex:stylesheet value="{!URLFOR($Resource.jQueryUiMinZip2, 'jquery-ui.min.css')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.jQueryUiMinZip2, 'jquery-ui.theme.min.css')}"/>

        <style>

            #ResponseGridDiv {
                float: left;
                margin-left: 0px;
                margin-right: 0px;
                width: 100%;
                background-color: linen;
                height: 700px;
                overflow-y: auto;
            }

            #StatusDiv {
                float: left;
                min-height: 224px;
                width: 20%;
                background-color: #DDE9DD;
                overflow-y: auto;
            }

            .center-align {
                text-align: center;
            }

        </style>

    </head>

    <body>

    <div id="title">
        <h1>Response Turf Test - Pomona Valley</h1>
        <hr/>
        <h2>Step 1. Get and display Raw Response Data</h2>
    </div>
    <hr/>
    <div id="StatusDiv1"></div>
    <div id="StatusDiv2"></div>
    <hr/>
    <div id="ResponseGridDiv" class="ag-fresh"></div>

    <script type="text/javascript">

        function phoneFormat(s) {
            var s1;
            if(s == null || s == '')
                s1 = 'n/a';
            else
                s1 = s.replace('-','');
            s1 = s1.replace(' ','');
            s1 = s1.replace('(','');
            s1 = s1.replace(')','');
            s1 = s1.substr(0,3) + '-' + s1.substr(3,3) + '-' + s1.substr(6);
            return s1;
        }

        function toProperCase(s)
        // My version - handles hyphenated names correctly :)
        {
            var s1;
            if(s == null)
                s1 = '';
            else
                s1 = s.toLowerCase().replace(/\b[a-zA-Z]/g,function($1) {return $1.toUpperCase();});

            return s1;
        }

        function loadResponses() {

            var responseQuery = "SELECT Contact__r.Account.Name, Contact__r.OwnerId, Contact_Name__c, Contact__c, Question_Name__c, Response_Value__c, Survey_Code__c, Survey_Question__c , Collected_By_CS__c, Collected_By_Is_EBoard__c, Collected_By_Name__c, Collected_By__c, Collected_Datetime__c " +
                                "FROM Survey_Response__c WHERE Contact__r.Account.Id = '001i000001PTUkeAAH' ";
            //    try {
            var responseResults = sforce.connection.query(responseQuery);
            processResponses(responseResults);
            //    }
            //    catch (e) {alert('An error occurred retrieving Survey Responses ' + e.faultstring);}
        }

        function processResponses(results) {
            var records;
            var collectedByCsId;
            var collectedByIsEBoard;
            var collectedByName;
            var collectedById;
            var collectedDatetime;

            var accountName;
            var contactOwnerRecord;
            var contactOwnerId;
            var contactName;
            var contactOwnerName;
            var contactId;
            var response;
            var surveyCode;

            var questionName,responseValue,surveyCode,surveyQuestion;
            var Question_Name__c,Response_Value__c,Survey_Code__c,Survey_Question__c;

            var coordinator;
            var coordinatorAttended;
            var employerName;
            var organizer;
            var organizerAttended;
            var sigCount;
            var sigNum;
            var processedAll = false;

            responseMap        = {};
            responseCnt        = 0;
            responseBatchCount = 0;

            while (!processedAll) {
                records = results.getArray('records');
                for (i = 0; i < records.length; i++) {
                    collectedByCsId = collectedByIsEBoard = collectedByName = collectedById = collectedDatetime = accountName = contactOwnerId = contactName = contactId = response = surveyCode = '';
                    responseCnt++;

                    if(records[i].Collected_By__c)
                        collectedById       = records[i].Collected_By__c;

                    if(records[i].Collected_Datetime__c)
                        collectedDatetime   = records[i].Collected_Datetime__c

                    if(records[i].Collected_By_Name__c)
                        collectedByName = toProperCase(records[i].Collected_By_Name__c);

                    if(records[i].Contact__r) {
                        if (records[i].Contact__r.Account.Name)
                            accountName    = records[i].Contact__r.Account.Name;

                        if(records[i].Contact__r.OwnerId)
                            contactOwnerId = records[i].Contact__r.OwnerId;

                        if(!contactOwnerIdMap[contactOwnerId])
                            contactOwnerIdMap[contactOwnerId] = 'Y';
                    }

                    if(records[i].Contact_Name__c)
                        contactName         = toProperCase(records[i].Contact_Name__c);

                    if(records[i].Contact__c)
                        contactId           = records[i].Contact__c;

                    if(records[i].Response_Value__c)
                        response            = records[i].Response_Value__c;

                    if(records[i].Survey_Code__c)
                        surveyCode          = records[i].Survey_Code__c;

                    if(records[i].Question_Name__c)
                        questionName   = records[i].Question_Name__c;

                    if(records[i].Survey_Question__c)
                        surveyQuestion = records[i].Survey_Question__c;

                    responseDataArray.push( {
                        AccountName         :  accountName,
                        ContactOwnerId      :  contactOwnerId,
                        ContactId           :  contactId,
                        ContactName         :  contactName,
                        QuestionName        :  questionName,
                        SurveyCode          :  surveyCode,
                        Response            :  response,
                        CollectedByName     :  collectedByName,
                        CollectedById       :  collectedById,
                        CollectedByCsId     :  collectedByCsId,
                        CollectedDatetime   :  collectedDatetime,
                        CollectedByIsEBoard :  collectedByIsEBoard
                    } );
                }

                if (results.done == 'true') {
                    processedAll = true;
                   statusDiv2.innerHTML = 'Total ResponseCnt: ' + responseCnt.toString() + ' (batch count: ' + responseBatchCount.toString() + ')';
                }
                else {
                    responseBatchCount++;
                    statusDiv2.innerHTML = 'Total ResponseCnt: ' + responseCnt.toString() + ' (batch count: ' + responseBatchCount.toString() + ')';
                    results = sforce.connection.queryMore(results.queryLocator);
                }

            }

            loadContactRecordOwners();
            debugger;

            for (i = 0; i < responseCnt; i++) {
                contactOwnerId = responseDataArray[i].ContactOwnerId;
                if(contactOwnerMap[contactOwnerId]) {
                    contactOwnerRecord = contactOwnerMap[contactOwnerId];
                    if(contactOwnerRecord.OwnerActive)
                        responseDataArray[i].ContactOwnerName = contactOwnerRecord.OwnerName;
                    else
                        responseDataArray[i].ContactOwnerName = 'Inactive: ' +  contactOwnerRecord.OwnerName;
                }
                else
                    responseDataArray[i].ContactOwnerName = 'Name: n/a';
            }

            responseGridOptions = {
                debug:true,
                columnDefs: responseColumnDefs,
                rowData: responseDataArray,
                enableSorting: true,
                enableFilter: true
            };

            new agGrid.Grid(responseGridDiv, responseGridOptions);

        }

        function loadContactRecordOwners() {
            var query;
            var mapKey;
            var contactOwnerList;
            var contactOwnerIdArray = [];

            for(mapKey in contactOwnerIdMap) {
                contactOwnerIdArray.push("'" + mapKey + "'");
            }

            contactOwnerList = contactOwnerIdArray.join();
            query = " SELECT Name,Title,Id,IsActive " +
                    " FROM User " +
                    " WHERE IsActive = False And Id IN ( " + contactOwnerList + ") ";

            var queryResults = sforce.connection.query(query);
            processContactRecordOwners(queryResults);
        }

        function processContactRecordOwners(results) {
            var records;
            var contactOwnerId;
            var contactOwnerName;
            var contactOwnerTitle;
            var contactOwnerActive;

            contactOwnerMap = {};

            records = results.getArray('records');
            for (i = 0; i < records.length; i++) {
                contactOwnerId     = records[i].Id;
                contactOwnerName   = records[i].Name;
                contactOwnerTitle  = records[i].Title;
                contactOwnerActive = records[i].IsActive;
                contactOwnerMap[contactOwnerId] = {OwnerId: contactOwnerId, OwnerName: contactOwnerName, OwnerTitle:contactOwnerTitle, OwnerActive: contactOwnerActive}
            }
 debugger;
        }

        function setStatus(pSuffix,pLabel,pText) {
            var statTField           = 'statusText'  + pSuffix;
            var statLField           = 'statusLabel' + pSuffix;
            var statTFieldId         = document.getElementById(statTField);
            var statLFieldId         = document.getElementById(statLField);
            statTFieldId.value       = pText;
            statLFieldId.textContent = pLabel;
        }

        function initAgGrid() {

            // Survey Response Fields not used: CollectedByCsId, CollectedByIsEBoard

            responseColumnDefs = [
                {headerName: 'AccountName',         field: 'AccountName',         width: 390, sortingOrder: ['asc','desc']},
                {headerName: 'ContactOwnerId',      field: 'ContactOwnerId',      width: 180, sortingOrder: ['asc','desc']},
                {headerName: 'ContactOwnerName',    field: 'ContactOwnerName',    width: 180, sortingOrder: ['asc','desc']},
                {headerName: 'ContactId',           field: 'ContactId',           width: 180, sortingOrder: ['asc','desc']},
                {headerName: 'ContactName',         field: 'ContactName',         width: 180, sortingOrder: ['asc','desc']},
                {headerName: 'QuestionName',        field: 'QuestionName',        width: 180, sortingOrder: ['asc','desc']},
                {headerName: 'SurveyCode',          field: 'SurveyCode',          width: 100, sortingOrder: ['asc','desc'],suppressMenu: true,cellClass: 'center-align'},
                {headerName: 'CollectedByName',     field: 'CollectedByName',     width: 180, sortingOrder: ['asc','desc']},
                {headerName: 'CollectedById',       field: 'CollectedById',       width: 180, sortingOrder: ['asc','desc']},
                {headerName: 'CollectedDatetime',   field: 'CollectedDatetime',   width: 180, sortingOrder: ['asc','desc']}
            ];
        }

        // ***************** Globals *****************

        var responseDataArray   = [];
        var responseGridOptions = {};
        var responseGridDiv;
        var responseColumnDefs;

        var contactOwnerIdMap  = {};
        var contactOwnerMap    = {};
        var responseMap        = {};
        var responseCnt        = 0;
        var responseBatchCount = 0;


        var exportButton;
        var output;
        var statusDiv1;
        var statusDiv2;

        // ***************** Main Program Entry *****************
        document.addEventListener('DOMContentLoaded', function () {

            sforce.connection.sessionId = "{!$Api.Session_ID}";

            responseGridDiv = document.getElementById('ResponseGridDiv');
            statusDiv1 = document.getElementById('StatusDiv1');
            statusDiv2 = document.getElementById('StatusDiv2');

            initAgGrid();
            loadResponses();

            exportButton = document.getElementById("ExportButton");
            exportButton.addEventListener("click", exportData, false);

        });

    </script>
    </body>
</apex:page>