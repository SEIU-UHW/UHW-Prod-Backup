<apex:page sidebar="false" docType="html-5.0" showHeader="false" standardStylesheets="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1"></meta>
        <script src="/soap/ajax/31.0/connection.js" type="text/javascript"></script>
        <script src="/soap/ajax/31.0/apex.js" type="text/javascript"></script>

        <apex:includeScript value="{!$Resource.jquery_2_1_3_min}"/>
        <apex:includeScript value="{!URLFOR($Resource.jQueryUiMinZip2,'jquery-ui.min.js')}"/>
        <apex:includeScript value="{!$Resource.agGridEnterpriseMin411}"/>

        <apex:stylesheet value="{!URLFOR($Resource.jQueryUiMinZip2, 'jquery-ui.min.css')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.jQueryUiMinZip2, 'jquery-ui.theme.min.css')}"/>

        <apex:stylesheet value="https://fonts.googleapis.com/css?family=Didact+Gothic"/>
        <apex:stylesheet value="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700"/>

        <style>

            .Page {
                padding:5px;
                margin:5px;
                height: 700px;
                border: 1px solid black;
            }

            .PageHeader {
                margin:5px;
                height: 28px;
                width:99%;
            }

            .HeaderLeft {
                margin:5px;
                display: inline-block;
                width: 32%;
                text-align: left;
            }

            .HeaderCenter {
                margin:5px;
                display: inline-block;
                width:33%;
                text-align: center;
            }

            .HeaderRight {
                margin:5px;
                display: inline-block;
                width:33%;
                text-align: right;
            }

            .Column {
/*              border:1px solid indianred;
                padding:5px; */
                width:22%;
                margin:5px;
                float:left;
            }

            .CoordRegion {
                padding:1px;
                margin-bottom:2px;
                background-color: #C8A7EF;

            }

            .DivTitle {
                margin-left: 2px;
                width:250px;
            }

            .CoordTitle {
                padding-left: 10px;
                width:270px;
                display: inline-block;
                font-weight: 800;
                color: #323274;
            }

            .OrgTitle {
                padding-left: 20px;
                width:260px;
                display: inline-block;
                font-weight: 800;
                color: #616187;
            }

            .ExecTitle {
                padding-left: 30px;
                width:250px;
                display: inline-block;
            }

            .CoordCount {
                width:60px;
                display: inline-block;
                text-align: right;
                margin-left: 5px;
                padding-right: 5px;
            }

            .OrgCount {
                width:60px;
                display: inline-block;
                text-align: right;
                margin-left: 5px;
                padding-right: 5px;
            }

            .ExecCount {
                width:60px;
                display: inline-block;
                text-align: right;
                margin-left: 5px;
                padding-right: 5px;
            }

            .right-align {
                text-align: right;
                padding-right: 5px !important;
            }

            .center-align {
                text-align: center;
            }

            .PageTitle {
/*              background-color: lightsalmon; */
                background-color: #C8A7EF;
                font-size: 2em;
                text-align: center;
            }

            .ObjectLabel {
                font-size: 1.2em;
                color:indianred;
                font-weight: bold;
            }

            body {
                font-size: 1.1em !important;
            }

            #RecruitsGridDiv {
                height: 300px;
                margin-top: 5px;
            }

            #ReportGridDiv {
                clear: both;
                height: 400px;
                margin-top: 5px;
            }

            #SummarizedGridDiv  {
                height: 300px;
                margin-top: 5px;
            }

            #filteredSummarizedGridDiv  {
                height: 300px;
                margin-top: 5px;
            }

            #EboardGridDiv  {
                height: 400px;
                margin-top: 5px;
            }

            #StatusDiv1 {
                margin-top:5px;
            }

            #StatusDiv {
                margin-top: 5px;
                float: left;
                min-height: 224px;
                width: 20%;
                background-color: #DDE9DD;
                overflow-y: auto;
            }

            .mainColumn {
                text-align: center;
/*              background-color: lightsalmon; */
                background-color: #C8A7EF;
            }

            #SaveAsCsvButton1, #SaveAsCsvButton2, #SaveAsCsvButton3, #SaveAsCsvButton4, #SaveAsCsvButton5 {
                float:right;
                margin-right: 100px;
            }

        </style>

    </head>

    <body>

    <div id="tabContainer">
        <ul>
            <li><a href="#fragment-1"><span>Report</span></a></li>
            <li><a href="#fragment-2"><span>Report Data</span></a></li>
            <li><a href="#fragment-3"><span>Data</span></a></li>
        </ul>

        <div class="tabpage" id="fragment-1">
            <div id="PageTitle1" class="PageTitle">Phone Bank Recruits Report</div>

            <hr/>
            <label class="ObjectLabel">Formatted Report</label>
            <hr/>
            <div id="FormattedReportDiv"></div>

        </div>

        <div class="tabpage" id="fragment-2">
            <div id="PageTitle1" class="PageTitle">Phone Bank Recruits Report Data</div>

            <hr/>
            <label class="ObjectLabel">Report data</label>
            <input id="SaveAsCsvButton1" type="Button" value="Save As .csv"></input>
            <hr/>
            <div id="ReportGridDiv" class="ag-fresh"></div>

            <hr/>
            <label class="ObjectLabel">Filtered Summarized data</label>
            <input id="SaveAsCsvButton2" type="Button" value="Save As .csv"></input>
            <hr/>
            <div id="FilteredSummarizedGridDiv" class="ag-fresh"></div>

        </div>

        <div class="tabpage" id="fragment-3">
            <div id="PageTitle1" class="PageTitle">Phone Bank Recruits Data</div>

            <div id="StatusDiv1" class="StatusDiv"></div>
            <div id="StatusDiv2" class="StatusDiv"></div>

            <hr/>
            <label class="ObjectLabel">Summarized data</label>
            <input id="SaveAsCsvButton3" type="Button" value="Save As .csv"></input>
            <hr/>
            <div id="SummarizedGridDiv" class="ag-fresh"></div>

            <hr/>
            <label class="ObjectLabel">Recruit object</label>
            <input id="SaveAsCsvButton4" type="Button" value="Save As .csv"></input>
            <hr/>
            <div id="RecruitsGridDiv" class="ag-fresh"></div>

            <hr/>
            <label class="ObjectLabel">Eboard object</label>
            <input id="SaveAsCsvButton5" type="Button" value="Save As .csv"></input>
            <hr/>
            <div id="EboardGridDiv"   class="ag-fresh"></div>

        </div>

    </div>

    <script type="text/javascript">


        function makePage(pLabel,pCnt) {
            var pageDiv;
            var pageHeader;
            var headerLeft;
            var headerCenter;
            var headerRight;
            var pageTN;
            var titleTN;
            var dateTN;
            var now;
            var nowDate;
            var localDateTime;

            now           = new Date();
            localDateTime = (now.toLocaleTimeString());
            nowDate       = (now.toDateString());

            pageDiv      = document.createElement('div');
            pageHeader   = document.createElement('div');
            headerLeft   = document.createElement('div');
            headerCenter = document.createElement('div');
            headerRight  = document.createElement('div');

            pageTN = document.createTextNode('Page: ' + pCnt);
            headerLeft.appendChild(pageTN);

            titleTN  = document.createTextNode(pLabel);
            headerCenter.appendChild(titleTN);

            dateTN  = document.createTextNode(nowDate + ", " + localDateTime);
            headerRight.appendChild(dateTN);

            pageDiv.setAttribute('class', 'Page');
            pageHeader.setAttribute('class', 'PageHeader');
            headerLeft.setAttribute('class', 'HeaderLeft');
            headerCenter.setAttribute('class', 'HeaderCenter');
            headerRight.setAttribute('class', 'HeaderRight');

            pageHeader.appendChild(headerLeft);
            pageHeader.appendChild(headerCenter);
            pageHeader.appendChild(headerRight);
            pageDiv.appendChild(pageHeader);

            return pageDiv;
        }

        function makeRegion(pClass) {
            var regionDiv;

            regionDiv = document.createElement('div');
            regionDiv.setAttribute('class', pClass);
            return regionDiv;
        }

        function makeTitle(pLabel,pCnt,pClass) {

            var containerDiv;
            var titleDiv;
            var countDiv;
            var titleTN;
            var countTN;

            containerDiv = document.createElement('div');
            titleDiv     = document.createElement('div');
            titleTN      = document.createTextNode(pLabel);

            titleDiv.setAttribute('class', pClass + 'Title');
            titleDiv.appendChild(titleTN);
            containerDiv.appendChild(titleDiv);

            if(pCnt >= 0) {
                countDiv     = document.createElement('div');
                countTN = document.createTextNode(pCnt + '%');
                countDiv.setAttribute('class', pClass + 'Count');
                countDiv.appendChild(countTN);
                containerDiv.appendChild(countDiv);
            }

            return containerDiv;
        }

        function buildFormattedReport() {
            var division,coordinator,organizer,execName;
            var coordTitle,orgTitle;
            var i              = 0;
            var l              = reportDataArray.length;
            var cnt            = 0;
            var divCnt         = 0;
            var pageCnt        = 0;
            var lineCnt        = 0;
            var columnCnt      = 0;
            var linesPerColumn = 32;
            var columnsPerPage = 4;
            var page;
            var column;
            var goalPC;

            debugger;
            while(i < l) {
                division = reportDataArray[i].Division;
                divCnt++;
                pageCnt++;
                page = makePage(division, pageCnt);
                columnCnt = 0;
                while(i < l && columnCnt < columnsPerPage) {
                    column = makeRegion('Column');
                    page.appendChild(column);
                    lineCnt = 0;
                    while (i < l && columnCnt < columnsPerPage && division == reportDataArray[i].Division && lineCnt < linesPerColumn) {
                        coordinator = reportDataArray[i].Coordinator;
                        goalPC      = reportDataArray[i].GoalPC;
                        coordCnt = 0;
                        lineCnt++;
                        coordTitle = makeTitle(coordinator, goalPC, 'Coord'); // This has not been specified how to calulate yet.
                        coordRec   = makeRegion('CoordRegion');
                        coordRec.appendChild(coordTitle);
                        column.appendChild(coordRec);
                        while (i < l && division == reportDataArray[i].Division && coordinator == reportDataArray[i].Coordinator && lineCnt < linesPerColumn) {
                            coordCnt++;
                            orgCnt = 0;
                            organizer = reportDataArray[i].Organizer;
                            goalPC    = reportDataArray[i].GoalPC;
                            lineCnt++;
                            orgTitle = makeTitle(organizer, goalPC, 'Org');
                            coordRec.appendChild(orgTitle);
                            while (i < l && division == reportDataArray[i].Division && coordinator == reportDataArray[i].Coordinator && organizer == reportDataArray[i].Organizer && lineCnt < linesPerColumn) {
                                execName = reportDataArray[i].ExecName;
                                goalPC   = reportDataArray[i].GoalPC;
                                lineCnt++;
                                execTitle = makeTitle(execName, goalPC, 'Exec');
                                coordRec.appendChild(execTitle);
                                i++;
                            }
                        }
                    }
                    columnCnt++;
                }
                formattedReport.appendChild(page);
            }
        }

        function saveAsCsv1() {
            reportGridOptions.api.exportDataAsCsv({fileName: 'Recruits - Report Data.csv'});
        }

        function saveAsCsv2() {
            filteredSummarizedGridOptions.api.exportDataAsCsv({fileName: 'Recruits - Filtered Summarized Data.csv'});
        }

        function saveAsCsv3() {
            summarizedGridOptions.api.exportDataAsCsv({fileName: 'Recruits - Summarized Data.csv'});
        }

        function saveAsCsv4() {
            recruitsGridOptions.api.exportDataAsCsv({fileName: 'Recruits - Object Data.csv'});
        }

        function saveAsCsv5() {
            eboardGridOptions.api.exportDataAsCsv({fileName: 'Recruits - Eboard Object Data.csv'});
        }

        function phoneFormat(s) {
            var s1;
            if(s == null || s == '')
                s1 = 'n/a';
            else {
                s1 = s.replace('-', '');
                s1 = s1.replace(' ', '');
                s1 = s1.replace('(', '');
                s1 = s1.replace(')', '');
                s1 = s1.substr(0, 3) + '-' + s1.substr(3, 3) + '-' + s1.substr(6);
            }
            return s1;
        }

        function toProperCase(s)
        // My version - handles hyphenated names correctly :)
        {
            var s1;
            if(s == null)
                s1 = '';
            else
                s1 = s.toLowerCase().replace(/\b[a-zA-Z]/g,function($1) {return $1.toUpperCase();});

            return s1;
        }

        function processEboardRow(node) {

            var eboardRec;
            var division;
            var execName;
            var execTitle;
            var organizer;
            var coordinator;
            var total;
            var newTotal;
            var oldTotal;

            eboardRec   = node.data;
            division    = eboardRec.Division    || 'empty';
            coordinator = eboardRec.Coordinator || 'empty';
            organizer   = eboardRec.Organizer   || 'empty';
            execName    = eboardRec.ExecName    || 'empty';
            execTitle   = eboardRec.Title       || 'empty';
            total       = eboardRec.Total       || 0.0;
            newTotal    = eboardRec.NewTotal    || 0.0;
            oldTotal    = eboardRec.OldTotal    || 0.0;

            filteredSummarizedDataArray.push({Division: division, Coordinator: coordinator, Organizer: organizer, ExecName: execName, Title: execTitle, Total: total, NewTotal:newTotal, OldTotal:oldTotal});

            if(!divCoordOrgEboardMap[division])
                divCoordOrgEboardMap[division] = {};

            if(!divCoordOrgEboardMap[division][coordinator])
                divCoordOrgEboardMap[division][coordinator] = {};

            if(!divCoordOrgEboardMap[division][coordinator][organizer])
                divCoordOrgEboardMap[division][coordinator][organizer] = {};

            if(!divCoordOrgEboardMap[division][coordinator][organizer][execName])
                divCoordOrgEboardMap[division][coordinator][organizer][execName] = {Division: division, Coordinator: coordinator, Organizer: organizer, ExecName: execName, Title: execTitle, Total: total, NewTotal:newTotal, OldTotal:oldTotal};
        }

        function processEboardMap() {

            var mapKey;
            var division;
            var eboardRec;
            var execName;
            var execTitle;
            var organizer;
            var coordinator;
            var total;
            var newTotal;
            var oldTotal;

            summarizedDataArray = [];
            divCoordOrgEboardMap  = {};
            for(mapKey in eboardMap) {
                eboardRec   = eboardMap[mapKey];
                division    = eboardRec.Division;
                execName    = eboardRec.ExecName;
                execTitle   = eboardRec.Title;
                organizer   = eboardRec.Organizer;
                coordinator = eboardRec.Coordinator;
                total       = eboardRec.Total;
                newTotal    = eboardRec.NewTotal;
                oldTotal    = eboardRec.OldTotal;
                summarizedDataArray.push(eboardRec);
            }

            summarizedGridOptions = {
                columnDefs: summarizedColumnDefs,
                groupHeaders: false,
                rowData: summarizedDataArray,
                enableSorting: true,
                enableFilter: true,
                suppressContextMenu: true,
                suppressMenuMainPanel: true,
                suppressMenuColumnPanel: true,
                suppressMenuFilterPanel:false,
                onGridReady:summarizedGridReadyHandler
            };

            new agGrid.Grid(summarizedGridDiv, summarizedGridOptions);
        }

        function summarizedGridReadyHandler() {
            summarizedGridDisplayed = true;
            console.log('summarizedGrid Ready');
            setEboardFilter();
            buildFilteredSummarizedData(); // Summarized grid has all Exec types - need to filter for just Eboard.
        }

        function buildFilteredSummarizedData() {

            filteredSummarizedDataArray = [];
            // Using filtered data from grid to populate filteredSummarizedDataArray:
            summarizedGridOptions.api.forEachNodeAfterFilterAndSort(processEboardRow);

            filteredSummarizedGridOptions = {
                debug:false,
                columnDefs: filteredSummarizedColumnDefs,
                groupHeaders: false,
                rowData: filteredSummarizedDataArray,
                enableSorting: true,
                enableFilter: true,
                suppressContextMenu: true,
                suppressMenuMainPanel: true,
                suppressMenuColumnPanel: true,
                suppressMenuFilterPanel:false,
                onGridReady:filteredSummarizedGridReadyHandler
            };

            new agGrid.Grid(filteredSummarizedGridDiv, filteredSummarizedGridOptions);

        }

        function filteredSummarizedGridReadyHandler() {
            filteredSummarizedGridDisplayed = true;
            console.log('filteredSummarizedGrid Ready');

            filteredSummarizedGridOptions.api.setSortModel(defaultSort);
            console.log('filteredSummarizedGrid sorted');
        }

        function buildReportMap() {

            var divisionMapKey;
            var coordMapKey;
            var coordOrgMapKey;
            var divCoordOrgEboardMapKey;
            var divisionRec;
            var coordRec;
            var coordOrgRec;
            var coordOrgEboardRec;
            var division;
            var execName;
            var execTitle;
            var coordinator;
            var organizer;
            var total;
            var newTotal;
            var oldTotal;
            var goalPC;
            var newPC;
            var oldPC;

            reportDataArray = [];

            for(divisionMapKey in divCoordOrgEboardMap) {
                divisionRec = divCoordOrgEboardMap[divisionMapKey];
                for (coordMapKey in divisionRec) {
                    coordRec = divCoordOrgEboardMap[divisionMapKey][coordMapKey];
                    for (coordOrgMapKey in coordRec) {
                        coordOrgRec = divCoordOrgEboardMap[divisionMapKey][coordMapKey][coordOrgMapKey];
                        for (divCoordOrgEboardMapKey in coordOrgRec) {
                            coordOrgEboardRec = divCoordOrgEboardMap[divisionMapKey][coordMapKey][coordOrgMapKey][divCoordOrgEboardMapKey];
                            division    = coordOrgEboardRec.Division;
                            coordinator = coordOrgEboardRec.Coordinator;
                            organizer   = coordOrgEboardRec.Organizer;
                            execName    = coordOrgEboardRec.ExecName;
                            execTitle   = coordOrgEboardRec.Title;
                            total       = coordOrgEboardRec.Total;
                            newTotal    = coordOrgEboardRec.NewTotal;
                            oldTotal    = coordOrgEboardRec.OldTotal;

                            goalPC      = newPC = oldPC = 0.0;
                            //        if(division == 'Hospital') {
                            if(newTotal >= 2)
                                newPC = 1;
                            else if(newTotal == 1)
                                newPC = .5;

                            if(oldTotal >= 2)
                                oldPC = 1;
                            else if(newTotal == 1)
                                oldPC = .5;

                            if(newPC + oldPC > 0)
                                goalPC =  ((newPC / 2) + (oldPC / 2)) * 100;

                            //       }

                            //   if(division == 'Kaiser') {
                            //      to be defined.
                            //   }

                            reportDataArray.push({
                                Division: division,
                                Coordinator: coordinator,
                                Organizer: organizer,
                                ExecName: execName,
                                Title: execTitle,
                                Total: total,
                                NewTotal:newTotal,
                                OldTotal:oldTotal,
                                GoalPC: goalPC
                            });
                        }
                    }
                }
            }

            reportGridOptions = {
                debug:false,
                columnDefs: reportColumnDefs,
                groupHeaders: false,
                rowData: reportDataArray,
                enableSorting: true,
                enableFilter: true,
                suppressContextMenu: true,
                suppressMenuMainPanel: true,
                suppressMenuColumnPanel: true,
                suppressMenuFilterPanel:false,
                onGridReady:reportGridReadyHandler
            };

            new agGrid.Grid(reportGridDiv, reportGridOptions);
        }

        function reportGridReadyHandler() {
            reportGridDisplayed = true;
            console.log('reportGrid Ready');

            reportGridOptions.api.setSortModel(defaultSort);
            console.log('reportGrid sorted');
            buildFormattedReport();
        }


        function setEboardFilter() {
            var filterApi = summarizedGridOptions.api.getFilterApi('Title');
            var filter    = ['Executive Board'];
            filterApi.setModel(filter);
            summarizedGridOptions.api.onFilterChanged();

            var sort = [
                {colId: 'Coordinator', sort: 'asc'},
                {colId: 'Organizer', sort: 'asc'},
                {colId: 'ExecName', sort: 'asc'}
            ];

            summarizedGridOptions.api.setSortModel(sort);
        }

        function loadEboardSeats() {

            var eboardQuery = "SELECT Constituency__c,SeatHolder__r.Name,SeatHolder__r.Id,Coordinator__r.Name,Coordinator__r.Id,DistrictName__c,DivisionName__c,Ecomm_c__c,Executive_Body_Title__c,MemberID__c,Name,Organizer__r.Name,Organizer__r.Id,RouteListAccountId__c,SeatHolder__c,SeatName__c,Title__c " +
                    "FROM EBoardSeats__c Where DivisionName__c = 'HOSPITAL' Or DivisionName__c = 'KAISER'";

            console.log(eboardQuery);
            var eboardResults = sforce.connection.query(eboardQuery);

            //    try {
            processEboardSeats(eboardResults);
            //    }
            //    catch(e) {alert('An error occurred retrieving from EBoardSeats__c: ' + e.faultstring);}

        }

        function processEboardSeats(results) {
            var processedAll;
            var eboardRecords;
            var eboardRec;
            var recCnt;
            var division;
            var execName;
            var execId;
            var seatName;
            var organizer;
            var organizerId;
            var coordinator;
            var coordinatorId;
            var execTitle;
            var idCheck;

            processedAll    = false;
            recCnt          = 0;
            eboardDataArray = [];
            eboardMap       = {};
            unseatedMap     = {};
            while (!processedAll) {
                eboardRecords = results.getArray('records');
                for (i = 0; i < eboardRecords.length; i++) {
                    execId = execName = seatName = organizer = coordinator = execTitle = 'empty';
                    recCnt++;
                    eboardRec   = eboardRecords[i];
                    division    = toProperCase(eboardRec.DivisionName__c);
                    seatName    = toProperCase(eboardRec.SeatName__c);
                    execTitle   = toProperCase(eboardRec.Executive_Body_Title__c);

                    if(eboardRec.SeatHolder__r) {
                        execName = toProperCase(eboardRec.SeatHolder__r.Name);
                        execId   = eboardRec.SeatHolder__r.Id.trim();
                    }

                    if(eboardRec.Coordinator__r) {
                        coordinator   = toProperCase(eboardRec.Coordinator__r.Name);
                        coordinatorId = eboardRec.Coordinator__r.Id;
                    }

                    if(eboardRec.Organizer__r) {
                        organizer   = toProperCase(eboardRec.Organizer__r.Name);
                        organizerId = eboardRec.Organizer__r.Id;
                    }

                    if(execId) {

                        eboardDataArray.push({
                            Division: division,
                            ExecName: execName,
                            Title: execTitle,
                            SeatName: seatName,
                            Organizer: organizer,
                            Coordinator: coordinator
                        });

                        if (!eboardMap[execId]) {
                            eboardMap[execId] = {
                                Division: division,
                                ExecId: execId,
                                ExecName: execName,
                                Title: execTitle,
                                SeatName: seatName,
                                OrganizerId: organizerId,
                                Organizer: organizer,
                                CoordinatorId: coordinatorId,
                                Coordinator: coordinator,
                                Total: 0.0,
                                NewTotal: 0.0,
                                OldTotal: 0.0
                            };
                        }
                        else {
                            if(!unseatedMap[execId]) {
                                unseatedMap[execId] = execId;
                                console.log('Found duplicate eboard person with Id: ' + execId);
                                console.log("SELECT SeatHolder__r.Name,SeatHolder__r.Id,Constituency__c,DistrictName__c,Ecomm_c__c,Executive_Body_Title__c,Title__c FROM EBoardSeats__c Where (DivisionName__c = 'HOSPITAL' Or DivisionName__c = 'KAISER') And SeatHolder__r.Id = '" + execId + "'");
                            }
                        }
                    }
                    else {

                        if(execId ==  '')
                            idCheck = 'empty';
                        else
                            idCheck = execId;

                        if(!unseatedMap[idCheck]) {
                            unseatedMap[idCheck] = idCheck;
                            console.log('Found eboard record without a person Id.');
                            console.log("SELECT SeatHolder__r.Name,SeatHolder__r.Id,Constituency__c,DistrictName__c,Ecomm_c__c,Executive_Body_Title__c,Title__c FROM EBoardSeats__c Where (DivisionName__c = 'HOSPITAL' Or DivisionName__c = 'KAISER') And SeatHolder__r.Id = '' ");
                        }

                        eboardDataArray.push({
                            Division: division,
                            ExecName: 'Unseated',
                            Title: execTitle,
                            SeatName: seatName,
                            Organizer: organizer,
                            Coordinator: coordinator
                        });

                    }

                }
                if (results.done == 'true') {
                    processedAll = true;
                }
                else {
                    results = sforce.connection.queryMore(results.queryLocator);
                }
            }

            eboardGridOptions = {
                columnDefs: eboardColumnDefs,
                groupHeaders: false,
                rowData: eboardDataArray,
                enableSorting: true,
                enableFilter: true,
                suppressContextMenu: true,
                suppressMenuMainPanel: true,
                suppressMenuColumnPanel: true,
                suppressMenuFilterPanel:false,
                onGridReady:eboardGridReadyHandler
            };

            new agGrid.Grid(eboardGridDiv, eboardGridOptions);
        }

        function eboardGridReadyHandler() {
            eboardGridDisplayed = true;
            console.log('eboardGrid Ready');

            var sort = [
                {colId: 'Division',    sort: 'asc'},
                {colId: 'Coordinator', sort: 'asc'},
                {colId: 'Organizer',   sort: 'asc'},
                {colId: 'ExecName',    sort: 'asc'}
            ];

            eboardGridOptions.api.setSortModel(sort);
            console.log('eboardGrid sorted');
        }

        function loadRecruits() {

            var recruitQuery = "SELECT Recruited_By__r.Id, Recruited_By__r.Name, Recruited_By__r.EBoard__c, Division__c, Report_Tags__c, Employer_Name__c, Total_Shift__c, Location__c, Recruited_By__c,Recruit__r.Id,Recruit__r.Name, Recruit_Name__c, Recruit_Status__c, Recruit__c, Shift_Status__c, Shift__c, Volunteer_Date__c, Volunteer_Type__c FROM Recruit__c  WHERE Total_Shift__c > 0 Order By Recruited_By__r.LastName,Recruited_By__r.FirstName";
            console.log(recruitQuery);
            var recruitResults = sforce.connection.query(recruitQuery);

            //    try {
            processRecruits(recruitResults);
            //    }
            //    catch(e) {alert('An error occurred retrieving from Recruit__c: ' + e.faultstring);}
        }

        function processRecruits(results) {

            var processedAll;
            var recruitRecords;
            var recCnt;
            var tags;
            var recruitedById;

            var recruitName;
            var recruitRec;
            var recruitId;
            var recruitedByName;
            var recruitedByIsEBoard;
            var employerName;
            var shiftTotal;
            var newLeaderTotal;
            var oldLeaderTotal;
            var location;
            var recruitStatus;
            var shiftStatus;
            var shift;
            var volunteerDate;
            var volunteerType;
            var division;

            processedAll      = false;
            recCnt            = 0;
            recruitsDataArray = [];

            while (!processedAll) {
                recruitRecords = results.getArray('records');
                for (i = 0; i < recruitRecords.length; i++) {
                    shiftTotal     = 0.0;
                    newLeaderTotal = 0.0;
                    oldLeaderTotal = 0.0;
                    recruitedById = employerName = location = recruitStatus = shiftStatus = shift = volunteerDate = volunteerType = recruitedByName = recruitedByIsEBoard = division = '';
                    recruitRec = recruitRecords[i];
                    recCnt++;
                    tags                = recruitRec.Report_Tags__c;
                    employerName        = toProperCase(recruitRec.Employer_Name__c);
                    shiftTotal          = parseFloat(recruitRec.Total_Shift__c);
                    location            = toProperCase(recruitRec.Location__c);
                    recruitStatus       = recruitRec.Recruit_Status__c;
                    shiftStatus         = recruitRec.Shift_Status__c;
                    shift               = recruitRec.Shift__c;
                    volunteerDate       = recruitRec.Volunteer_Date__c;
                    volunteerType       = recruitRec.Volunteer_Type__c;
                    division            = recruitRec.Division__c;

                    if(recruitRec.Recruit__r) {
                        recruitId   = recruitRec.Recruit__r.Id;
                        recruitName = toProperCase(recruitRec.Recruit__r.Name);
                    }
                    else {
                        // If Alt fields used, then recruit is not a contact.
                        recruitId = '';
                        recruitName = '[' + toProperCase(recruitRec.Recruit_Name__c) + ']';
                    }

                    if(recruitRec.Recruited_By__r) {
                        recruitedByName     = toProperCase(recruitRec.Recruited_By__r.Name);
                        recruitedById       = recruitRec.Recruited_By__r.Id;
                        recruitedByIsEBoard = recruitRec.Recruited_By__r.EBoard__c;

                        if(tags == 'MinWageExecCompLdr')
                            oldLeaderTotal = shiftTotal;
                        else
                            newLeaderTotal = shiftTotal;  // Alt names will always be counted as New Leaders
                    }

                    if(eboardMap[recruitedById]) {
                        eboardMap[recruitedById].Total += shiftTotal;
                        eboardMap[recruitedById].NewTotal += newLeaderTotal;
                        eboardMap[recruitedById].OldTotal += oldLeaderTotal;
                    }

                    recruitsDataArray.push({
                        Location:location,
                        Recruit:recruitName,
                        ReportTags:tags,
                        RecruitedById:recruitedById,
                        RecruitedByName:recruitedByName,
                        RecruitedByIsEBoard:recruitedByIsEBoard,
                        EmployerName:employerName,
                        ShiftTotal:shiftTotal,
                        NewTotal:newLeaderTotal,
                        OldTotal:oldLeaderTotal,
                        RecruitStatus:recruitStatus,
                        Shift:shift,
                        ShiftStatus:shiftStatus,
                        VolunteerDate:volunteerDate,
                        VolunteerType:volunteerType,
                        Division:division
                    });
                }

                if (results.done == 'true') {
                    processedAll = true;
                }
                else {
                    results = sforce.connection.queryMore(results.queryLocator);
                }
            }

            recruitsGridOptions = {
                columnDefs: recruitsColumnDefs,
                groupHeaders: false,
                rowData: recruitsDataArray,
                enableSorting: true,
                enableFilter: true,
                suppressContextMenu: true,
                suppressMenuMainPanel: true,
                suppressMenuColumnPanel: true,
                suppressMenuFilterPanel:false,
                onGridReady:recruitsGridReadyHandler
            };

            new agGrid.Grid(recruitsGridDiv, recruitsGridOptions);
        }

        function recruitsGridReadyHandler() {
            recruitsGridDisplayed = true;
            console.log('recruitsGrid Ready');
        }

        function initAgGrid() {

            reportGridDisplayed = filteredSummarizedGridDisplayed = summarizedGridDisplayed =  recruitsGridDisplayed = eboardGridDisplayed = false;

            defaultSort = [
                {colId: 'Division',    sort: 'asc'},
                {colId: 'Coordinator', sort: 'asc'},
                {colId: 'Organizer',   sort: 'asc'},
                {colId: 'ExecName',    sort: 'asc'}
            ];

            recruitsColumnDefs = [
                {headerName: 'Volunteer Date',  field: 'VolunteerDate',       width: 120, sortingOrder: ['asc','desc']},
                {headerName: 'Division',        field: 'Division',            width: 120, sortingOrder: ['asc','desc']},
                {headerName: 'Location',        field: 'Location',            width: 120, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Recruited By',    field: 'RecruitedByName',     width: 170, suppressMenu:true, sortingOrder: ['asc','desc']},
                {headerName: 'Is Eboard',       field: 'RecruitedByIsEBoard', width: 100, cellClass: 'center-align', sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Recruit',         field: 'Recruit',             width: 175, suppressMenu:true, sortingOrder: ['asc','desc']},
                {headerName: 'Recruit Status',  field: 'RecruitStatus',       width: 120, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'ReportTags',      field: 'ReportTags',          width: 160, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Shift',           field: 'Shift',               width: 100, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Status',          field: 'ShiftStatus',         width: 100, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Volunteer Type',  field: 'VolunteerType',       width: 150, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Shift Total',     field: 'ShiftTotal',          width: 110, cellClass: 'right-align'},
                {headerName: 'New Leader',      field: 'NewTotal',            width: 110, cellClass: 'right-align'},
                {headerName: 'Old Leader',      field: 'OldTotal',            width: 110, cellClass: 'right-align'},
                {headerName: 'Employer Name',   field: 'employerName',        width: 260, suppressMenu:true}
            ];

            eboardColumnDefs = [
                {headerName: 'Division',        field: 'Division',            width: 110, sortingOrder: ['asc','desc']},
                {headerName: 'Name',            field: 'ExecName',            width: 220, suppressMenu:true, sortingOrder: ['asc','desc']},
                {headerName: 'Title',           field: 'Title',               width: 220, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'SeatName',        field: 'SeatName',            width: 400, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Coordinator',     field: 'Coordinator',         width: 220, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Organizer',       field: 'Organizer',           width: 220, sortingOrder: ['asc','desc'], filter: 'set'}
            ];

            summarizedColumnDefs = [
                {headerName: 'Name',             field: 'ExecName',            width: 220, suppressMenu:true, sortingOrder: ['asc','desc']},
                {headerName: 'Shift Total',      field: 'Total',               width: 110, suppressMenu:true, sortingOrder: ['asc','desc'], sort: 'desc', cellClass: 'right-align'},
                {headerName: 'New Leader',       field: 'NewTotal',            width: 110, suppressMenu:true, sortingOrder: ['asc','desc'], sort: 'desc', cellClass: 'right-align'},
                {headerName: 'Old Leader',       field: 'OldTotal',            width: 110, suppressMenu:true, sortingOrder: ['asc','desc'], sort: 'desc', cellClass: 'right-align'},
                {headerName: 'Title',            field: 'Title',               width: 220, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'SeatName',         field: 'SeatName',            width: 400, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Coordinator',      field: 'Coordinator',         width: 220, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Organizer',        field: 'Organizer',           width: 220, sortingOrder: ['asc','desc'], filter: 'set'}
            ];

            filteredSummarizedColumnDefs = [
                {headerName: 'Division',         field: 'Division',            width: 110, sortingOrder: ['asc','desc']},
                {headerName: 'Name',             field: 'ExecName',            width: 220, suppressMenu:true, sortingOrder: ['asc','desc']},
                {headerName: 'Shift Total',      field: 'Total',               width: 110, suppressMenu:true, sortingOrder: ['asc','desc'], cellClass: 'right-align'},
                {headerName: 'New Leader',       field: 'NewTotal',            width: 110, suppressMenu:true, sortingOrder: ['asc','desc'], cellClass: 'right-align'},
                {headerName: 'Old Leader',       field: 'OldTotal',            width: 110, suppressMenu:true, sortingOrder: ['asc','desc'], cellClass: 'right-align'},
                {headerName: 'Title',            field: 'Title',               width: 220, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Coordinator',      field: 'Coordinator',         width: 220, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Organizer',        field: 'Organizer',           width: 220, sortingOrder: ['asc','desc'], filter: 'set'}
            ];

            reportColumnDefs =  [
                {headerName: 'Division',        field: 'Division',            width: 110, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Coordinator',     field: 'Coordinator',         width: 220, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Organizer',       field: 'Organizer',           width: 220, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Eboard',          field: 'ExecName',            width: 220, suppressMenu:true, sortingOrder: ['asc','desc']},
                {headerName: 'Shift Total',     field: 'Total',               width: 220, suppressMenu:true, sortingOrder: ['asc','desc'], cellClass: 'center-align'},
                {headerName: 'New Leader',      field: 'NewTotal',            width: 220, suppressMenu:true, sortingOrder: ['asc','desc'], cellClass: 'center-align'},
                {headerName: 'Old Leader',      field: 'OldTotal',            width: 220, suppressMenu:true, sortingOrder: ['asc','desc'], cellClass: 'center-align'},
                {headerName: '% Goal',          field: 'GoalPC',              width: 220, suppressMenu:true, sortingOrder: ['asc','desc'], cellClass: 'center-align'}
            ];
        }

        // ***************** Globals ***************** //
        var formattedReport;
        var defaultSort;

        var reportDataArray;
        var filteredSummarizedDataArray;
        var summarizedDataArray;
        var recruitsDataArray;
        var eboardDataArray;

        var reportColumnDefs;
        var filteredSummarizedColumnDefs;
        var summarizedColumnDefs;
        var recruitsColumnDefs;
        var eboardColumnDefs;

        var reportGridOptions;
        var filteredSummarizedGridOptions;
        var summarizedGridOptions;
        var recruitsGridOptions;
        var eboardGridOptions;

        var reportGridDiv;
        var filteredSummarizedGridDiv;
        var summarizedGridDiv;
        var recruitsGridDiv;
        var eboardGridDiv;

        var reportGridDisplayed;
        var filteredSummarizedGridDisplayed;
        var summarizedGridDisplayed;
        var recruitsGridDisplayed;
        var eboardGridDisplayed;

        var eboardMap;
        var divCoordOrgEboardMap;

        var saveAsCsvButton1;
        var saveAsCsvButton2;
        var saveAsCsvButton3;
        var saveAsCsvButton4;
        var saveAsCsvButton5;

        // ***************** Main Program Entry *****************
        document.addEventListener('DOMContentLoaded', function () {

            sforce.connection.sessionId = "{!$Api.Session_ID}";
            recruitsGridDiv   = document.getElementById("RecruitsGridDiv");
            eboardGridDiv     = document.getElementById("EboardGridDiv");
            summarizedGridDiv = document.getElementById("SummarizedGridDiv");
            reportGridDiv     = document.getElementById("ReportGridDiv");
            filteredSummarizedGridDiv = document.getElementById("FilteredSummarizedGridDiv");

            formattedReport    = document.getElementById("FormattedReportDiv");

            $("#tabContainer").tabs();
            initAgGrid();
            loadEboardSeats();
            loadRecruits();
            processEboardMap();
            buildReportMap();

            saveAsCsvButton1 = document.getElementById("SaveAsCsvButton1");
            saveAsCsvButton1.addEventListener("click", saveAsCsv1, false);

            saveAsCsvButton2 = document.getElementById("SaveAsCsvButton2");
            saveAsCsvButton2.addEventListener("click", saveAsCsv2, false);

            saveAsCsvButton3 = document.getElementById("SaveAsCsvButton3");
            saveAsCsvButton3.addEventListener("click", saveAsCsv3, false);

            saveAsCsvButton4 = document.getElementById("SaveAsCsvButton4");
            saveAsCsvButton4.addEventListener("click", saveAsCsv4, false);

            saveAsCsvButton5 = document.getElementById("SaveAsCsvButton5");
            saveAsCsvButton5.addEventListener("click", saveAsCsv5, false);

        });

    </script>
    </body>
</apex:page>