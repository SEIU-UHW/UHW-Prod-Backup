<apex:page showHeader="false" sidebar="false" standardStylesheets="false" docType="html-5.0" applyHtmlTag="false" applyBodyTag="false"
controller="GotvCcController">
<html>

<head>
  <meta charset="utf-8"></meta>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"></meta>
  <meta name="referrer" content="always"></meta>
  <apex:includeScript value="{!$Resource.agGridEnterprise17}" />
  <apex:stylesheet value="https://fonts.googleapis.com/css?family=Roboto+Condensed|Roboto+Mono" />
  <apex:stylesheet value="https://fonts.googleapis.com/css?family=Droid+Serif" />
  <apex:stylesheet value="https://fonts.googleapis.com/css?family=Open+Sans" />
  <apex:stylesheet value="https://fonts.googleapis.com/css?family=Source+Sans+Pro" />
  <apex:stylesheet value="{!URLFOR($Resource.FontAwesomeZip, 'font-awesome.css')}" />
  <style>
    @font-face {
      font-family: 'FontAwesome';
      src: url("{!URLFOR($Resource.FontAwesomeZip, 'fontawesome-webfont.eot')}");
      src: url("{!URLFOR($Resource.FontAwesomeZip, 'fontawesome-webfont.eot')}") format('embedded-opentype'),
      url("{!URLFOR($Resource.FontAwesomeZip, 'fontawesome-webfont.woff')}") format('woff'),
      url("{!URLFOR($Resource.FontAwesomeZip, 'fontawesome-webfont.ttf')}") format('truetype'),
      url("{!URLFOR($Resource.FontAwesomeZip, 'fontawesome-webfont.svg')}") format('svg');
      font-weight: normal;
      font-style: normal;
    }

    .options-span {
      font-size: 18px;
    }

    #filters-div, #views-div {
      display: inline-block;
      font-size: 18px;
      width: 20px;
    }

    .not-allowed {
      cursor: not-allowed !important;
    }
    .allowed {
      cursor: inherit;
    }

    @media screen and (max-width: 1920px) { 
      #AccountGridDiv {
        height: 765px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    @media screen and (max-width: 1366px) { 
      #AccountGridDiv {
        height: 550px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    @media screen and (max-width: 1280px) { 
      #AccountGridDiv {
        height: 550px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    #FilterDescDiv {
      padding-top: 5px;
      padding-bottom: 5px;
      padding-left: 20px;
      padding-right: 20px;
      color: yellow;
    }

    #FilterLbl {
      margin-left: 23px;
      color: yellow;
    }

    .ag-cell-range-selected {
      background-color: #b0e0e6 !important;
    }


    .BasicHdr {
      margin-left: 2px;
    }

    .BasicHdrR {
      text-align: right;
      color: rebeccapurple;
    }

    .VoteBlock {
      font-family: 'Montserrat', sans-serif;
      background-color: rgba(205, 92, 92, 0.2);
    }

    .VoteBlockHdr {
      color: rgb(205, 92, 92);
      margin-left: 2px;
    }

    .NoEdit {
      font-family: 'Montserrat', sans-serif;
      background-color: rgba(205, 92, 92, 0.2);
    }

    .NoEditCenter {
      display: flex;
      justify-content: center;
      background-color: rgba(205, 92, 92, 0.2);
    }

    .NoEditHdr {
      color: rgb(205, 92, 92);
      margin-left: 2px;
    }

    .NoEditHdrCenter {
      display: flex;
      justify-content: center;
      color: rgb(205, 92, 92);
    }

    .XHeaderLeft, .XCellLeft {
      background-color: rgba(178, 92, 205, 0.15);
    }

    .XCellCenter {
      display: flex;
      justify-content: center;
      background-color: rgba(178, 92, 205, 0.15);
    }

    .XHdrCenter {
      display: flex;
      justify-content: center;
      background-color: rgba(178, 92, 205, 0.15);
    }

    #VoteBlockSelectList,
    #UniverseSelectList,
    #ViewSelectList {
      width: 130px;
      margin-left: 2px;
      margin-right: 4px;
      background-color: aliceblue;
    }

    #TypeTotalsContainerDiv,
    #SumTotalsContainerDiv,
    #VoteBlockContainerDiv,
    #OwnerThreeTouchContainerDiv1,
    #OwnerThreeTouchContainerDiv2 {
      display: flex;
      width: 90%;
      padding-left: 9px;
      padding-top: 4px;
      padding-bottom: 9px;
      padding-right: 9px;
    }

    #OwnerVoteBlockContainerDiv {
      display: flex;
      flex-wrap: wrap;
      width: 90%;
      padding-left: 9px;
      padding-top: 4px;
      padding-bottom: 9px;
      padding-right: 9px;
    }

    #Tab2Content,
    #Tab3Content,
    #Tab4Content,
    #Tab5Content {
      min-height: 850px;
      margin-right: 10px;
      margin-bottom: 5px;
    }

    #CountsDiv1,
    #CountsDiv1a {
      display: inline-block;
      margin-left: 10px;
      margin-right: 10px;
      margin-top: 5px;
      margin-bottom: 5px;
    }

    #CountsDiv2 {
      display: inline-block;
      width: 48%;
      margin-left: 10px;
      margin-right: 10px;
      margin-top: 5px;
      margin-bottom: 5px;
    }

    #CountsDiv3 {
      display: block;
      width: 97%;
      margin-left: 10px;
      margin-right: 10px;
      margin-top: 5px;
      margin-bottom: 5px;
    }

    .CountsTitle {
      font-size: 16px;
      width: 50%;
      margin-left: 10px;
      margin-top: 5px;
    }

    .SaveButton {
      float: right;
      margin-left: 4px;
      margin-right: 10px;
      margin-top: 2px;
      margin-bottom: 5px;
      border-radius: 15px;
      background-color: orange;
      display: none;
    }

    .UniverseButton,.ViewsButton {
      float: right;
      margin-left: 0px;
      margin-right: 52px;
      margin-top: 8px;
      margin-bottom: 5px;
      border-radius: 15px;
    }

    .Btn {
      float: right;
      margin-left: 0px;
      margin-right: 5px;
      margin-bottom: 5px;
      border-radius: 15px;
      cursor:pointer;
    }

    #Version {
      display: inline-block;
      width: 119px;
      height: 23px;
      padding-top: 6px;
      font-size: 10px;
      padding-left: 10px;
    }

    #ScreenSize {
      display: inline-block;
      height: 23px;
      padding-top: 6px;
      font-size: 10px;
      text-align: right;
      padding-right: 40px;      
    }

    .cellRight {
      text-align: right;
      padding-right: 5px !important;
    }

    .cellCenter {
      text-align: center !important;
    }

    .cellLeft {
      text-align: left;
      padding-left: 5px !important;
    }

    .BaseGrid {
      font-family: 'Open Sans', serif !important;
    }

    .filterCol {
      background-color: rgba(206, 228, 233, 0.4);
    }

    .HeaderLeft {  
      color: blue;
      margin-left: 2px;
      padding-right: 7px !important;
    }

    .HeaderRight {  
      display: flex;  
      justify-content: right;
      color: blue;
      margin-left: 2px;
      padding-right: 7px !important;
    }

    .HeaderCenter {  
      color: blue;
      margin-left: 2px;
      padding-left: 18px !important;
      padding-right: 5px !important;
    }

    .chkBox {
      background: #4d84c7;
      border-radius: 30px;
    }

    .tabs {
      position: relative;
    }

    .tabs__navigation {
      margin-top: 8px;
      margin-bottom: 4px;
      clear: both;
      display: grid;
      grid-template-columns: 42% 17% 41%;
    }

    .tabs__link {
      display: inline-block;
      text-decoration: none;
      padding: .25rem .75rem;
      color: #4ca9ce;
      background: #E7E7E7;
      margin-left: .25rem;
    }

    .inactive {
      color: #B3B3B3;
    }

    .tabs__link:first-child {
      margin-left: 10px;
    }

    .tabs__link--active {
      font-weight: bold;
      border-bottom-color: #fff;
      background: #fff;
      color: #186baa;
    }

    .NoDisplay {
      display: none;
    }

    .YesDisplay {
      display: initial;
    }

    .hide {
      visibility: hidden;
    }

    .show {
      visibility: visible;        
    }

    #EditInsidePlanNotesDiv , #EditConsolidatedNotesDiv {
      position: fixed;
    }

    .NoData {
      position: fixed;
      top: 200px;
      left: 270px;
      width: 200px;
      height: 50px;
      background-color: white;
      color: blue;
      font-weight: bold;
      font-weight: bold;
      font-style: italic;
    }

    .modalDialog {
      position: fixed;
      font-family: Arial, Helvetica, sans-serif;
      top: 200px;
      left: 270px;
      width: 80%;
      height: 70%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 99999;
      opacity: 0.8;
      pointer-events: none;
    }

    .modalDialog>div {
      width: 400px;
      position: relative;
      margin: 10% auto;
      padding: 5px 20px 13px 20px;
      border-radius: 10px;
      background: #fff;
      background: -moz-linear-gradient(#fff, #999);
      background: -webkit-linear-gradient(#fff, #999);
      background: -o-linear-gradient(#fff, #999);
    }

    .EditNotes {
      position: fixed;
      top: 200px;
      height: 200px;
      left: 27%;
      width: 50%;
      z-index: 99999;
      background-color: rebeccapurple;
    }

    .EditNotesH2 {
      text-align: center;
      color: white;
    }

    .CreateUniverse, .CreateView {
      position: fixed;
      top: 200px;
      left: 20%;
      min-width: 31%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      z-index: 99999;
      background-color: rebeccapurple;
      color: white;
      padding-top: 15px;
      padding-bottom: 15px;
    }

    .CreateUniverseH2, .CreateViewH2 {
      text-align: center;
    }

    .CreateXmatch {
      position: fixed;
      top: 200px;
      left: 20%;
      min-width: 31%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      z-index: 99999;
      background-color: rgb(160, 145, 116);
      color: white;
      padding-top: 15px;
      padding-bottom: 15px;
      text-align: center;
    }

    body {
      color: white;
      background-color: rebeccapurple;
      margin: 0px !important;
      font-family: 'Source Sans Pro', sans-serif;
      border: none !important;
      font-size: 14px;
    }

    #XmatchBtn,#XmatchedBtn {
      margin-left: 5px;
      margin-top: 5px;
    }

    .chks {
      margin-left: 6px;
      margin-top: 8px;
    }

    .chksLbl {
      font-size: 80%;
      color:red;
      margin-right: 10px;
    }

    /* removes outline dots from button when it gets focus */
    :focus {
      outline: none;
    }

    ::-moz-focus-inner {
      border: 0;
    }

    #FilterDiv1Container {
      display: grid;
      grid-template-columns: 70% 30%; 
      margin-top: 6px;
    } 
    
    #FilterDiv1Container2 {
      display: inline-block;
    } 

    #MainViewDiv {
      background-color: lightslategrey;
      text-align: center;
      padding-top: 10px;
      margin-right: 29px;
    }

    #FilterDiv1,
    #FilterDiv2 {
      display: inline-block;
      color: #bbc6a5;
      font-size: 16px;
      padding-bottom: 4px;
      background-color: white;
      padding-right: 18px;
      margin-left: 10px;
      padding-top: 4px;
    }

    #CurrentFilterDiv {
      color: #bbc6a5;
    }

    #FilterDiv {
      display: inline-block;
      width: 120px;
    }

    #CurrentFilter {
      color: #1492AC;
      margin-left: 9px;
      margin-top: 5px;
      background-color: white;
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      font-size: 12px;
      padding-left: 3px;
      padding-top: 3px;
      width: 97%;
      height: 37px;
    }

    #AccountFilterInput {
      padding-left: 5px;
      width: 97%;
      height: 24px;
      font-size: 14px;
      margin-top: 6px;
      margin-left: 8px;
    }

    @media screen and (max-width: 1920px) { 
      #ContactFilterInput {
        padding-left: 5px;
        width: 714px;
        height: 24px;
        font-size: 14px;
        margin-top: 6px;
        margin-left: 8px;
      }
      #ContactGridDiv,
      #XMatchedGridDiv,
      #XMatchedLicensureGridDiv {
        height: 750px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    @media screen and (max-width: 1366px) { 
      #ContactFilterInput {
        padding-left: 5px;
        width:235px;
        height: 24px;
        font-size: 14px;
        margin-top: 6px;
        margin-left: 8px;
      }
      #ContactGridDiv,
      #XMatchedGridDiv,
      #XMatchedLicensureGridDiv {
        height: 450px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    @media screen and (max-width: 1280px) { 
      #ContactFilterInput {
        padding-left: 5px;
        width:235px;
        height: 24px;
        font-size: 14px;
        margin-top: 6px;
        margin-left: 8px;
      }
      #ContactGridDiv,
      #XMatchedGridDiv,
      #XMatchedLicensureGridDiv {
        height: 450px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    #UniverseInputDiv,#ViewInputDiv {
      padding-left: 10px;
      padding-top: 10px;
    }

    #ViewTypeLbl {
      margin-left: 10px;
    }

    #InsidePlanNotesInput, #OutsidePlanNotesInput, #SpecialPlanNotesInput, #TaskNotesInput, #ConsolidatedNotesInput {
      display: block;
      margin-left: 20px;
      margin-bottom: 10px;
      width: 854px;
      height: 63px;
    }

    #UniverseNameInput,#ViewNameInput {
      display: block;
      margin-bottom: 10px;
      width: 555px;
    }

    #UniverseDescInput,#ViewDescInput {
      display: block;
      margin-bottom: 10px;
      max-width: 555px;
      min-width: 555px;
    }

    #InitBtn {
      width: 198px;
    }

    #MonitorLbl {
      color: #f0e7a7;
      display: inherit;
      text-align: center;
      padding-top: 5px;
    }

    #UpdateCountLbl {
      color: #f0e7a7;
    }

    #ViewDiv,
    #UniverseDiv,
    #VoteBlockDiv {
      display: inline-block;
      background-color: white;
      padding: 6px;
      padding-top: 15px;
      margin-left: 5px;
    }

    #CheckBoxFilterDiv {
      display: inline-block;
      background-color: white;
      float: right;
      padding-right: 15px;
      padding-left: 8px;
      margin-right: 39px;
    }

    #MonitorDiv {
      display: inline-block;
      background-color: white;
      padding: 6px;
      padding-top: 18px;
      margin-left: 5px;
    }

    #VoteBlockDiv1 {
      margin-left: 3px;
      padding-top: 3px;
      display: inline-block;

    }

    #VoteBlockDiv2 {
      display: inline-block;
    }

    .TableDiv {
      display: inline-block;
      width: 285px;
      margin-bottom: 6px;
      color: blue;
      padding-left: 5px;
      padding-top: 3px;
      margin-right: 6px;
      margin-left: 0px;
      padding-right: 4px;
      padding-bottom: 3px;
      min-height: 110px;
      background-color: white;
    }

    .tbl {
      border-collapse: collapse;
      border-spacing: 0;
      border-color: #0c0c0c;
    }

    .tbl td {
      font-family: Arial, sans-serif;
      font-size: 14px;
      padding-top: 2px;
      padding-bottom: 2px;
      padding-left: 4px;
      padding-right: 4px;
      border-style: solid;
      border-width: 1px;
      overflow: hidden;
      word-break: normal;
      border-color: #ccc;
      color: #333;
      background-color: #fff;
    }

    .tbl th {
      font-family: Arial, sans-serif;
      font-size: 14px;
      font-weight: normal;
      padding-bottom: 2px;
      padding-left: 4px;
      border-style: solid;
      border-width: 1px;
      overflow: hidden;
      word-break: normal;
      border-color: #ccc;
      color: #333;
      background-color: #f0f0f0;
    }

    .hdr-cell0 {
      width: 210px;
      font-weight: bold
    }

    .hdr-cell1 {
      width: 66px;
      text-align: right;
      margin-right: 3px;
      font-weight: bold
    }

    .hdr-cell2 {
      width: 66px;
      text-align: right;
      margin-right: 3px;
      font-weight: bold
    }

    .tbl-cell0 {
      width: 210px;
    }

    .tbl-cell1 {
      width: 66px;
      text-align: right;
      margin-right: 3px;
    }

    #Please1,
    #Please2,
    #Please3 {
        font-family: Arial, Helvetica, sans-serif;
        top: 104px;
        left: 110px;
        width: 200px;
        pointer-events: none;
        background-color: white;
        color: blue;
        font-weight: bold;
        font-style: italic;
    }

    /* styles for certan header/cells, made in createCountTable() */
    td[data-key="hdr-owner-touch2"] {
      background-color: yellow;
    }

    td[data-key="owner-touch1-1"],
    td[data-key="owner-touch1-2"],
    td[data-key="owner-touch1-3"] {
      background-color: yellow;
    }

    /*
    * Tooltip Styles - https://chrisbracco.com/a-simple-css-tooltip/
    */

    /* Add this attribute to the element that needs a tooltip */
    [data-tooltip] {
      position: relative;
      z-index: 2;
      cursor: pointer;
    }

    /* Hide the tooltip content by default */
    [data-tooltip]:before,
    [data-tooltip]:after {
      visibility: hidden;
      opacity: 0;
      pointer-events: none;
    }

    /* Position tooltip above the element */
    [data-tooltip]:before {
      position: absolute;
      bottom: 150%;
      left: 50%;
      margin-bottom: 5px;
      margin-left: -80px;
      padding: 7px;
      width: 160px;
      -webkit-border-radius: 3px;
      border-radius: 3px;
      background-color: #000;
      background-color: hsla(0, 0%, 20%, 0.9);
      color: #fff;
      content: attr(data-tooltip);
      text-align: center;
      font-size: 14px;
      line-height: 1.2;
    }

    /* Triangle hack to make tooltip look like a speech bubble */
    [data-tooltip]:after {
      position: absolute;
      bottom: 150%;
      left: 50%;
      margin-left: -5px;
      width: 0;
      border-top: 5px solid #000;
      border-top: 5px solid hsla(0, 0%, 20%, 0.9);
      border-right: 5px solid transparent;
      border-left: 5px solid transparent;
      content: " ";
      font-size: 0;
      line-height: 0;
    }

    /* Show tooltip content on hover */
    [data-tooltip]:hover:before,
    [data-tooltip]:hover:after {
      visibility: visible;
      opacity: 1;
    }

    /* Add this attribute to the element that needs a tooltip */
    [data-tooltip2] {
      position: relative;
      z-index: 2;
      cursor: pointer;
    }

    /* Position tooltip above the element */
    [data-tooltip2]:before {
      position: absolute;
      bottom: 97%;
      left: 50%;
      margin-bottom: 5px;
      margin-left: -80px;
      padding: 7px;
      width: 160px;
      -webkit-border-radius: 3px;
      border-radius: 3px;
      background-color: hsla(0, 78.8%, 53.7%, 0.9);
      background-color: hsla(0, 78.8%, 53.7%, 0.9);
      color: #fff;
      content: attr(data-tooltip2);
      text-align: center;
      font-size: 14px;
      line-height: 1.2;
    }

    /* Triangle hack to make tooltip look like a speech bubble */
    [data-tooltip2]:after {
      position: absolute;
      bottom: 97%;
      left: 50%;
      margin-left: -5px;
      width: 0;
      border-top: 5px solid hsla(0, 78.8%, 53.7%, 0.9);
      border-top: 5px solid hsla(0, 78.8%, 53.7%, 0.9);
      border-right: 5px solid transparent;
      border-left: 5px solid transparent;
      content: " ";
      font-size: 0;
      line-height: 0;
    }

    #FilterResetBtn, #ViewResetBtn {
      display: inherit;
    }

    #AssignBtn {
      width: 70px;
    }

    #XmatchTypeLbl {
      text-align: center;
    }
    #MatchTable {
      margin-left: 26%;
      margin-top: 3px;
      margin-bottom: 27px;
    }

    .newfield {
      color:blue;
    }

    #TitleDiv {
      margin-top: 2px;
      display: grid;
      grid-template-columns:30% 40% 30%; 
    }

    #TitleHdr {
      font-size: 25px;
    }

    #TitleBtn {
      border-radius: 21px;
      border-style: none;
      color: blue;
      font-size: 25px;
      width:567px;
    }

    #TitleBtn:hover {
      color: white;
      background-color: blue;      
      cursor: pointer;
    }

    #TaskSubject {
      width: 300px;
      margin-left: 20px;
      margin-bottom: 5px;
    }

    #TaskActivityDate {
      margin-left: 20px;
    }
  
    .NavSection {
      display: inline-block;
      padding: 2px;
    }

    #SelectAccountLbl {
      margin-left: 10px;
      padding-right: 4px;
      font-size: 18px;
    }

    #XmatchButtonsDiv {
      padding-top: 10px;
    }

    #XMatchedDiv1,#XMatchedDiv2 {
      padding: 5px;
    }

    #XBatchMessage {
      color: blue;
      margin-left: 115px;
    }

    .RadioDisabled {
      text-decoration-line: line-through;
      text-decoration-color: red;
    }

    #ResetXmatchContactBtn {
      color:blue;
      margin-left: 228px;
    }

  </style>
</head>

<body>

  <div id="Content">
    <div id="TitleDiv">
      <div id="Version">v1.73</div>
      <input id="TitleBtn" type="Button" value="Command Center - Data Entry">
      </input>
      <label id="ScreenSize"></label>      
    </div>

    <div class="tabs">
      <div id="NavigationDiv">
        <nav class="tabs__navigation">
          <div class="NavSection">
            <a id="Tab1Id" class="tabs__link tabs__link--active" href="#tab1">Employers</a>
            <a id="Tab2Id" class="tabs__link" href="#tab2">Contacts</a>
            <a id="Tab3Id" class="tabs__link" href="#tab3">Counts</a>
            <a id="Tab4Id" class="tabs__link NoDisplay" href="#tab4">X-Matches (Contacts)</a>
            <a id="Tab5Id" class="tabs__link NoDisplay" href="#tab5">X-Matches (Licensure)</a>
          </div>
          <div class="NavSection">
            <label id="MonitorLbl"></label>
          </div>
          <div class="NavSection">

            <div id="CheckBoxFilterDiv" class="hide">
              <div id="CheckBoxFilterDiv1">
                <input id="HideStVcCheckBox" class="chks" type="checkbox" value="Hide1"></input>
                <label id="HideStVcCheckBoxLbl" for="HideStVcCheckBox" class="chksLbl">Hide ST + VC</label>
                <input id="HideStVcObCheckBox" class="chks" type="checkbox" value="Hide2"></input>
                <label id="HideStVcObCheckBoxLbl" for="HideStVcObCheckBox" class="chksLbl">Hide ST + VC + OB</label>
                <input id="XmatchBtn"   class="hide" type="Button" value="X-match"></input>
                <input id="XmatchedBtn" class="hide" type="Button" value="Results"></input>
              </div>
            </div>
          </div>    
        </nav>
      </div>

      <label id="SelectAccountLbl">Selected Account</label><label id="UpdateCountLbl"></label>

      <div id="tab1" class="tabs__section">
        <div id="FilterDiv1Container">
          <div id="FilterDiv1">
            <input id="AccountFilterInput" placeholder="Search..." type="text" />
          </div>
          <div id="MainViewDiv" class="show">
            <label for="MainView">Main View:</label>
            <input type="radio" id="MainViewRadio1" name="MainView" value="D" checked="true">Data Entry</input>
            <input type="radio" id="MainViewRadio2" name="MainView" value="G">GOTV</input>
          </div>
        </div>

        <div id="AccountGridDiv" class="ag-fresh"></div>
      </div>

      <div id="tab2" class="tabs__section">
        <div id="Tab2Content">
          <div id="Tab2ControlsDiv">
            <div id="FilterDiv1Container2">
              <div id="FilterDiv2">
                <input id="ContactFilterInput" placeholder="Search..." type="text" />
              </div>
            </div>

            <div id="UniverseDiv">
              <a id="FilterResetBtn" class="not-allowed" href="#" data-tooltip="Reset filters">
                <div id="filters-div"><i id="filters-icon" class="icon-unlock"></i></div>
              </a>
              <select id="UniverseSelectList"></select>
              <a id="UniverseBtn" class="allowed" href="#" data-tooltip="Universe options">
                <span class="options-span">
                  <i class="icon-cog"></i>
                </span>
              </a>
            </div>

            <div id="VoteBlockDiv" class="hide">
              <div id="VoteBlockDiv1">
                <input id="InitBtn" type="Button" value="Initialize"></input>
              </div>
              <div id="VoteBlockDiv2">
                <select id="VoteBlockSelectList"></select>
                <input id="AssignBtn" type="Button" value="Assign" disabled="true"></input>
              </div>
            </div>

            <div id="ViewDiv">
              <a id="ViewResetBtn" class="not-allowed" href="#" data-tooltip="Reset view">
                <div id="views-div"><i id="views-icon" class="icon-unlock"></i></div>
              </a>
              <select id="ViewSelectList"></select>
              <a id="ViewsBtn" class="allowed" href="#" data-tooltip="View options">
                <span class="options-span">
                  <i class="icon-cog"></i>
                </span>
              </a>
            </div>

            <div id="MonitorDiv">
              <input id="MonitorBtn" type="Button" value="Start Monitoring"></input>
            </div>
          
          </div>

          <div id="ContactGridDiv" class="BaseGrid ag-fresh"></div>
          <div id="CurrentFilterDiv">
            <textarea id="CurrentFilter" placeholder="Current filter" cols="175" rows="3" readonly="true"></textarea>
          </div>
        </div>

        <div id="Please1" class="hide">
          Please Select an Employer 1
        </div>

      </div>

      <div id="tab3" class="tabs__section">
        <div id="Tab3Content">
          <div id="CountsDiv1">
            <span id="TotalsTitle" class="CountsTitle">Counts by Type</span>
            <div id="TypeTotalsContainerDiv"></div>
          </div>
          <div id="CountsDiv1a">
            <span id="TotalsTitle" class="CountsTitle">Counts by Touch</span>
            <div id="SumTotalsContainerDiv"></div>
          </div>
          <div id="CountsDiv2">
            <span id="VoteBlockCountTitle" class="CountsTitle">Vote Block Counts</span>
            <div id="VoteBlockContainerDiv"></div>
          </div>
          <div id="CountsDiv3">
            <span id="OwnerVoteBlockCountTitle" class="CountsTitle">Vote Block Counts by Owner</span>
            <div id="OwnerVoteBlockContainerDiv"></div>
            <span id="OwnerThreeTouchCountTitle" class="CountsTitle">3 Touch Counts by Owner</span>
            <div id="OwnerThreeTouchContainerDiv1"></div>
            <div id="OwnerThreeTouchContainerDiv2"></div>
          </div>
          <div id="FilterDescDiv"></div>
        </div>

        <div id="Please2" class="hide">
          Please Select an Employer 2
        </div>
      </div>

      <div id="tab4" class="tabs__section">
        <div id="Tab4Content">
          <div id="XMatchedDiv1">
            <div id="XMatchedGridDiv" class="BaseGrid ag-fresh"></div>
            <input id="SaveAsCsvButton1" type="Button" value="Save As .csv"></input>
          </div>
        </div>

        <div id="Please3" class="hide">
          Please Select an Employer 3
        </div>
      </div>

      <div id="tab5" class="tabs__section">
        <div id="Tab5Content">
          <div id="XMatchedDiv2">
            <div id="XMatchedLicensureGridDiv" class="BaseGrid ag-fresh"></div>
          </div>
        </div>
  
        <div id="Please4" class="hide">
          Please Select an Employer 4
        </div>
      </div>

    </div>

    <div id="EditInsidePlanNotesDiv" class="EditNotes hide">
      <div class="EditNotesH2">
        <h2>Edit Inside Plan Notes</h2>
      </div>
      <div id="InsidePlanNotesInputDiv">
        <textarea id="InsidePlanNotesInput" placeholder="Notes..."></textarea>
        <input id="SaveInsidePlanNotesBtn" type="Button"  class="Btn" value="Save"></input>
        <input id="CloseInsidePlanNotesBtn" type="Button" class="Btn" value="Close"></input>
      </div>
    </div>

    <div id="EditOutsidePlanNotesDiv" class="EditNotes hide">
      <div class="EditNotesH2">
        <h2>Edit Outside Plan Notes</h2>
      </div>
      <div id="OutsidePlanNotesInputDiv">
        <textarea id="OutsidePlanNotesInput" placeholder="Notes..."></textarea>
        <input id="SaveOutsidePlanNotesBtn" type="Button"  class="Btn" value="Save"></input>
        <input id="CloseOutsidePlanNotesBtn" type="Button" class="Btn" value="Close"></input>
      </div>
    </div>

    <div id="EditSpecialPlanNotesDiv" class="EditNotes hide">
      <div class="EditNotesH2">
        <h2>Edit Special Plan Notes</h2>
      </div>
      <div id="SpecialPlanNotesInputDiv">
        <textarea id="SpecialPlanNotesInput" placeholder="Notes..."></textarea>
        <input id="SaveSpecialPlanNotesBtn" type="Button"  class="Btn" value="Save"></input>
        <input id="CloseSpecialPlanNotesBtn" type="Button" class="Btn" value="Close"></input>
      </div>
    </div>

    <div id="EditTaskActivityNotesDiv" class="EditNotes hide">
      <div class="EditNotesH2">
        <h2>Edit Task Activity Notes</h2>
      </div>
      <div id="TaskNotesInputDiv">
        <input id="TaskSubject" type="text" placeholder="Subject"></input>
        <textarea id="TaskNotesInput"             placeholder="Task Activity Notes..."></textarea>
        <input id="TaskActivityDate"          type="text" placeholder="Activity Date"></input>
        <input id="TaskOwnerName"             type="text" placeholder="Owner"></input>
        <input id="TaskLastModifiedDate"      type="text" placeholder="Last Modified"></input>
        <input id="TaskLastModifiedByName"    type="text" placeholder="Last Modified By"></input>
        <input id="SaveTaskActivityNotesBtn"  type="Button"  class="Btn" value="Save"></input>
        <input id="CloseTaskActivityNotesBtn" type="Button"  class="Btn" value="Close"></input>
      </div>
    </div>

    <div id="EditConsolidatedNotesDiv" class="EditNotes hide">
      <div class="EditNotesH2">
        <h2>View Consolidated Notes</h2>
      </div>
      <div id="ConsolidatedNotesInputDiv">
       <textarea id="ConsolidatedNotesInput" placeholder="Consolidated Notes..."></textarea>
<!--   <input id="SaveConsNotesBtn"  type="Button"  class="Btn" value="Save"></input> THIS IS NOW READONLY.  Changed 5/16/18 -->
       <input id="CloseConsNotesBtn" type="Button" class="Btn" value="Close"></input>
      </div>
    </div>

  <div id="CreateUniverseDiv" class="hide"> 
    <div>
      <div class="CreateUniverseH2">
        <h2>Universe Management</h2>
      </div>
    </div>
    <div id="UniverseInputDiv">
      <input id="UniverseNameInput" placeholder="Name..." type="text"  />
      <textarea id="UniverseDescInput" placeholder="Description..." cols="175" rows="3"></textarea>
    </div>
    <div id="UniverseButtonsDiv">
      <input id="SaveUniverseBtn"   type="Button" class="Btn" value="Save"></input>
      <input id="CloseUniverseBtn"  type="Button" class="Btn" value="Close"></input>
      <input id="DeleteUniverseBtn" type="Button" class="hide" value="Delete"></input>
    </div>
  </div>

  <div id="CreateViewDiv" class="hide"> 
    <div>
      <div class="CreateViewH2">
        <h2>View Management</h2>
      </div>
    </div>
    <div id="ViewInputDiv">
      <input id="ViewNameInput" placeholder="Name..." type="text"  />
      <textarea id="ViewDescInput" placeholder="Description..." cols="175" rows="3"></textarea>
    </div>
    <div id="ViewsButtonsDiv">
      <input id="SaveViewBtn"   type="Button" class="Btn" value="Save"></input>
      <input id="CloseViewBtn"  type="Button" class="Btn" value="Close"></input>
      <input id="DeleteViewBtn" type="Button" class="hide" value="Delete"></input>
      <label id="ViewTypeLbl">Type</label>
      <input type="radio" name="ViewType" value="P" checked="true">Personal</input>
      <input type="radio" name="ViewType" value="G">Global</input>
    </div>
  </div>

  <div id="CreateXmatchDiv" class="hide"> 
    <div>
      <div class="CreateXmatchH2">
        <h2>X-Match Members</h2>
      </div>
    </div>
    <div id="XmatchInputDiv">
      <label id="XmatchTypeLbl">Match against</label>
      <div id="RadioFilterDiv" class="hide">
        <label for="XmatchTarget">Match Target:</label>
        <label id="XmatchRadio1Label" for="XmatchRadio1">Contact</label>
        <input type="radio" id="XmatchRadio1" name="XmatchTarget" value="Contact" checked="true"></input>
        <label id="XmatchRadio2Label" for="XmatchRadio2">Licensure</label>
        <input type="radio" id="XmatchRadio2" name="XmatchTarget" value="Licensure__c"></input>
      </div>
    </div>

    <label id="XBatchMessage"></label>      

    <div id="XmatchButtonsDiv" class="hide">
      <input id="ResetXmatchContactBtn"   type="Button" class="hide" value="Reset Contact Match"></input>
      <input id="ResetXmatchLicensureBtn" type="Button" class="hide" value="Reset Licensure Match"></input>
      <input id="MatchBtn"        type="Button" class="Btn" value="Match"></input>
      <input id="CloseXmatchBtn"  type="Button" class="Btn" value="Close"></input>
    </div>
  </div>

  <div id="ModalLoadingDiv" class="modalDialog hide">
    <div>
      <h2>Loading data...</h2>
    </div>
  </div>

</div>

  <script type="text/javascript">
    'use strict';

    function accountFilterInputHandler(e) {
      let searchText = e.target.value;
      accountGridOptions.api.setQuickFilter(searchText);
    }

    function getCurrentFilters() {
      let rowNodeData;
      currentCardAssessmentMap = {};
      currentVerbalAssessmentMap = {};
      currentGotvAssessmentsMap = {};
      currentVoteYesMap   = {};
      currentVoteBlockMap = {};
      contactGridOptions.api.forEachNodeAfterFilterAndSort(function (rowNode, index) {
        rowNodeData = rowNode.data;
        if (!currentCardAssessmentMap[rowNodeData.CardAssessment]) {
          currentCardAssessmentMap[rowNodeData.CardAssessment] = rowNodeData.CardAssessment;
        }

        if (!currentVerbalAssessmentMap[rowNodeData.VerbalAssessment]) {
          currentVerbalAssessmentMap[rowNodeData.VerbalAssessment] = rowNodeData.VerbalAssessment;
        }

        if (!currentGotvAssessmentsMap[rowNodeData.GotvAssessment]) {
          currentGotvAssessmentsMap[rowNodeData.GotvAssessment] = rowNodeData.GotvAssessment;
        }

        if (!currentVoteYesMap[rowNodeData.GotvVoteYesPetition]) {
          currentVoteYesMap[rowNodeData.GotvVoteYesPetition] = rowNodeData.GotvVoteYesPetition;
        }

        if (!currentVoteBlockMap[rowNodeData.GotvVoteBlockTime]) {
          currentVoteBlockMap[rowNodeData.GotvVoteBlockTime] = rowNodeData.GotvVoteBlockTime;
        }

      });
    }

    function recount(pSrc) {
//      console.log('recount source: ', pSrc)
      threeTouchCountMap1 = {};
      threeTouchCountMap2 = {};
      voteBlockCountMap = {};
      ownerVoteBlockCountMap = {};
      ownerThreeTouchCountMap1 = {};
      ownerThreeTouchCountMap2 = {};
      slCount = contactCount = 0;
//      itemsToUpdate = [];
      contactGridOptions.api.forEachNodeAfterFilterAndSort(recountAfterFilter);
//      contactGridOptions.api.updateRowData({ update: itemsToUpdate });
      summarize();
    }

    function contactFilterInputHandler(e) {
      let searchText = e.target.value;
      contactGridOptions.api.setQuickFilter(searchText);
      recount('contactFilterInputHandler');
    }

    function summarize() {
      let tempObj, ownerKey, mapKey, cnt, i;
      let voteBlockHeaderArray, headerName, headerField, ownerVoteBlockMap, ownerTouchCountMap1, ownerTouchCountMap2;

      typeTotalsContainerDiv.innerHTML = '';
      if (threeTouchCountMap1) {
        tempObj = createTotalObj('Type', threeTouchCountMap1, 'type');
        tempObj.Total = contactCount;
        createCountTable(tempObj, typeTotalsContainerDiv);
      }

      sumTotalsContainerDiv.innerHTML = '';
      if (threeTouchCountMap2) {
        tempObj = createTotalObj('Count', threeTouchCountMap2, 'touch', true);
        createCountTable(tempObj, sumTotalsContainerDiv);
      }

      voteBlockContainerDiv.innerHTML = '';
      if (voteBlockCountMap) {
        tempObj = createTotalObj('Vote Block', voteBlockCountMap, 'vote-block');
        createCountTable(tempObj, voteBlockContainerDiv);
      }

      ownerVoteBlockContainerDiv.innerHTML = '';
      if (ownerVoteBlockCountMap) {
        for (ownerKey in ownerVoteBlockCountMap) {
          ownerVoteBlockMap = ownerVoteBlockCountMap[ownerKey];
          tempObj = createTotalObj(ownerKey, ownerVoteBlockMap, 'owner-vote-block');
          createCountTable(tempObj, ownerVoteBlockContainerDiv);
        }
      }

      ownerThreeTouchContainerDiv1.innerHTML = '';
      if (ownerThreeTouchCountMap1) {
        for (ownerKey in ownerThreeTouchCountMap1) {
          ownerTouchCountMap1 = ownerThreeTouchCountMap1[ownerKey];
          tempObj = createTotalObj(ownerKey, ownerTouchCountMap1, 'owner-touch1');
          createCountTable(tempObj, ownerThreeTouchContainerDiv1);
        }
      }

      ownerThreeTouchContainerDiv2.innerHTML = '';
      if (ownerThreeTouchCountMap2) {
        for (ownerKey in ownerThreeTouchCountMap2) {
          ownerTouchCountMap2 = ownerThreeTouchCountMap2[ownerKey];
          tempObj = createTotalObj(ownerKey, ownerTouchCountMap2, 'owner-touch2');
          tempObj.Total = getOwner123Count(ownerKey);
          createCountTable(tempObj, ownerThreeTouchContainerDiv2);
        }
      }
    }

    function getOwner123Count(owner) {
      let mapKey, total = 0;
      for (mapKey in ownerThreeTouchCountMap1[owner]) {
        if (mapKey != '0') {
          total += ownerThreeTouchCountMap1[owner][mapKey].Count;
        }
      }
      return total;
    }

    function createCountTable(obj, div) {
      const tblDiv = document.createElement('div');
      const tbl = document.createElement('table');
      const header = tbl.createTHead();
      const hdrRow = header.insertRow(0);
      const hdrCell0 = hdrRow.insertCell(0);
      const hdrCell1 = hdrRow.insertCell(1);
      const hdrCell2 = hdrRow.insertCell(2);
      tblDiv.className = 'TableDiv';
      hdrCell0.innerHTML = obj.Key;
      hdrCell1.innerHTML = obj.Total;
      hdrCell2.innerHTML = '%';
      hdrCell0.className = 'hdr-cell0';
      hdrCell1.className = 'hdr-cell1';
      hdrCell2.className = 'hdr-cell2';
      hdrCell1.dataset.key = `hdr-${obj.MapName}` 
      for (const countObj of obj.Counts) {
        const tblRow = tbl.insertRow();
        const tblCell0 = tblRow.insertCell(0);
        const tblCell1 = tblRow.insertCell(1);
        const tblCell2 = tblRow.insertCell(2);
        tblCell0.innerHTML = countObj.Key;
        tblCell1.innerHTML = countObj.Count;
        if (countObj.Count > 0 && obj.Total) {
          tblCell2.innerHTML = Math.round(((countObj.Count / obj.Total) * 100), 0);
        } else {
          tblCell2.innerHTML = 0;
        }
        tblCell0.className = 'tbl-cell0';
        tblCell1.className = 'tbl-cell1';
        tblCell2.className = 'tbl-cell1';
        tblCell1.dataset.key = `${obj.MapName}-${countObj.Key}`; // used to provide css match for cell coloring (optional)
      }
      if(obj.SubTotal > 0) {
        const tblRow = tbl.insertRow();
        const tblCell0 = tblRow.insertCell(0);
        const tblCell1 = tblRow.insertCell(1);
        const tblCell2 = tblRow.insertCell(2);
        tblCell0.innerHTML = '1-2-3 Subtotal';
        tblCell1.innerHTML = obj.SubTotal;
        if (obj.Total > 0) {
          tblCell2.innerHTML = Math.round(((obj.SubTotal / obj.Total) * 100), 0);
        } else {
          tblCell2.innerHTML = 0;
        }        
        tblCell0.className = 'tbl-cell0';
        tblCell1.className = 'tbl-cell1';
        tblCell2.className = 'tbl-cell1';
        tblCell1.dataset.key = `${obj.MapName}-SubTotal`; // used to provide css match for cell coloring (optional)
      }
      tbl.className = 'tbl';
      tblDiv.appendChild(tbl);
      div.appendChild(tblDiv);
    }

    function createTotalObj(key, map, mapName, subTotalFlag) {
      let mapKey, cnt, total = 0, subTotal = 0, max = 0;
      let record = { Key: key, MapName: mapName, Total: total, SubTotal:subTotal, Max: max, Counts: [] };
      for (mapKey in map) {
        cnt = map[mapKey].Count;
        total += cnt;
        if(subTotalFlag && mapKey != '0') { // Special case for Touch counts
          subTotal += cnt;
        }
        record.Counts.push({ Key: mapKey, Count: cnt });
      }
      record.Total    = total;
      record.SubTotal = subTotal
      record.Counts.sort(function (a, b) {
        const keyA = a.Key
        const keyB = b.Key
        if (keyA < keyB) {
          return -1;
        }
        if (keyA > keyB) {
          return 1;
        }
        return 0;
      });
      return record;
    }

    function recountAfterFilter(params) {
      let ownerName = params.data.OwnerName;
      let threeTouchST = params.data.ThreeTouchST;
      let threeTouchVC = params.data.ThreeTouchVC;
      let threeTouchOB = params.data.ThreeTouchOB;
      let gotvSlip = params.data.GotvSlip;
      let voteBlock = params.data.VoteBlock;
      let thisOwner3TCount = 0;
      let thisRec3TCount = 0;
      let rowNodeData = params.data;
      contactCount++;
      rowNodeData.R = contactCount;

      if (!threeTouchCountMap1['a. ST'])
        threeTouchCountMap1['a. ST'] = { Count: 0 };

      if (!threeTouchCountMap1['b. VC'])
        threeTouchCountMap1['b. VC'] = { Count: 0 };

      if (!threeTouchCountMap1['c. OB'])
        threeTouchCountMap1['c. OB'] = { Count: 0 };

      if (!threeTouchCountMap2['0'])
        threeTouchCountMap2['0'] = { Count: 0 };

      if (!threeTouchCountMap2['1'])
        threeTouchCountMap2['1'] = { Count: 0 };

      if (!threeTouchCountMap2['2'])
        threeTouchCountMap2['2'] = { Count: 0 };

      if (!threeTouchCountMap2['3'])
        threeTouchCountMap2['3'] = { Count: 0 };

      if (threeTouchST) {
        threeTouchCountMap1['a. ST'].Count++;
        thisRec3TCount++;
      }
      if (threeTouchVC) {
        threeTouchCountMap1['b. VC'].Count++;
        thisRec3TCount++;
      }
      if (threeTouchOB) {
        threeTouchCountMap1['c. OB'].Count++;
        thisRec3TCount++;
      }

      if (ownerName) {
        if (!ownerThreeTouchCountMap1[ownerName]) {
          ownerThreeTouchCountMap1[ownerName] = {};
          ownerThreeTouchCountMap1[ownerName]['0'] = { Count: 0 };
          ownerThreeTouchCountMap1[ownerName]['1'] = { Count: 0 };
          ownerThreeTouchCountMap1[ownerName]['2'] = { Count: 0 };
          ownerThreeTouchCountMap1[ownerName]['3'] = { Count: 0 };
        }
        if (!ownerThreeTouchCountMap2[ownerName]) {
          ownerThreeTouchCountMap2[ownerName] = {};
          ownerThreeTouchCountMap2[ownerName]['a. ST'] = { Count: 0 };
          ownerThreeTouchCountMap2[ownerName]['b. VC'] = { Count: 0 };
          ownerThreeTouchCountMap2[ownerName]['c. OB'] = { Count: 0 };
        }

        if (threeTouchST) {
          ownerThreeTouchCountMap2[ownerName]['a. ST'].Count++;
          thisOwner3TCount++;
        }
        if (threeTouchVC) {
          ownerThreeTouchCountMap2[ownerName]['b. VC'].Count++;
          thisOwner3TCount++;
        }
        if (threeTouchOB) {
          ownerThreeTouchCountMap2[ownerName]['c. OB'].Count++;
          thisOwner3TCount++;
        }
        ownerThreeTouchCountMap1[ownerName][thisOwner3TCount].Count++;
        threeTouchCountMap2[thisRec3TCount].Count++;
      }

      if (gotvSlip) slCount++;

      if (!voteBlockCountMap[voteBlock])
        voteBlockCountMap[voteBlock] = { Count: 1 };
      else
        voteBlockCountMap[voteBlock].Count++;

      if (!ownerVoteBlockCountMap[ownerName])
        ownerVoteBlockCountMap[ownerName] = {};
      if (!ownerVoteBlockCountMap[ownerName][voteBlock])
        ownerVoteBlockCountMap[ownerName][voteBlock] = { Count: 1 }
      else
        ownerVoteBlockCountMap[ownerName][voteBlock].Count++;
    }

    function pollForChanges() {
      let now = moment();
      let date1MinsAgo = moment(now).subtract(1, 'minutes');
      let utcD = date1MinsAgo.get('date');
      let utcM = date1MinsAgo.get('month') + 1;
      let utcY = date1MinsAgo.get('year');
      let utcH = date1MinsAgo.get('hour');
      let utcZ = date1MinsAgo.get('minute');
      let utcS = date1MinsAgo.get('second');
      let dtArray = [utcD, utcM, utcY, utcH, utcZ, utcS];
      getRecentContactsForAccount(selectedAccountId, dtArray);
    }

    function tab1ClickHandler() {
      let filters;
      if (intervalId) clearInterval(intervalId);
      selectedTab = 1;
      monitoring  = false;
      monitorButton.value = 'Start monitoring';
      monitorLabel.textContent     = '';
      updateCountLabel.textContent = '';
      currentFilter.textContent    = '';
      filterLabel.textContent      = '';
      universeNameInput.value      = '';
      universeDescInput.value      = '';
      viewNameInput.value          = '';
      viewDescInput.value          = '';
      insidePlanNotesInput.value   = '';
      outsidePlanNotesInput.value  = '';
      specialPlanNotesInput.value  = '';
      consolidatedNotesInput.value = '';
      checkBoxFilterDiv.className  = 'hide';
      radioFilterDiv.className     = 'hide';
      xMatchButton.classList       = 'hide';
      xMatchedButton.classList     = 'hide'; // ***********  To do: only show if Account has results
      
      if (contactGridOptions) {
        filters = contactGridOptions.api.getFilterModel();
        if (filters) {
          contactGridOptions.api.setFilterModel(null);
        }
      }
    }

    function tab2ClickHandler() {
      selectedTab = 2;
      if (contactGridOptions) {
        checkBoxFilterDiv.className  = 'show';
        if(userLevel == 'Admin') {
//          radioFilterDiv.className = 'show';
          initButton.className     = 'show';
          voteBlockDiv.className   = 'show';
        }
      }
    }

    function tab3ClickHandler() {
      selectedTab = 3;
      checkBoxFilterDiv.className  = 'hide';
      initButton.className    = 'hide';
      voteBlockDiv.className  = 'hide';
    }

    function tab4ClickHandler() {
      selectedTab = 4;
      initButton.className         = 'hide';
      voteBlockDiv.className       = 'hide';
    }

    function tab5ClickHandler() {
      selectedTab = 5;
      initButton.className         = 'hide';
      voteBlockDiv.className       = 'hide';
    }

    function titleButtonClickHandler(){
      if(selectedTab == 2) {
        if(navigationDiv.className == 'NoDisplay') {
          navigationDiv.className   = 'YesDisplay';
          tab2ControlsDiv.className = 'YesDisplay';
          if(userLevel == 'Admin') {
            checkBoxFilterDiv.className = 'YesDisplay';
          }          
        }
        else {
          navigationDiv.className   = 'NoDisplay';
          tab2ControlsDiv.className = 'NoDisplay';
          if(userLevel == 'Admin') {
            checkBoxFilterDiv.className = 'NoDisplay';
          }          
        }
      }
    }

    function updateUniverse(pUid, pName, pDesc, pSoql, pFilters) {
      return new Promise(function (resolve, reject) {
        GotvCcController.updateUniverse(pUid, pName, pDesc, pSoql, pFilters, (result, event) => {
          if (event.status) {
            notify.log('Salesforce updated');
            resolve(result);
          }
          else {
            let eType = event.type;
            let eMsg = event.message;
            let eWhere = event.where;
            alert('Salesforce update error: ' + eMsg);
            console.log(eType);
            console.log(eMsg);
            if (eWhere != undefined) console.log(eWhere);
            reject(event);
          }
        })
      });
    }

    function saveUniverse(pAccountId, pName, pDesc, pSoql, pFilters) {
      return new Promise(function (resolve, reject) {
        GotvCcController.saveUniverse(pAccountId, selectedMainView, pName, pDesc, pSoql, pFilters, (result, event) => {
          if (event.status) {
            notify.log('Salesforce updated');
            resolve(result);
          }
          else {
            let eType = event.type;
            let eMsg = event.message;
            let eWhere = event.where;
            alert('Salesforce update error: ' + eMsg);
            console.log(eType);
            console.log(eMsg);
            if (eWhere != undefined) console.log(eWhere);
            reject(event);
          }
        })
      });
    }

    function deleteUniverse(pId) {
      return new Promise(function (resolve, reject) {
        GotvCcController.deleteUniverse(pId, (result, event) => {
          if (event.status) {
            notify.log('Salesforce updated');
            resolve(result);
          }
          else {
            let eType = event.type;
            let eMsg = event.message;
            let eWhere = event.where;
            alert('Salesforce update error: ' + eMsg);
            console.log(eType);
            console.log(eMsg);
            if (eWhere != undefined) console.log(eWhere);
            reject(event);
          }
        })
      });
    }

    function deleteUniverseButtonHandler() {
        deleteUniverse(selectedUniverseId).then(function (savedId) {
          delete universeMap[selectedAccountId][selectedUniverseId];
          selectedUniverseObject = selectedUniverseFilters = selectedUniverseName = selectedUniverseId = '';
          populateUniverseDropdown();
          deleteUniverseButton.classList = 'hide';
        }).catch(error => {
        console.log('Error' + error);
      });
    }

    function saveUniverseButtonHandler() {
      let name = universeNameInput.value;
      let desc = universeDescInput.value;
      let filters = contactGridOptions.api.getFilterModel();
      let jFilters = JSON.stringify(filters);
      let universeObject;

      if(name == '') {
        universeInputDiv.setAttribute('data-tooltip2',"Required");
        universeNameInput.click();
        return;
      } else {
        universeInputDiv.removeAttribute('data-tooltip2');
      }

      if (selectedUniverseId) {
        console.log('Updating Universe....', jFilters);
        updateUniverse(selectedUniverseId, name, desc.substr(0, 254), filterSoql, jFilters).then(function (selectedUniverseId) {
          selectedUniverseName = name;
          selectedUniverseObject = { UniverseId: selectedUniverseId, UniverseAccountId: selectedAccountId, UniverseType: selectedMainView, UniverseName: selectedUniverseName, UniverseFilters: filters, UniverseSoql: filterSoql, UniverseDesc: desc.substr(0, 254) };
          universeMap[selectedAccountId][selectedUniverseId] = selectedUniverseObject;
          populateUniverseDropdown(true);
          deleteUniverseButton.classList = 'Btn';
          
        }).catch(error => {
          console.log('Error' + error);
        });
      }
      else {
        console.log('Saving Universe....', jFilters);
        saveUniverse(selectedAccountId, name, desc.substr(0, 254), filterSoql, jFilters).then(function (savedId) {
          selectedUniverseName = name;
          selectedUniverseId = savedId;
          
          selectedUniverseObject = { UniverseId: savedId, UniverseAccountId: selectedAccountId, UniverseType:selectedMainView, UniverseName: selectedUniverseName, UniverseFilters: filters, UniverseSoql: filterSoql, UniverseDesc: desc.substr(0, 254) };
          if (!universeMap[selectedAccountId])
            universeMap[selectedAccountId] = {};
          universeMap[selectedAccountId][selectedUniverseId] = selectedUniverseObject;
          universeArray.push(selectedUniverseObject);
          populateUniverseDropdown(true);
          deleteUniverseButton.classList = 'Btn';
        }).catch(error => {
          console.log('Error' + error);
        });
      }
    }

    function closeUniverseButtonHandler() {
      universeInputDiv.removeAttribute('data-tooltip2');
      showCreateUniverseForm(false);
    }

    function createUniverseButtonHandler() {
      if(filterCnt > 0) {
        showCreateViewForm(false);
        showCreateUniverseForm(true);
      }
    }

    function updateView(pVid, pName, pDesc, pType, pColumnModel, pSortModel) {
      return new Promise(function (resolve, reject) {
        GotvCcController.updateView(pVid, pName, pDesc, pType, pColumnModel, pSortModel, (result, event) => {
          if (event.status) {
            notify.log('Salesforce updated');
            resolve(result);
          }
          else {
            let eType = event.type;
            let eMsg = event.message;
            let eWhere = event.where;
            alert('Salesforce update error: ' + eMsg);
            console.log(eType);
            console.log(eMsg);
            if (eWhere != undefined) console.log(eWhere);
            reject(event);
          }
        })
      });
    }

    function saveView(pName, pDesc, pType, pColumns,pSort) {
      return new Promise(function (resolve, reject) {
                      // saveView(String name, String description,  String viewClass, String type, String columnModel, String sortModel, String userId)
        GotvCcController.saveView(pName, pDesc, selectedMainView, pType, pColumns, pSort, (result, event) => {
          if (event.status) {
            notify.log('Salesforce updated');
            console.log('Salesforce updated', result);
            resolve(result);
          }
          else {
            let eType = event.type;
            let eMsg = event.message;
            let eWhere = event.where;
            alert('Salesforce update error: ' + eMsg);
            console.log(eType);
            console.log(eMsg);
            if (eWhere != undefined) console.log(eWhere);
            reject(event);
          }
        })
      });
    }

    function deleteView(pId) {
      return new Promise(function (resolve, reject) {
        GotvCcController.deleteView(pId, (result, event) => {
          if (event.status) {
            notify.log('Salesforce updated');
            resolve(result);
          }
          else {
            let eType = event.type;
            let eMsg = event.message;
            let eWhere = event.where;
            alert('Salesforce update error: ' + eMsg);
            console.log(eType);
            console.log(eMsg);
            if (eWhere != undefined) console.log(eWhere);
            reject(event);
          }
        })
      });
    }

    function deleteViewButtonHandler() {
        deleteView(selectedViewId).then(function () {
          delete viewsMap[selectedViewId];
          selectedViewObject = selectedViewName = selectedViewId = '';
          populateViewsDropdown();
          deleteViewButton.classList = 'hide';
        }).catch(error => {
        console.log('Error' + error);
      });
    }
    
    function createViewButtonHandler() {
      showCreateUniverseForm(false);
      showCreateViewForm(true);
    }
    
    function showCreateViewForm(show) {
      if (show) {
        createViewDiv.setAttribute('class', 'CreateView');
        viewNameInput.focus();
      }
      else
        createViewDiv.setAttribute('class', 'hide');
    }

    function restoreState() {
      gridOptions.columnApi.setColumnState(window.colState);
      gridOptions.api.setSortModel(window.sortState);
//      console.log('column state restored');
    }

    function saveViewButtonHandler() {
      let vName = viewNameInput.value;
      if(vName == '') {
        viewInputDiv.setAttribute('data-tooltip2',"Required");
        viewNameInput.click();
        return;
      } else {
        viewInputDiv.removeAttribute('data-tooltip2');
      }
      let vDesc      = viewDescInput.value;
      let vColState  = contactGridOptions.columnApi.getColumnState();
      let vSortModel = contactGridOptions.api.getSortModel();
      let jColState  = JSON.stringify(vColState);
      let jSortModel = JSON.stringify(vSortModel);
      let viewType   = getRadioValue('ViewType');

      if (selectedViewId) {
        updateView(selectedViewId, vName, vDesc.substr(0, 254), viewType, jColState, jSortModel).then(function (savedId) {
          selectedViewName   = vName;
          selectedViewObject = {ViewId:savedId, ViewType:viewType,ViewClass:selectedMainView, ViewUserId:userId, ViewName:selectedViewName, ViewDesc:vDesc.substr(0, 254), ViewColumns:vColState, ViewSort:vSortModel };
          viewsMap[selectedViewId] = selectedViewObject;
          populateViewsDropdown(true);
          deleteViewButton.classList = 'Btn';
        }).catch(error => {
          console.log('Error' + error);
        });
      }
      else {
        saveView(vName, vDesc.substr(0, 254), viewType, jColState, jSortModel).then(function (savedId) {
          if(savedId) {
            selectedViewName = vName;
            selectedViewId = savedId;
            console.log(userFirstName, userTitle, userDepartment,  userId, userProfileId, userRoleId);
            selectedViewObject = {ViewId:savedId, ViewType:viewType,ViewClass:selectedMainView, ViewUserId:userId, ViewName:selectedViewName, ViewDesc:vDesc.substr(0, 254), ViewColumns:vColState, ViewSort:vSortModel };
            viewsMap[savedId] = selectedViewObject;
            populateViewsDropdown(true);
            deleteViewButton.classList = 'Btn';
          }
          else {
            alert('Error saving view. null ID returned');
          }
        }).catch(error => {
          alert('view save Error...');
          console.log('Error' + error);
        });
      }      
    }

    function resetXmatchContact() {
      return new Promise(function (resolve, reject) {
        GotvCcController.startXMatchBatchTruncate(selectedAccountId,'Contact',(result, event) => {  
          if (event.status) {
            console.log(`startXMatchBatchTruncate called from resetXmatchContact`);
            resolve(result);
          }
          else
          {
            console.log('startXMatchBatchTruncate returned an error from resetXmatchContact');
            reject(event);
          }
        });
      });
    }

    function resetXmatchedContact() {
      return new Promise(function (resolve, reject) {
        GotvCcController.startXMatchedBatchTruncate(selectedAccountId,'C',(result, event) => {  
          if (event.status) {
            console.log(`startXMatchedBatchTruncate called from resetXmatchedContact`);
            resolve(result);
          }
          else
          {
            console.log('startXMatchedBatchTruncate returned an error from resetXmatchedContact');
            reject(event);
          }
        });
      });
    }    

    function resetXmatchLicensure() {
      return new Promise(function (resolve, reject) {
        GotvCcController.startXMatchBatchTruncate(selectedAccountId,'Licensure__c',(result, event) => {  
          if (event.status) {
            console.log(`startXMatchBatchTruncate called from resetXmatchLicensure`);
            resolve(result);
          }
          else
          {
            console.log('startXMatchBatchTruncate returned an error from resetXmatchLicensure');
            reject(event);
          }
        });
      });
    }

    function resetXmatchedLicensure() {
      return new Promise(function (resolve, reject) {
        GotvCcController.startXMatchedBatchTruncate(selectedAccountId,'L',(result, event) => {  
          if (event.status) {
            console.log(`startXMatchedBatchTruncate called from resetXmatchedLicensure`);
            resolve(result);
          }
          else
          {
            console.log('startXMatchedBatchTruncate returned an error from resetXmatchedLicensure');
            reject(event);
          }
        });
      });
    }    

    function resetXmatchContactHandler() {
      xMatchButton.disabled = true;    
      xBatchMessage.textContent = 'Reset batch has begun.  Check back in a while.';  
      resetXmatchContact().then(function(){
        resetXmatchedContact();
      });
    }

    function resetXmatchLicensureHandler() {
      xMatchButton.disabled = true;    
      xBatchMessage.textContent = 'Reset batch has begun.  Check back in a while.';  
      resetXmatchLicensure().then(function(){
        resetXmatchedLicensure();
      });
    }

    function closeViewButtonHandler() {
      viewInputDiv.removeAttribute('data-tooltip2');
      showCreateViewForm(false);
    }

    function saveInsidePlanNotesButtonHandler() {
      let note = insidePlanNotesInput.value;
      saveInsidePlanNotes(note);
    }

    function saveOutsidePlanNotesButtonHandler() {
      let note = outsidePlanNotesInput.value;
      saveOutsidePlanNotes(note);
    }

    function saveSpecialPlanNotesButtonHandler() {
      let note = specialPlanNotesInput.value;
      saveSpecialPlanNotes(note);
    }

    function saveTaskNotesButtonHandler() {
      let taskNotesText    = taskNotesInput.value;
      let taskNotesDate    = taskNotesDateInput.value;
      let taskNotesSubject = taskNotesSubjectInput.value;
      let taskRec;
      
      taskRec = {};
      taskRec.WhoId        = selectedContactId;
      taskRec.AccountId    = selectedAccountId;
      taskRec.Type         = 'GotvNote';
      taskRec.Description  = taskNotesText;
      taskRec.Subject      = taskNotesSubject;

      if(taskNoteMap[selectedContactId]) {
        taskNoteMap[selectedContactId].Description  = taskNotesText;
        taskNoteMap[selectedContactId].Subject      = taskNotesSubject;
        taskNoteMap[selectedContactId].ActivityDate = taskNotesDate;

        taskRec.Id = taskNoteMap[selectedContactId].Id;
      }
      saveTaskNotes(taskRec);
    }

//    function saveConsNotesButtonHandler() {
//      let note = consolidatedNotesInput.value;
//      saveConsolidatedNote(note);
//    }

    function closeInsidePlanNotesButtonHandler() {
      showInsidePlanNotesDialog(false);
    }

    function closeOutsidePlanNotesButtonHandler() {
      showOutsidePlanNotesDialog(false);
    }

    function closeSpecialPlanNotesButtonHandler() {
      showSpecialPlanNotesDialog(false);
    }

    function closeTaskActivityNotesButtonHandler() {
      showTaskActivityNotesDialog(false);
    }

    function closeConsNotesButtonHandler() {
      showConsNotesDialog(false);
    }

    function hideStVcCheckBoxChangeHandler() {
      hideStVcObCheckBox.checked = false;
      if(hideStVcCheckBox.checked)
        stAndVc();
      else
        clearFilters();
    }

    function hideStVcObCheckBoxChangeHandler() {
      hideStVcCheckBox.checked = false;
      if(hideStVcObCheckBox.checked)
        stAndVcAndOb();
      else
        clearFilters();
    }


    function stAndVc() {
      let stAndVcFilterComponent = contactGridOptions.api.getFilterInstance('StAndVcChecked');
      stAndVcFilterComponent.selectNothing();
      stAndVcFilterComponent.setModel(['false']);
      contactGridOptions.api.onFilterChanged();
    }

    function clearFilters() {
      contactGridOptions.api.setFilterModel(null);
      contactGridOptions.api.onFilterChanged();
    }

    function stAndVcAndOb() {
      let stAndVcAndObFilterComponent = contactGridOptions.api.getFilterInstance('StAndVcAndObChecked');
      stAndVcAndObFilterComponent.selectNothing();
      stAndVcAndObFilterComponent.setModel(['false']);
      contactGridOptions.api.onFilterChanged();
    }

    function filterResetButtonHandler() {
      contactGridOptions.api.setFilterModel(null);
      universeDropdown.selectedIndex = 0;
      universeNameInput.value = '';
      universeDescInput.value = '';
    }

    function closeXmatchButtonHandler() {
      showXmatchForm(false);
    }

    function xMatchButtonHandler() {
      showXmatchForm(true);
    }

    function xMatchedButtonHandler() {
      getXmatches();
    }

    function matchButtonHandler() {
      // let kaiserCheckBoxValue    = kaiserCheckBox.checked,
      // kaiserNorthCheckBoxValue   = kaiserNorthCheckBox.checked, 
      // kaiserSouthCheckBoxValue   = kaiserSouthCheckBox.checked,
      // hospitalCheckBoxValue      = hospitalCheckBox.checked,
      // hospitalNorthCheckBoxValue = hospitalNorthCheckBox.checked,
      // hospitalSouthCheckBoxValue = hospitalSouthCheckBox.checked;

      let matchTarget = getRadioValue('XmatchTarget');

      queueMatchData(XmatchBatchLimit, selectedAccountId, matchTarget).then(function(res) {
        if(res.length == 1) {
          xBatchMessage.textContent = '1 Xmatch batch queued and process started';
        } else {
          xBatchMessage.textContent = `${res.length} Xmatch batches queued and process started`;
        }
        matchButton.disabled = true;
        startXMatchBatch(selectedAccountId, matchTarget).then(function(res2){
          console.log(' -- res2 -- ');
          console.log(res2);
        })
        
        console.log(' -- res -- ');        
        console.log(res);
      })
    }

    function getXMatchDetail() {
      return new Promise(function (resolve, reject) {
        GotvCcController.getXMatchDetail( (result, event) => {  
          if (event.status) {
            let len = result.length;
            console.log(`Retrieved Xmatch detail data`);
            resolve(result);
          }
          else
          {
            console.log('Error retrieving Xmatch detail data');
            reject(event);
          }
        });
      });
    }

    function queueMatchData(pXmatchBatchLimit, pSelectedAccountId, pMatchTarget) {
      return new Promise(function (resolve, reject) {
        console.log('Params: ', pXmatchBatchLimit, pSelectedAccountId);
        GotvCcController.queueMatchData(pXmatchBatchLimit, pSelectedAccountId, '', pMatchTarget, (result, event) => {  
          if (event.status) {
            console.log(status,event,result);
            resolve(result);
          }
          else
          {
            console.log('Error creating batches');
            reject(event);
          }
        });
      });
    }

    function startXMatchBatch(pSelectedAccountId,pMatchTarget) {
      return new Promise(function (resolve, reject) {
        console.log('startXMatchBatch() called.....');
        GotvCcController.startXMatchBatch(pSelectedAccountId,pMatchTarget, (result, event) => {
          if (event.status) {
            console.log('Xmatch batches queued and process started.');
            resolve(result);
          }
          else
          {
            console.log('Error queueing XMatch batch');
            reject(event);
          }
        });
      });
    }

    function getLicensureMatches() {
      return new Promise(function (resolve, reject) {
        GotvCcController.getLicensureMatches(selectedAccountId, (result, event) => {
          if (event.status) {
            console.log('Licensure data downloaded successfully');
            resolve(result);
          }
          else {
            console.log('Licensure data downloaded error');
            reject(event);
          }
        }, { buffer: false } );
      });
    }

    function getXmatchContacts() {
      return new Promise(function (resolve, reject) {
        GotvCcController.getContactMatches(selectedAccountId, (result, event) => {
          if (event.status) {
            console.log('Contact data downloaded successfully');
            resolve(result);
          }
          else {
            console.log('Contact data downloaded error');
            reject(event);
          }
        });
      });
    }

    function getXmatches() {
      getXmatchContacts().then(matchData => {
        processXmatches(matchData);
      }).then(function () {
        showXmatchedGrid();
        // Note not calling recount() here, as doing initial api.setSort is triggering contactSortChangeHandler, which does recount.
      }).catch(error => {
        console.log('Error' + error);
      });
    }

    function getLicensureXMatches() {
      getLicensureMatches().then(matchData => {
        processLicensureMatches(matchData);
      }).then(function () {
        showLicensureGrid();
      }).catch(error => {
        console.log('Error' + error);
      });
    }

    function processLicensureMatches(results) {
      return new Promise(function (resolve, reject) {
        let id, lastName, firstName, middleName, licenseAgency, licenseExpDate, licenseStatus, licenseType;
        let licenseStreet,licenseCity,licenseState,licenseZip;
        let email, phone1, phone2, phone3,i,len,rec;
        
        console.log('processLicensureMatches() => ');
        console.log(results);
        xMatchedLicensureDataArray = [];
        len = results.length;
        if (len > 0) {
          for (i = 0; i < len; i++) {
            id = lastName = firstName = middleName = licenseAgency = licenseExpDate = licenseStatus = licenseType = '';
            licenseStreet = licenseCity = licenseState = licenseZip = email = phone1 = phone2 = phone3 = '';
            rec            = results[i]    
            id             = rec.Id
            lastName       = toProperCase(rec.Last_Name__c);
            firstName      = toProperCase(rec.First_Name__c);
            middleName     = toProperCase(rec.Middle_Name__c);
            licenseAgency  = toProperCase(rec.License_Agency__c);
            licenseExpDate = moment(rec.License_Expiration_Date__c).format('MM/DD/YYYY'); 
            licenseStatus  = toProperCase(rec.License_Status__c);
            licenseType    = toProperCase(rec.License_Type__c);
            licenseStreet  = toProperCase(rec.License_Addr_Street__c);
            licenseCity    = toProperCase(rec.License_Addr_City__c); 
            licenseState   = rec.License_Addr_State__c || '';
            licenseState   = licenseState.toUpperCase();
            licenseZip     = toProperCase(rec.License_Addr_Zip__c);
            email          = toProperCase(rec.Email__c);
            phone1         = phoneFormat(rec.Phone_1__c);
            phone2         = phoneFormat(rec.Phone_2__c);
            phone3         = phoneFormat(rec.Phone_3__c);
            xMatchedLicensureDataArray.push({Id:id,LastName:lastName,FirstName:firstName,MiddleName:middleName,
              LicenseType:licenseType,LicenseStreet:licenseStreet,LicenseCity:licenseCity,LicenseState:licenseState,LicenseZip:licenseZip,
              LicenseAgency:licenseAgency,LicenseExpDate:licenseExpDate,LicenseStatus:licenseStatus,LicenseType:licenseType,Email:email,Phone1:phone1,Phone2:phone2,Phone3:phone3});
          }        
        }
        resolve('ok');
      });      
    }

    function processXmatches(results) {
      // controller: SELECT Id,LastName,FirstName,MiddleName,Division__c,Account.Name,In_Current_BU__c,Email,HomePhone,Department,MailingCity,MailingPostalCode,MailingState,MailingStreet,Member_Status__c,MobilePhone,Phone FROM Contact
      return new Promise(function (resolve, reject) {
        let len, rec, i;
        let id,lastName,firstName,middleName,division,accountName,inCurrentBU,email,homePhone,department,mailingCity,mailingZip,mailingState,mailingStreet,memberStatus,cellPhone,phone 
        len = results.length;
        xMatchedDataArray = [];
        if (len > 0) {
          for (i = 0; i < len; i++) {
            id = lastName = firstName = middleName = division = accountName = inCurrentBU = email = homePhone = department = mailingCity = mailingZip = mailingState = mailingStreet = memberStatus = cellPhone = phone = '';
            rec           = results[i]    
            id            = rec.Id
            lastName      = toProperCase(rec.LastName);
            firstName     = toProperCase(rec.FirstName);
            middleName    = toProperCase(rec.MiddleName);
            division      = toProperCase(rec.Division__c);
            accountName   = toProperCase(rec.Account.Name);
            inCurrentBU   = rec.In_Current_BU__c  || false;
            email         = rec.Email             || '';
            homePhone     = rec.HomePhone         || '';
            department    = toProperCase(rec.Department);
            mailingCity   = toProperCase(rec.MailingCity);
            mailingZip    = rec.MailingPostalCode || ''; 
            mailingState  = rec.MailingState      || '';
            mailingStreet = toProperCase(rec.MailingStreet);
            memberStatus  = toProperCase(rec.Member_Status__c);
            cellPhone     = rec.MobilePhone       || '';
            phone         = rec.Phone             || '';

            xMatchedDataArray.push({Id:id,LastName:lastName,FirstName:firstName,MiddleName:middleName,Division:division,AccountName:accountName,
            InCurrentBU:inCurrentBU,Email:email,HomePhone:homePhone,Department:department,MailingCity:mailingCity,MailingZip:mailingZip,MailingState:mailingState,MailingStreet:mailingStreet,MemberStatus:memberStatus,CellPhone:cellPhone,Phone:phone});
          }
          console.log(xMatchedDataArray);
        }
        resolve('ok');
      });
    }

    function showXmatchedGrid() {

      if (xMatchedGridOptions)
        xMatchedGridOptions.api.destroy();

      xMatchedGridOptions = {
        columnDefs: xMatchedColDefs,
        defaultColDef:xMatchedDefaultColDefs,
        rowData: xMatchedDataArray,
        rowSelection: 'single',
        enableSorting: true,
        enableFilter: true,
        showToolPanel: false,
        toolPanelSuppressRowGroups: true,
        toolPanelSuppressValues: true,
        toolPanelSuppressPivots: true,
        toolPanelSuppressPivotMode: true
      };
      new agGrid.Grid(xMatchedGridDiv, xMatchedGridOptions);
      xMatchedGridOptions.api.setSortModel(xmatchSort);

    }

    function showLicensureGrid() {

      if (xMatchedLicensureGridOptions)
        xMatchedLicensureGridOptions.api.destroy();

      xMatchedLicensureGridOptions = {
        columnDefs: xMatchedLicensureColDefs,
        defaultColDef:xMatchedLicensureDefaultColDefs,
        rowData: xMatchedLicensureDataArray,
        rowSelection: 'single',
        enableSorting: true,
        enableFilter: true,
        showToolPanel: false,
        toolPanelSuppressRowGroups: true,
        toolPanelSuppressValues: true,
        toolPanelSuppressPivots: true,
        toolPanelSuppressPivotMode: true
      };
      new agGrid.Grid(xMatchedLicensureGridDiv, xMatchedLicensureGridOptions);
      xMatchedLicensureGridOptions.api.setSortModel(xmatchSort);

    }

    function processUniverseMatchData(results) {
      return new Promise(function (resolve, reject) {
        let i,rec,id,len,accountId,name,description,filterSoql,count,displayVal;
        universeMap = {};
        universePickerValues  = [];
        universePickerDisplay = [];
        len = results.length;
        if(len > 0) {
          for (i = 0; i < len; i++) {
            rec         = results[i];
            id          = rec.Id;
            accountId   = rec.Account__c;
            name        = rec.Name;
            description = rec.Description__c || '';
            filterSoql  = rec.FilterSoql__c;
            count       = rec.Count__c;
            displayVal  = `${name}  (${count})`;
            if(!universeMap[accountId])
              universeMap[accountId] = {};
            universeMap[accountId][id] = {Id:id,AccountId:accountId,Name:name,Description:description,FilterSoql:filterSoql,Count:count};
          }
          console.log(universeMap);                            
          resolve('ok');
        }
      });            
    }

    function viewResetButtonHandler() {
      viewsIcon.className         = 'icon-unlock';
      viewResetButton.className   = 'not-allowed';
      viewsDropdown.selectedIndex = 0;
      viewNameInput.value = '';
      viewDescInput.value = '';
      resetType();
      contactGridOptions.columnApi.resetColumnState();
    }

    function getRadioValue(radioName) {
      let radios = document.getElementsByName(radioName);
      let selectedValue = '';
      for (var i = 0; i < radios.length; i++) {
        if (radios[i].checked) {
          selectedValue = radios[i].value;
          break;
        }
      }
      return selectedValue;
    }

    function resetType() {
      let radios = document.getElementsByName('ViewType');
      radios[0].checked = true;
    }

    function initButtonHandler() {
      notify.log('Window will close to do initialization');
      GotvCcController.initialize(selectedAccountId, (result, event) => {
        if (event.status) {
          window.close();
          resolve(result);
        }
        else {
          let eType = event.type;
          let eMsg = event.message;
          let eWhere = event.where;
          alert('Salesforce update error: ' + eMsg);
          console.log(eType);
          console.log(eMsg);
          if (eWhere != undefined) console.log(eWhere);
          reject(event);
        }
      });
    }

    function assignButtonHandler() {
      let v = voteBlockDropdown.value;
      let a = [];
      selectedNodes.forEach(function (value, index) {
        a.push(selectedNodes[index].data.Id);
      });
      assignVoteBlock(v, a).then(function () {
        updateGridRange(v);
        contactGridOptions.api.clearRangeSelection();
        contactGridOptions.api.deselectAll();
      }).catch(error => {
        console.log('Error' + error);
      });
    }

    function assignVoteBlock(pVoteBlock, pIds) {
      return new Promise(function (resolve, reject) {
        GotvCcController.assignVoteBlock(pVoteBlock, pIds, (result, event) => {
          if (event.status) {
            notify.log('Salesforce Vote Block(s) updated');
            resolve(result);
          }
          else {
            let eType = event.type;
            let eMsg = event.message;
            let eWhere = event.where;
            alert('Salesforce update error: ' + eMsg);
            console.log(eType);
            console.log(eMsg);
            if (eWhere != undefined) console.log(eWhere);
            reject(event);
          }
        });
      });
    }

    function voteBlockDropdownChangeHandler(event) {
      if (voteBlockDropdown.selectedIndex > 0)
        assignButton.disabled = false;
      else
        assignButton.disabled = true;
    }

    function universeDropdownChangeHandler(event) {

      if (universeDropdown.selectedIndex > 0) {
        selectedUniverseObject  = universeArray[universeDropdown.selectedIndex - 1];
        selectedUniverseName    = selectedUniverseObject.UniverseName
        selectedUniverseFilters = selectedUniverseObject.UniverseFilters;
        selectedUniverseId      = selectedUniverseObject.UniverseId;
        universeNameInput.value = selectedUniverseName;
        contactGridOptions.api.setFilterModel(selectedUniverseFilters);
        deleteUniverseButton.classList = 'Btn';
      }
      else {
        selectedUniverseObject = selectedUniverseName = selectedUniverseId = selectedUniverseFilters = '';
        contactGridOptions.api.setFilterModel(null);
        universeNameInput.value   = '';
        universeDescInput.value   = '';
        currentFilter.textContent = '';
        deleteUniverseButton.classList = 'hide';
      }
      recount('universeDropdownChangeHandler');
    }

    function mainViewChangeHandler(event) {
      selectedMainView = event.target.value;
      if(selectedMainView == 'D') {
        titleButton.value = 'Command Center - Data Entry';
      } else {
        titleButton.value = 'Command Center - GOTV';
      }
    }

    function viewsDropdownChangeHandler(event) {
      if (viewsDropdown.selectedIndex > 0) {
        viewsIcon.className = 'icon-lock';
        viewResetButton.className = 'allowed';
        selectedViewObject  = viewsArray[viewsDropdown.selectedIndex - 1];
        selectedViewId      = selectedViewObject.ViewId;
        selectedViewName    = selectedViewObject.ViewName
        selectedViewColumns = selectedViewObject.ViewColumns;
        selectedViewSort    = selectedViewObject.ViewSort;
        viewNameInput.value = selectedViewName;
        viewDescInput.value = selectedViewObject.ViewDesc;
        contactGridOptions.columnApi.setColumnState(selectedViewColumns);
        contactGridOptions.api.setSortModel(selectedViewSort);
        deleteViewButton.classList = 'Btn';
      }
      else {
        selectedViewObject = selectedViewId = selectedViewName = selectedViewColumns = selectedViewSort = '';
        contactGridOptions.columnApi.resetColumnState();
        contactGridOptions.api.setSortModel(null);
        viewNameInput.value   = '';
        viewDescInput.value   = '';
        viewsIcon.className   = 'icon-unlock';
        viewResetButton.className  = 'not-allowed';
        deleteViewButton.classList = 'hide';
      }
    }

    function monitorButtonHandler() {
      monitoring = !monitoring;
      if (monitoring) {
        monitorButton.value = 'Stop monitoring';
        monitorLabel.textContent = 'Real-time monitoring enabled.'
        intervalId = window.setInterval(pollForChanges, 20000);
      }
      else {
        monitorButton.value = 'Start monitoring';
        monitorLabel.textContent = 'Real-time monitoring disabled.'
        clearInterval(intervalId);
      }
    }

    function saveAsCsv1() {
      xMatchedGridOptions.api.exportDataAsCsv({fileName: 'Xmatched Contacts.csv'});
    }    

    function init() {
      accountFilterInput.addEventListener("input", accountFilterInputHandler, false);
      contactFilterInput.addEventListener("input", contactFilterInputHandler, false);
      monitorButton.addEventListener("click", monitorButtonHandler, false);
      initButton.addEventListener("click", initButtonHandler, false);
      assignButton.addEventListener("click", assignButtonHandler, false);
      filterResetButton.addEventListener("click", filterResetButtonHandler, false);
      viewResetButton.addEventListener("click",   viewResetButtonHandler, false);
      closeXmatchButton.addEventListener("click",  closeXmatchButtonHandler, false);
      matchButton.addEventListener("click",  matchButtonHandler, false);
      xMatchButton.addEventListener("click",  xMatchButtonHandler, false);
      xMatchedButton.addEventListener("click",  xMatchedButtonHandler, false);
      deleteUniverseButton.addEventListener("click", deleteUniverseButtonHandler, false); 
      saveUniverseButton.addEventListener("click", saveUniverseButtonHandler, false);
      closeUniverseButton.addEventListener("click", closeUniverseButtonHandler, false);
      deleteViewButton.addEventListener("click", deleteViewButtonHandler, false);  
      saveViewButton.addEventListener("click", saveViewButtonHandler, false);   
      closeViewButton.addEventListener("click", closeViewButtonHandler, false);
      resetXmatchContactButton.addEventListener("click",resetXmatchContactHandler, false);
      resetXmatchLicensureButton.addEventListener("click",resetXmatchLicensureHandler, false);
//    saveConsNotesButton.addEventListener("click",saveConsNotesButtonHandler, false);  Changed to ReadOnly 5/16/18
      saveInsidePlanNotesButton.addEventListener("click", saveInsidePlanNotesButtonHandler, false);
      saveOutsidePlanNotesButton.addEventListener("click", saveOutsidePlanNotesButtonHandler, false);      
      saveSpecialPlanNotesButton.addEventListener("click", saveSpecialPlanNotesButtonHandler, false);      
      saveTaskActivityNotesButton.addEventListener("click",saveTaskNotesButtonHandler, false);

      closeConsNotesButton.addEventListener("click", closeConsNotesButtonHandler, false);
      closeInsidePlanNotesButton.addEventListener("click",  closeInsidePlanNotesButtonHandler, false);
      closeOutsidePlanNotesButton.addEventListener("click", closeOutsidePlanNotesButtonHandler, false);      
      closeSpecialPlanNotesButton.addEventListener("click", closeSpecialPlanNotesButtonHandler, false);            
      closeTaskActivityNotesButton.addEventListener("click",closeTaskActivityNotesButtonHandler, false);

      hideStVcCheckBox.addEventListener ('change', hideStVcCheckBoxChangeHandler, false);
      hideStVcObCheckBox.addEventListener('change', hideStVcObCheckBoxChangeHandler,false);

      titleButton.addEventListener("click",titleButtonClickHandler, false);

      tab1Id.addEventListener("click", tab1ClickHandler, false);
      tab2Id.addEventListener("click", tab2ClickHandler, false);      
      tab3Id.addEventListener("click", tab3ClickHandler, false);      
      tab4Id.addEventListener("click", tab4ClickHandler, false); 
      tab5Id.addEventListener("click", tab5ClickHandler, false); 
      voteBlockDropdown.addEventListener('change', voteBlockDropdownChangeHandler, false);
      universeDropdown.addEventListener('change', universeDropdownChangeHandler, false);
      universeButton.addEventListener('click', createUniverseButtonHandler, false);
      viewsDropdown.addEventListener('change', viewsDropdownChangeHandler, false);
      viewsButton.addEventListener('click', createViewButtonHandler, false);
      saveAsCsvButton1.addEventListener("click", saveAsCsv1, false);

      pureTabs.init('tabs__link', 'tabs__link--active'); // http://www.cssscript.com/lightweight-tabs-widget-with-pure-javascript-puretabs
      shownBefore = false;
      accountMap = {};
      contactMap = {};
      screensize.innerHTML = `screen: ${screen.width} x ${screen.height}`;
      sessionId      = '{!$Api.Session_ID}';
      userId         = '{!$User.Id}';
      userFirstName  = '{!$User.FirstName}';
      userLastName   = '{!$User.LastName}';
      userDepartment = '{!$User.Department}';
      userTitle      = '{!$User.Title}';
      userProfileId  = '{!$User.ProfileId}';
      userRoleId     = '{!$User.UserRoleId}';
      baseURL        = '{!$CurrentPage.URL}';
      userFirstName  = toProperCase(userFirstName);
      userLastName   = toProperCase(userLastName);   
      userDepartment = toProperCase(userDepartment); 
      userTitle      = toProperCase(userTitle);      

      if (userDepartment.toLowerCase() == 'ops/fin-data') {
        userLevel = 'Admin';
      } else {
        let dirTest = userTitle.match(/Director/g);
        if (dirTest != null || userTitle.substr(0, 5) == 'Coord' || userId == '005i0000008MCokAAG') {
          userLevel = 'Super';
        } else {
          userLevel = 'Regular';
          mainViewDiv.className  = 'hide';
        }
      }

      if(userLevel == 'Admin' || userLevel == 'Super' ) {
        mainViewDiv.className      = 'show';
        xMatchButtonsDiv.className = 'show';
        mainViewRadio1.addEventListener('change', mainViewChangeHandler, false);
        mainViewRadio2.addEventListener('change', mainViewChangeHandler, false);
      }

      console.log(userFirstName, userTitle, userDepartment,userId, userProfileId, userRoleId);
      initAgGridContact();

    }

    function getURL() {
      return new Promise(function (resolve, reject) {
        GotvCcController.getUrl((result, event) => {
          if (event.status) {
            console.log('Retrieved Url data');
            resolve(result);
          }
          else {
            console.log('Error retrieving Url data');
            reject(event);
          }
        });
      });
    }

    function clean(s) {
      let s1, s2, s3, s4, s5, s6, s7, s8, s9 = '';

      if (s == null || s == undefined)
        s9 = '';
      else {
        s1 = s.replace(r1, "&");
        s2 = s1.replace(r2, "'");
        s3 = s2.replace(r3, "&");
        s4 = s3.replace(r4, "'");
        s5 = s4.replace(r5, "'");
        s6 = s5.replace(r6, ">");
        s7 = s6.replace(r7, ">");
        s8 = s7.replace(r8, "<");
        s9 = s8.replace(r9, "<");
      }
      return s9;
    }

    function toProperCase(s) {
      // My version - handles hyphenated names correctly :)
      let s1, s2;
      if (s == null || s == undefined)
        s2 = '';
      else {
        s1 = s.trim().toLowerCase();
        s2 = clean(s1);
        s2 = s2.replace(/\b[a-zA-Z]/g, function ($1) { return $1.toUpperCase(); });
      }
      return s2;
    }

    function getAccountData() {
      return new Promise(function (resolve, reject) {
        GotvCcController.getAccountData((result, event) => {
          if (event.status) {
            console.log('Retrieved Account data');
            resolve(result);
          }
          else {
            console.log('Error retrieving Account data');
            reject(event);
          }
        }, { buffer: false });
      });
    }

    function getViews() {
      return new Promise(function (resolve, reject) {
        GotvCcController.getViews((result, event) => {
          if (event.status) {
            console.log('Retrieved View data');
            resolve(result);
          }
          else {
            console.log('Error retrieving View data');
            reject(event);
          }
        });
      });
    }

    function processXmatchDetail(results) {
      // Possible Status values:
      // Holding    - Job has been submitted and is held in the Apex flex queue until system resources become available to queue the job for processing.
      // Queued     - Job is awaiting execution.
      // Preparing  - The start method of the job has been invoked. This status can last a few minutes depending on the size of the batch of records.
      // Processing - Job is being processed.
      // Aborted    - Job aborted by a user.
      // Completed  - Job completed with or without failures.
      // Failed     - Job experienced a system failure.      
      return new Promise(function (resolve, reject) {
        let len, rec, i;
        let accountId,matchTarget,jobStatus;
        len = results.length;
        if (len > 0) {
          xMatchDetailMap = {};
          for (i = 0; i < len; i++) {
            accountId = matchTarget = jobStatus = '';
            rec           = results[i];
            accountId     = rec.AccountId__c;
            matchTarget   = rec.MatchTarget__c;
            jobStatus     = rec.JobStatus__c;
            if(!xMatchDetailMap[accountId]) {
              xMatchDetailMap[accountId] = {};
            }
            if(!xMatchDetailMap[accountId][matchTarget]) {
              xMatchDetailMap[accountId][matchTarget] = {AccountId:accountId,CompletedCnt:0,HoldingCnt:0,QueuedCnt:0,PreparingCnt:0,ProcessingCnt:0,AbortedCnt:0,FailedCnt:0};
            }
            switch(jobStatus) {
              case 'Holding' :
                xMatchDetailMap[accountId][matchTarget].HoldingCnt++;
                break;
              case 'Queued' :
                xMatchDetailMap[accountId][matchTarget].QueuedCnt++;
                break;
              case 'Preparing' :
                xMatchDetailMap[accountId][matchTarget].PreparingCnt++;
                break;
              case 'Processing' : 
                xMatchDetailMap[accountId][matchTarget].ProcessingCnt++;
                break;
              case 'Aborted' :
                xMatchDetailMap[accountId][matchTarget].AbortedCnt++;
                break;
              case 'Completed' :
                xMatchDetailMap[accountId][matchTarget].CompletedCnt++;
                break;
              case 'Failed' :
                xMatchDetailMap[accountId][matchTarget].FailedCnt++;
                break;
            }
          }
          console.log(xMatchDetailMap);
        }
//        for(let mapKey in xMatchDetailMap) {
//          xmatchDetailDataArray.push(xMatchDetailMap[mapKey]);
//        }
//        console.log( xmatchDetailDataArray );
        resolve('ok');
      });
    }

    function processViewData(results) {
      return new Promise(function (resolve, reject) {
        let len, rec, i, j, emptyArrayItem;
        let vId,vClass,vType,vUser,vName,vDescription,vColumnState,vSortModel;
        len = results.length;
        if (len > 0) {
          for (i = 0; i < len; i++) {
            vId = vType = vUser = vName = vDescription = vColumnState = vSortModel = '';
            rec          = results[i];
            vId           = rec.Id;
            vClass        = rec.ViewClass__c;
            vType         = rec.Type__c;
            vUser         = rec.OwnerId;
            vName         = rec.Name;
            vDescription  = rec.Description__c;
            vColumnState  = JSON.parse(clean(rec.ColumnState__c).replace(rQuote, '"'));
            vSortModel    = JSON.parse(clean(rec.SortModel__c).replace(rQuote, '"'));
            viewsMap[vId] = {ViewId:vId, ViewName:vName, ViewDesc:vDescription, ViewClass:vClass, ViewType:vType, ViewUserId:vUser,  ViewColumns: vColumnState,ViewSort: vSortModel};
          }
          console.log(viewsMap);
        }
        resolve('ok');
      });
    }

    function processAccountData(results) {
      return new Promise(function (resolve, reject) {
        let len, rec, i, j, allowed, emptyArrayItem;
        let id, region, accountName, buCount, division, hospitalSystem, coordId, coordLastname, coordFirstName, org1Id, org1Lastname, org1FirstName
        let coordLn, coordFn, coord, org1Ln, org1Fn, org1;
        let universeId, universeAccountId, universeName, universeType, universeDesc, universeSoql, _universeFilters, universeFilters, srAllowed, srAllowedResponses, srDescription, srName;

        accountDataArray = [];
        accountMap = {};
        len = results.length;
        if (len > 0) {
          for (i = 0; i < len; i++) {
            id = accountName = division = hospitalSystem = buCount = coordId = coord = coordLn = coordFn = org1Id = org1 = org1Ln = org1Fn = '';
            rec = results[i];
            id = rec.Id;
            accountName = toProperCase(rec.Name);
            region = toProperCase(rec.Region__c);
            division = toProperCase(rec.Account_Group__c);
            buCount = parseInt(rec.BU_Count__c) || 0;

            if ('Coordinator__r' in rec) {
              if (rec.Coordinator__r) {
                coordLn = toProperCase(rec.Coordinator__r.LastName);
                coordFn = toProperCase(rec.Coordinator__r.FirstName);
                coord = `${coordLn}, ${coordFn}`;
              }
            }

            if ('Organizer_1__r' in rec) {
              if (rec.Organizer_1__r) {
                org1Ln = toProperCase(rec.Organizer_1__r.LastName);
                org1Fn = toProperCase(rec.Organizer_1__r.FirstName);
                org1 = `${coordLn}, ${coordFn}`;
              }
            }

            if ('Survey_Questions__r' in rec) {
              if (rec.Survey_Questions__r) {
                // There should only be 1 Vote Block survey question active for an Employer at any given time.
                emptyArrayItem = [' '];
                srAllowedResponses = rec.Survey_Questions__r[0].Allowed_Responses__c;
                srDescription = rec.Survey_Questions__r[0].Description__c;
                srName = rec.Survey_Questions__r[0].Name;
                srAllowed = srAllowedResponses.split('\r\n');
                allowed = emptyArrayItem.concat(srAllowed);
                accountAllowedResponsesMap[id] = { Name: srName, Description: srDescription, Allowed: allowed };
              }
            }

            if ('Gotv_Universes__r' in rec) {
              if (rec.Gotv_Universes__r) {
                if (!universeMap[id]) {
                  universeMap[id] = {};
                }
                for (j = 0; j < rec.Gotv_Universes__r.length; j++) {
                  universeId = rec.Gotv_Universes__r[j].Id;
                  universeAccountId = rec.Gotv_Universes__r[j].Account__c;
                  universeName  = rec.Gotv_Universes__r[j].Name;
                  universeDesc  = rec.Gotv_Universes__r[j].Description__c;
                  universeSoql  = rec.Gotv_Universes__r[j].FilterSoql__c;
                  universeType  = rec.Gotv_Universes__r[j].Type__c;
                  universeFilters = JSON.parse(clean(rec.Gotv_Universes__r[j].SavedFilter__c).replace(rQuote, '"'));
                  universeMap[id][universeId] = { UniverseId: universeId, UniverseAccountId: universeAccountId, UniverseType: universeType, UniverseName: universeName, UniverseFilters: universeFilters, UniverseSoql: universeSoql, UniverseDesc: universeDesc };
                }
              }
            }

            accountMap[id] = {
              Id: id, AccountName: accountName, BuCount: buCount, Division: division, Region: region, HospitalSystem: hospitalSystem,
              Coord: coord, Org1Id: org1Id, Org1: org1
            };

            accountDataArray.push({
              Id: id, AccountName: accountName, BuCount: buCount, Division: division, Region: region, HospitalSystem: hospitalSystem,
              Coord: coord, Org1Id: org1Id, Org1: org1
            });

          }
          console.log(' -------- Allowed Responses Map  -------- ');
          console.table( accountAllowedResponsesMap );          
          console.log(' -------- Universe Map  -------- ');
          console.log(universeMap);
          showAccountGrid();
          showLoadingMsg(false);
        }

/*         if(userLevel == 'Admin') {
          tab4Id.className     = 'tabs__link';
          tab4.className       = 'tabs__section';
          tab5Id.className     = 'tabs__link';
          tab5.className       = 'tabs__section';
        } */

        resolve('ok');
      });
    }

/* ToDo: fix ctrl-click issue not (multiple ranges)
    function contactClickHandler(params) {
      if(params.event.ctrlKey) {
        notify.log(`Control pressed ${params.data.Name}`);
        params.api.deselectAll();
        params.node.setSelected(true,true);
        params.api.onSelectionChanged();
      } else {
        notify.log(`Control NOT pressed ${params.data.Name}`);
      }
      console.log(params);
    }
*/

    function contactChangeHandler(params) {
      if (params.newValue != params.oldValue) {
        changedField = params.colDef.field;
        changeTo = params.newValue;
        console.log(`Changed ${changedField} to ${changeTo} from ${params.oldValue} for ${selectedContactName}`);
        updateSalesforce();
        updateGridCell(selectedContactId, changedField, changeTo);
      }
    }

    function editInsidePlanNotes(v) {
      insidePlanNotesInput.value = v;
      showInsidePlanNotesDialog(true);
    }

    function editOutsidePlanNotes(v) {
      outsidePlanNotesInput.value = v;
      showOutsidePlanNotesDialog(true);
    }

    function editSpecialPlanNotes(v) {
      specialPlanNotesInput.value = v;
      showSpecialPlanNotesDialog(true);
    }

    function editTaskActivityNotes() {
      showTaskActivityNotesDialog(true);
    }

    function editConsolidatedNote(v) {
      consolidatedNotesInput.value = v;
      showConsNotesDialog(true);
    }

    function getDataEntryContextMenuItems(params) {
      params.node.setSelected(true, true);
      let result = [
        { 
          name: 'Edit TaskActivity Notes',
          action: function () {
            editTaskActivityNotes(); // Note: These are stored in a map, so not passing in a param
          }
        },
        { 
          name: 'View Consolidated Notes',
          action: function () {
            editConsolidatedNote(params.node.data.NotesConsolidated);
          }
        }          
      ];
      return result;
    }

    function getGOTVContextMenuItems(params) {
      params.node.setSelected(true, true);
      let result = [
        { 
          name: 'Edit Inside Plan Notes',
          action: function () {
            editInsidePlanNotes(params.node.data.GotvInsidePlanNotes);
          }
        },
        { 
          name: 'Edit Outside Plan Notes',
          action: function () {
            editOutsidePlanNotes(params.node.data.GotvOutsidePlanNotes);
          }
        },
        { 
          name: 'Edit Special Plan Notes',
          action: function () {
            editSpecialPlanNotes(params.node.data.GotvSpecialPlanNotes);
          }
        },        
        { 
          name: 'Edit TaskActivity Notes',
          action: function () {
            editTaskActivityNotes(); // // Note: These are stored in a map, so not passing in a param
          }
        },
        { 
          name: 'View Consolidated Notes',
          action: function () {
            editConsolidatedNote(params.node.data.NotesConsolidated);
          }
        }          
      ];
      return result;
    }

    function showGotvContactGrid() {
      if (contactGridOptions)
        contactGridOptions.api.destroy();

      contactGridOptions = {
        rowHeight: 20,
        columnDefs: gotvContactColDefs,
        defaultColDef: gotvContactDefaultColDefs,
        rowData: contactDataArray,
        rowSelection: 'multiple',
        enableSorting: true,
        enableFilter: true,
        showToolPanel: false,
        toolPanelSuppressRowGroups: true,
        toolPanelSuppressValues: true,
        toolPanelSuppressPivots: true,
        toolPanelSuppressPivotMode: true,
        onSelectionChanged: contactSelectionHandler,
        onCellValueChanged: contactChangeHandler,
        onFilterChanged: contactFilterChangeHandler,
        onSortChanged: contactSortChangeHandler,
        onRangeSelectionChanged: rangeSelectionChangeHandler,
        enableRangeSelection: true,
        getContextMenuItems: getGOTVContextMenuItems,
        getRowNodeId: function (data) { return data.Id; }
      };
      new agGrid.Grid(contactGridDiv, contactGridOptions);
      contactGridOptions.api.setSortModel(nameSort);
      tab2Id.click();
      showLoadingMsg(false);      
    }

    function showDataEntryContactGrid() {
      if (contactGridOptions)
        contactGridOptions.api.destroy();

      contactGridOptions = {
        rowHeight: 20,
        columnDefs: dataEntryContactColDefs,
        defaultColDef: dataEntryContactDefaultColDefs,
        rowData: contactDataArray,
        rowSelection: 'multiple',
        enableSorting: true,
        enableFilter: true,
        showToolPanel: false,
        toolPanelSuppressRowGroups: true,
        toolPanelSuppressValues: true,
        toolPanelSuppressPivots: true,
        toolPanelSuppressPivotMode: true,
        onSelectionChanged: contactSelectionHandler,
        onCellValueChanged: contactChangeHandler,
        onFilterChanged: contactFilterChangeHandler,
        onSortChanged: contactSortChangeHandler,
        onRangeSelectionChanged: rangeSelectionChangeHandler,
        enableRangeSelection: true,
        getContextMenuItems: getDataEntryContextMenuItems,
        getRowNodeId: function (data) { return data.Id; }
      };
      new agGrid.Grid(contactGridDiv, contactGridOptions);
      let departmentColumn  = contactGridOptions.columnApi.getColumn('Department');
      let worksiteColumn    = contactGridOptions.columnApi.getColumn('Worksite');   
      let dialysisColumn    = contactGridOptions.columnApi.getColumn('DialysisEmployer');
      let buColumn          = contactGridOptions.columnApi.getColumn('BU');
      let inCurrentBuColumn = contactGridOptions.columnApi.getColumn('InCurrentBU');

      if(userLevel != 'Admin') {
        departmentColumn.colDef.cellClass    = 'NoEdit';
        departmentColumn.colDef.headerClass  = 'NoEditHdr';
        departmentColumn.colDef.editable     = false;
        worksiteColumn.colDef.cellClass      = 'NoEdit';
        worksiteColumn.colDef.headerClass    = 'NoEditHdr';
        worksiteColumn.colDef.editable       = false;
        dialysisColumn.colDef.cellClass      = 'NoEdit';
        dialysisColumn.colDef.headerClass    = 'NoEditHdr';
        dialysisColumn.colDef.editable       = false;
        buColumn.colDef.cellClass            = 'NoEdit';
        buColumn.colDef.headerClass          = 'NoEditHdr';
        buColumn.colDef.editable             = false;
        inCurrentBuColumn.colDef.cellClass   = 'NoEdit';
        inCurrentBuColumn.colDef.headerClass = 'NoEditHdr';
        inCurrentBuColumn.colDef.editable     = false;
      }

//    contactGridOptions.api.setSortModel(nameSortDesc); // Force grid to redraw, to get around rendering bug (only fixes css, not row # though).
      contactGridOptions.api.setSortModel(titleSort);
      contactGridOptions.api.setSortModel(nameSort);

      tab2Id.click();
      showLoadingMsg(false);
    }

    function rangeSelectionChangeHandler(event) {
      if(event.finished) {
        let rangeSelections = contactGridOptions.api.getRangeSelections();
        if(rangeSelections) {
          let firstRange = rangeSelections[0];
          let startRow = Math.min(firstRange.start.rowIndex, firstRange.end.rowIndex);
          let endRow = Math.max(firstRange.start.rowIndex, firstRange.end.rowIndex);
          let cnt = 0;
          let rowModel = contactGridOptions.api.getModel();
          let rowNode;
          selectedNodes = [];

          if(startRow == endRow) {
            rowNode = rowModel.getRow(startRow);
            selectedNodes.push(rowNode);
          } else {
            for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {
              rowNode = rowModel.getRow(rowIndex);
              selectedNodes.push(rowNode);
              if (cnt == 0)
                rowNode.setSelected(true, true);
              else
              rowNode.setSelected(true, false);
              cnt++;
            }
          }

          if (cnt > 0)
            assignButton.value = 'Assign ' + cnt;
          else
            assignButton.value = 'Assign';
        }
      }
    }

    function contactSortChangeHandler(event) {
      recount('contactSortChangeHandler');
    }

    function contactFilterChangeHandler(event) {
      let assessment, gotvVoteYes, gotvVoteBlock,gotvPlanType,ownerName, ownerId, vcName, vcId;
      let ownerFilterDesc, assignedVcFilterDesc;
      let gotvGettableFilterDesc, gotvReconfirmedFilterDesc, gotvWorksEday1FilterDesc, gotvWorksEday2FilterDesc;
      let gotvWorksNightBeforeEday1FilterDesc, worksNightBeforeEday2FilterDesc;
      let filterSoqlArray = [], filterDescArray = [], filterJoin = '', filterDescList, i = 0, mapKey, value;
      let gotvAssessmentFilterDesc, gotvVoteBlockTimeFilterDesc, gotvVoteYesPetitionFilterDesc, gotvPlanTypeFilterDesc;
      let stFilterDesc, slFilterDesc, vcFilterDesc, obFilterDesc, bcFilterDesc;
      let x1FilterDesc, x1Soql, icsFilterDesc, icsSoql;

      let ownerSoql,cardAssessmentSoql, cardAssessmentFilterDesc, verbalAssessmentSoql, verbalAssessmentFilterDesc, filterDescJoin, gotvSlipSoql;
      let gotvWorksNightBeforeEday1Soql,worksNightBeforeEday2Soql,gotvWorksEday1Soql,gotvWorksEday2Soql;
      let assignedVcSoql,threeTouchStSoql, threeTouchVcSoql, threeTouchObSoql;
      let gotvAssessmentSoql, gotvVoteBlockTimeSoql, gotvVoteYesPetitionSoql, gotvPlanTypeSoql;
      let gotvChallenge,gotvChallengeSoql;
      let gotvGettableSoql, gotvReconfirmedSoql, gotvOffBothDaysSoql,gotvBoardChallengeSoql, gotvSpecialPlanSoql;
      let dcFilterDesc, doNotCallSoql, gotvHardPullSoql, hpFilterDesc;
      let filters, workStatus, workStatusSoql, workStatusFilterDesc;

      ownerSoql = cardAssessmentSoql = cardAssessmentFilterDesc = verbalAssessmentSoql = verbalAssessmentFilterDesc = gotvSlipSoql = '';
      gotvWorksNightBeforeEday1Soql = worksNightBeforeEday2Soql = doNotCallSoql = '';
      assignedVcSoql = threeTouchStSoql = threeTouchVcSoql = threeTouchObSoql = '';
      gotvAssessmentSoql = gotvVoteBlockTimeSoql = gotvVoteYesPetitionSoql = gotvPlanTypeSoql = '';
      gotvGettableSoql = gotvReconfirmedSoql = gotvOffBothDaysSoql = gotvBoardChallengeSoql = gotvSpecialPlanSoql = '';
      gotvAssessmentFilterDesc = gotvVoteBlockTimeFilterDesc = gotvVoteYesPetitionFilterDesc = gotvPlanTypeFilterDesc = '';
      ownerFilterDesc = stFilterDesc = vcFilterDesc = slFilterDesc = bcFilterDesc = obFilterDesc = '';
      dcFilterDesc = hpFilterDesc = '';
      gotvGettableFilterDesc = gotvReconfirmedFilterDesc = '';
      gotvWorksEday1FilterDesc = gotvWorksEday2FilterDesc = gotvWorksNightBeforeEday1FilterDesc = '';
      worksNightBeforeEday2Soql = worksNightBeforeEday2FilterDesc = x1FilterDesc = x1Soql = icsFilterDesc = icsSoql = '';
      assignedVcFilterDesc = cardAssessmentFilterDesc = verbalAssessmentSoql = verbalAssessmentFilterDesc = gotvPlanType = '';
      workStatusFilterDesc = '';
      currentFilter.textContent = '';
      filterLabel.textContent = '';
      filterSoql = filterDescList = ''
      
      currentFilter.value = '';
      filters = contactGridOptions.api.getFilterModel();

      getCurrentFilters();
      filterCnt = 0;
      for (let filterName in filters) {

        const filterArray = filters[filterName];

        if (filterArray.length > 0) {
          if (filterName == 'WorkStatus') {
            filterCnt++;
            workStatusSoql = 'Work_Status__c = ';
            for (let i = 0; i < filterArray.length; i++) {
              workStatus = filterArray[i];
              if (i > 0) {
                workStatusSoql += ' OR Work_Status__c = ';
                workStatusFilterDesc += ', ';
              }
              if (workStatusSoql) {
                workStatusSoql += `'${workStatus}'`;
                workStatusFilterDesc += `${workStatus}`;
              }
              else {
                workStatusSoql += ' null ';
                workStatusFilterDesc += `null`;
              }
            }
          }

/*          if (filterName == 'GotvBoardChallenge') {
            filterCnt++;
            gotvBoardChallengeSoql = 'GOTV_Board_Challenge__c = ';
            value = filterArray[0];
            if (value == 'true') {
              gotvBoardChallengeSoql += ' true ';
              bcFilterDesc += 'BC:true';
            }
            else {
              gotvBoardChallengeSoql += ' null ';
              bcFilterDesc += 'BC:null';
            }
          } */
          
          if (filterName == 'GotvOffBothDays') {
            filterCnt++;
            gotvOffBothDaysSoql = 'GOTV_Off_Both_Days__c = ';
            value = filterArray[0];
            if (value == 'true') {
              gotvOffBothDaysSoql += ' true ';
              obFilterDesc += 'BO:true';
            }
            else {
              gotvOffBothDaysSoql += ' null ';
              obFilterDesc += 'BO:null';
            }
          }

          if (filterName == 'DNC') {
            filterCnt++;
            doNotCallSoql = 'DoNotCall = ';
            value = filterArray[0];
            if (value == 'true') {
              doNotCallSoql += ' true ';
              dcFilterDesc  += 'DC:true';
            }
            else {
              doNotCallSoql += ' null ';
              dcFilterDesc  += 'DC:null';
            }
          }

          if (filterName == 'Ics') {
            filterCnt++;
            icsSoql = 'Ics2__c = ';
            value = filterArray[0];
            if (value == 'true') {
              icsSoql += ' true ';
              icsFilterDesc  += 'IC:true';
            }
            else {
              icsSoql += ' null ';
              icsFilterDesc  += 'IC:null';
            }
          }

          if (filterName == 'X1') {
            filterCnt++;
            x1Soql = 'X1_1_complete__c = ';
            value = filterArray[0];
            if (value == 'true') {
              x1Soql += ' true ';
              x1FilterDesc  += 'X1:true';
            }
            else {
              x1Soql += ' null ';
              x1FilterDesc  += ':null';
            }
          }

          if (filterName == 'GotvSpecialPlan') {
            filterCnt++;
            gotvSpecialPlanSoql = 'GOTV_Special_Plan__c = ';
            value = filterArray[0];
            if (value == 'true') {
              gotvSpecialPlanSoql += ' true ';
              spFilterDesc += 'SP:true';
            }
            else {
              gotvSpecialPlanSoql += ' null ';
              spFilterDesc += 'SP:null';
            }
          }

          if (filterName == 'GotvSlip') {
            filterCnt++;
            gotvSlipSoql = 'GOTV_Slip__c = ';
            value = filterArray[0];
            if (value == 'true') {
                gotvSlipSoql += ' true ';
                slFilterDesc += 'SL:true';
            }
            else {
                gotvSlipSoql += ' null ';
                slFilterDesc += 'SL:null';
            }
          }
          
          if (filterName == 'GotvHardPull') {
            filterCnt++;
            gotvHardPullSoql = 'GOTV_Hard_Pull__c = ';
            value = filterArray[0];
            if (value == 'true') {
              gotvHardPullSoql += ' true ';
              hpFilterDesc += 'HP:true';
            }
            else {
              gotvHardPullSoql += ' null ';
              hpFilterDesc += 'HP:null';
            }
          }

          if (filterName == 'ThreeTouchST') {
            filterCnt++;
            threeTouchStSoql = 'Three_Touch_ST__c = ';
            value = filterArray[0];
            if (value == 'true') {
              threeTouchStSoql += ' true ';
              stFilterDesc += 'ST:true';
            }
            else {
              threeTouchStSoql += ' null ';
              stFilterDesc += 'ST:null';
            }
          }

          if (filterName == 'ThreeTouchVC') {
            filterCnt++;
            threeTouchVcSoql = 'Three_Touch_VC__c = ';
            value = filterArray[0];
            if (value == 'true') {
              threeTouchVcSoql += ' true ';
              vcFilterDesc += 'VC:true';
            }
            else {
              threeTouchVcSoql += ' null ';
              vcFilterDesc += 'VC:null';
            }
          }

          if (filterName == 'ThreeTouchOB') {
            filterCnt++;
            threeTouchObSoql = 'Three_Touch__c = ';
            value = filterArray[0];
            if (value == 'true') {
              threeTouchObSoql += ' true ';
              obFilterDesc += 'OB:true';
            }
            else {
              threeTouchObSoql += ' null ';
              obFilterDesc += 'OB:null';
            }
          }

          if (filterName == 'GotvGettable') {
            filterCnt++;
            gotvGettableSoql = 'GOTV_Gettable__c = ';
            value = filterArray[0];
            if (value == 'true') {
              gotvGettableSoql += ' true ';
              gotvGettableFilterDesc += 'GT:true';
            }
            else {
              gotvGettableSoql += ' null ';
              gotvGettableFilterDesc += `GT:null`;
            }
          }

          if (filterName == 'GotvReconfirmed') {
            filterCnt++;
            gotvReconfirmedSoql = 'Reconfirmed_GOTV__c = ';
            value = filterArray[0];
            if (value == 'true') {
              gotvReconfirmedSoql += ' true ';
              gotvReconfirmedFilterDesc += 'RC:true';
            }
            else {
              gotvReconfirmedSoql += ' null ';
              gotvReconfirmedFilterDesc += 'RC:null';
            }
          }

          if (filterName == 'GotvWorksEday1') {
            filterCnt++;
            gotvWorksEday1Soql = 'GOTV_Works_Eday_1__c = ';
            value = filterArray[0];
            if (value == 'true') {
              gotvWorksEday1Soql += ' true ';
              gotvWorksEday1FilterDesc += 'W1:true';
            }
            else {
              gotvWorksEday1Soql += ' null ';
              gotvWorksEday1FilterDesc += 'W1:null ';
            }
          }

          if (filterName == 'gotvWorksEday2') {
            filterCnt++;
            gotvWorksEday2Soql = 'GOTV_Works_Eday2__c = ';
            value = filterArray[0];
            if (value == 'true') {
              gotvWorksEday2Soql += ' true ';
              gotvWorksEday2FilterDesc += 'W2:true';
            }
            else {
              gotvWorksEday2Soql += ' null ';
              gotvWorksEday2FilterDesc += 'W2:null ';
            }
          }

          if (filterName == 'GotvWorksNightBeforeEday1') {
            filterCnt++;
            gotvWorksNightBeforeEday1Soql = 'GOTV_Works_Night_Before_Eday1__c = ';
            value = filterArray[0];
            if (value == 'true') {
              gotvWorksNightBeforeEday1Soql += ' true ';
              gotvWorksNightBeforeEday1FilterDesc += 'N1:true ';
            }
            else {
              gotvWorksNightBeforeEday1Soql += ' null ';
              gotvWorksNightBeforeEday1FilterDesc += 'N1:null ';
            }
          }

          if (filterName == 'worksNightBeforeEday2') {
            filterCnt++;
            worksNightBeforeEday2Soql = 'Works_Night_Before_Eday2__c = ';
            value = filterArray[0];
            if (value == 'true') {
              worksNightBeforeEday2Soql += ' true ';
              worksNightBeforeEday2FilterDesc += 'N2:true ';
            }
            else {
              worksNightBeforeEday2Soql += ' null ';
              worksNightBeforeEday2FilterDesc += 'N2:null ';
            }
          }
          
          if (filterName == 'GotvVoteBlockTime') {
            filterCnt++;
            gotvVoteBlockTimeSoql = 'GOTV_Vote_Block_Time__c = ';
            i = 0;
            for (mapKey in currentVoteBlockMap) {
              gotvVoteBlock = currentVoteBlockMap[mapKey];
              if (i > 0) {
                gotvVoteBlockTimeSoql += ' OR GOTV_Vote_Block_Time__c = ';
              }
              if (gotvVoteBlock) {
                gotvVoteBlockTimeSoql += `'${gotvVoteBlock}'`;
                gotvVoteBlockTimeFilterDesc += `${gotvVoteBlock}`;
              }
              else {
                gotvVoteBlockTimeSoql += ' null ';
                gotvVoteBlockTimeFilterDesc += 'null';
              }
              i++;
            }
          }

          if (filterName == 'GotvAssessment') {
            filterCnt++;
            gotvAssessmentSoql = 'GOTV_Assessment__c = ';
            i = 0;
            for (mapKey in currentGotvAssessmentsMap) {
              assessment = currentGotvAssessmentsMap[mapKey];
              if (i > 0) {
                gotvAssessmentSoql += ' OR GOTV_Assessment__c = ';
                gotvAssessmentFilterDesc += ', ';
              }
              if (assessment) {
                gotvAssessmentSoql += `'${assessment}'`;
                gotvAssessmentFilterDesc += `'${assessment}'`;
              }
              else {
                gotvAssessmentSoql += ' null ';
                gotvAssessmentFilterDesc += 'null';
              }
              i++;
            }
          }

          if (filterName == 'CardAssessment') {
            filterCnt++;
            cardAssessmentSoql = 'Card_Assessment__c = ';
            i = 0;
            for (mapKey in currentCardAssessmentMap) {
              assessment = currentCardAssessmentMap[mapKey];
              if (i > 0) {
                cardAssessmentSoql += ' OR Card_Assessment__c = ';
                cardAssessmentFilterDesc += ', ';
              }
              if (assessment) {
                cardAssessmentSoql += `'${assessment}'`;
                cardAssessmentFilterDesc += ` '${assessment}' `;
              }
              else {
                cardAssessmentSoql += ' null ';
                cardAssessmentFilterDesc += 'null';
              }
              i++;
            }
          }

          if (filterName == 'VerbalAssessment') {
            filterCnt++;
            verbalAssessmentSoql = 'Verbal_Assessment__c = ';
            i = 0;
            for (mapKey in currentVerbalAssessmentMap) {
              assessment = currentVerbalAssessmentMap[mapKey];
              if (i > 0) {
                verbalAssessmentSoql += ' OR Card_Assessment__c = ';
                verbalAssessmentFilterDesc += ', ';
              }
              if (assessment) {
                verbalAssessmentSoql += `'${assessment}'`;
                verbalAssessmentFilterDesc += `'${assessment}'`;
              }
              else {
                verbalAssessmentSoql += ' null ';
                verbalAssessmentFilterDesc += 'null';
              }
              i++;
            }
          }

          if (filterName == 'GotvVoteYesPetition') {
            filterCnt++;
            gotvVoteYesPetitionSoql = 'GOTV_Vote_Yes_Petition__c = ';
            i = 0;
            for (mapKey in currentVoteYesMap) {
              gotvVoteYes = currentVoteYesMap[mapKey];
              if (i > 0) {
                gotvVoteYesPetitionSoql += ' OR GOTV_Vote_Yes_Petition__c = ';
              }
              if (gotvVoteYes) {
                gotvVoteYesPetitionSoql += `'${gotvVoteYes}'`;
                gotvVoteYesPetitionFilterDesc += `'${gotvVoteYes}'`;
              }
              else {
                gotvVoteYesPetitionSoql += ' null ';
                gotvVoteYesPetitionFilterDesc += 'null';
              }
              i++;
            }
          }

          if (filterName == 'GotvPlanType') {
            filterCnt++;
            gotvPlanTypeSoql = 'GOTV_Plan_Type__c = ';
            for (let i = 0; i < filterArray.length; i++) {
              gotvPlanType = filterArray[i];
              if (i > 0) {
                gotvPlanTypeSoql += ' OR GOTV_Plan_Type__c = ';
                gotvPlanTypeFilterDesc += ', ';
              }
              if (gotvPlanType) {
                gotvPlanTypeSoql += `'${gotvPlanType}'`;
                gotvPlanTypeFilterDesc += `${gotvPlanType}`;
              }
              else {
                gotvPlanTypeSoql += ' null ';
                gotvPlanTypeFilterDesc += `null`;
              }
            }
          }

          if (filterName == 'GotvChallenge') {
            filterCnt++;
            gotvChallengeSoql = 'GOTV_Challenge__c = ';
            for (let i = 0; i < filterArray.length; i++) {
              gotvChallenge = filterArray[i];
              if (i > 0) {
                gotvChallengeSoql += ' OR GOTV_Challenge__c = ';
                gotvChallengeFilterDesc += ', ';
              }
              if (gotvChallenge) {
                gotvChallengeSoql += `'${gotvChallenge}'`;
                gotvFilterDesc += `${gotvChallenge} `;
              }
              else {
                gotvChallengeSoql += ' null ';
                gotvFilterDesc += 'null ';
              }
            }
          }

          if (filterName == 'OwnerName') {
            filterCnt++;
            ownerSoql = 'OwnerId = ';
            for (let i = 0; i < filterArray.length; i++) {
              ownerName = filterArray[i];
              if (!ownerMap[ownerName]) {
                ownerId = null;
              }
              else {
                ownerId = ownerMap[ownerName].Id;
              }
              if (i > 0) {
                ownerSoql += ' OR OwnerId = ';
                ownerFilterDesc += ', ';
              }
              if (ownerId) {
                ownerSoql += `'${ownerId}'`;
                ownerFilterDesc += `${ownerName} `;
              }
              else {
                ownerSoql += ' null ';
                ownerFilterDesc += 'null ';
              }
            }
          }

          if (filterName == 'VC') {
            filterCnt++;
            assignedVcSoql = 'Assigned_to_VC__c = ';
            for (let i = 0; i < filterArray.length; i++) {
              vcName = filterArray[i];
              if (!vcMap[vcName]) {
                vcId = null;
              }
              else {
                vcId = vcMap[vcName].Id;
              }
              if (i > 0) {
                assignedVcSoql += ' OR Assigned_to_VC__c = ';
              }
              if (vcId) {
                assignedVcSoql += `'${vcId}'`;
                assignedVcFilterDesc += `${vcName} `;
              }
              else {
                assignedVcSoql += ' null ';
                assignedVcFilterDesc += 'null ';
              }
            }
          }

        }
      }
      if (filterCnt > 0) {
        filtersIcon.className       = 'icon-lock';
        universeButton.className    = 'allowed';
        filterResetButton.className = 'allowed';
        if (threeTouchStSoql) {
          filterSoqlArray.push(threeTouchStSoql);
          filterDescArray.push(stFilterDesc);
        }

        if (threeTouchVcSoql) {
          filterSoqlArray.push(threeTouchVcSoql);
          filterDescArray.push(vcFilterDesc);
        }

        if (threeTouchObSoql) {
          filterSoqlArray.push(threeTouchObSoql);
          filterDescArray.push(obFilterDesc);
        }

        if(gotvSlipSoql) {
            filterSoqlArray.push(gotvSlipSoql);
            filterDescArray.push(slFilterDesc);
        }

        if(gotvHardPullSoql) {
            filterSoqlArray.push(gotvHardPullSoql);
            filterDescArray.push(hpFilterDesc);
        }

        if(doNotCallSoql) {
          filterSoqlArray.push(doNotCallSoql);
          filterDescArray.push(dcFilterDesc);
        }

        if(icsSoql) {
          filterSoqlArray.push(icsSoql);
          filterDescArray.push(icsFilterDesc);
        }

        if(x1Soql) {
          filterSoqlArray.push(x1Soql);
          filterDescArray.push(x1FilterDesc);
        }

        if(gotvBoardChallengeSoql) {
          filterSoqlArray.push(gotvBoardChallengeSoql);
          filterDescArray.push(bcFilterDesc);          
        }

        if (gotvVoteBlockTimeSoql) {
          filterSoqlArray.push(gotvVoteBlockTimeSoql);
          filterDescArray.push('Vote Block:' + gotvVoteBlockTimeFilterDesc);
        }

        if (gotvAssessmentSoql) {
          filterSoqlArray.push(gotvAssessmentSoql);
          filterDescArray.push('Assessments:' + gotvAssessmentFilterDesc);
        }

        if (cardAssessmentSoql) {
          filterSoqlArray.push(cardAssessmentSoql);
          filterDescArray.push('Card Assessments:' + cardAssessmentFilterDesc);
        }

        if (verbalAssessmentSoql) {
          filterSoqlArray.push(verbalAssessmentSoql);
          filterDescArray.push('Verbal Assessments:' + verbalAssessmentFilterDesc);
        }

        if (assignedVcSoql) {
          filterSoqlArray.push(assignedVcSoql);
          filterDescArray.push('Vote Captain:' + assignedVcFilterDesc);
        }

        if (gotvVoteYesPetitionSoql) {
          filterSoqlArray.push(gotvVoteYesPetitionSoql);
          filterDescArray.push('Vote Yes:' + gotvVoteYesPetitionFilterDesc);
        }

        if (gotvPlanTypeSoql) {
          filterSoqlArray.push(gotvPlanTypeSoql);
          filterDescArray.push('Plan Type:' + gotvPlanTypeFilterDesc);
        }

        if (gotvGettableSoql) {
          filterSoqlArray.push(gotvGettableSoql);
          filterDescArray.push('Getable:' + gotvGettableFilterDesc);
        }

        if (gotvReconfirmedSoql) {
          filterSoqlArray.push(gotvReconfirmedSoql);
          filterDescArray.push('Reconfirmed:' + gotvReconfirmedFilterDesc);
        }

        if (gotvWorksEday1Soql) {
          filterSoqlArray.push(gotvWorksEday1Soql);
          filterDescArray.push('Works Eday1:' + gotvWorksEday1FilterDesc);
        }

        if (gotvWorksNightBeforeEday1Soql) {
          filterSoqlArray.push(gotvWorksNightBeforeEday1Soql);
          filterDescArray.push('Works Night B4:' + gotvWorksNightBeforeEday1FilterDesc);
        }

        if (workStatusSoql) {
          filterSoqlArray.push(workStatusSoql);
          filterDescArray.push('Work Status:' + workStatusFilterDesc);
        }
        
        if (ownerSoql) {
          filterSoqlArray.push(ownerSoql);
          filterDescArray.push('Owner:' + ownerFilterDesc);
        }

        filterJoin = filterSoqlArray.join(') And (');
        filterSoql = ` Where AccountId = '${selectedAccountId}' And ( ${filterJoin} )`;
        currentFilter.value = 'Select Count() From Contact ' + filterSoql;

        filterDescJoin = filterDescArray.join(',');
        universeDescInput.value = 'Current filters: ' + filterDescJoin;

        filterDescList = '<p><ul>'
        filterDescArray.forEach(function (element) {
          filterDescList += `<li>${element}</li>`;
        });
        filterDescList += '</ul></p>'
        filterLabel.innerHTML = 'Current Filters' + filterDescList;
      }
      else {
        filtersIcon.className        = 'icon-unlock';
        universeButton.className     = 'not-allowed';
        filterResetButton.className  = 'not-allowed';
      }
      recount('contactFilterChangeHandler');
    }

    function checkboxChangeHandler(event) {
      let refreshParams = { force: true };
      let fieldArray = event.target.id.split(' ');
      selectedContactId = fieldArray[0];
      changedField = fieldArray[1];
      changeTo = event.target.checked;
      selectedContactName = contactMap[selectedAccountId][selectedContactId].Name;
      updateSalesforce();
      updateGridCell(selectedContactId, changedField, changeTo);
      recount('checkboxChangeHandler');
    }

    function saveInsidePlanNotes(pNote) {
      changedField = 'GotvInsidePlanNotes'; // Global vars for updateSalesforce()
      changeTo = pNote;
      updateSalesforce();
      updateGridCell(selectedContactId, 'GotvInsidePlanNotes', pNote);
    }

    function saveOutsidePlanNotes(pNote) {
      changedField = 'GotvOutsidePlanNotes'; // Global vars for updateSalesforce()
      changeTo = pNote;
      updateSalesforce();
      updateGridCell(selectedContactId, 'GotvOutsidePlanNotes', pNote);
    }

    function saveSpecialPlanNotes(pNote) {
      changedField = 'GotvSpecialPlanNotes'; // Global vars for updateSalesforce()
      changeTo = pNote;
      updateSalesforce();
      updateGridCell(selectedContactId, 'GotvSpecialPlanNotes', pNote);
    }

    function saveConsolidatedNote(pNote) {
      changedField = 'NotesConsolidated'; // Global vars for updateSalesforce()
      changeTo = pNote;
      updateSalesforce();
      updateGridCell(selectedContactId, 'NotesConsolidated', pNote);
    }

  function saveTaskNotes(pTaskObj) {  
      return new Promise(function (resolve, reject) {
        let notesCombo = '';
          GotvCcController.updateTaskNote(pTaskObj, (result, event) => {
          if (event.status) {
            notify.log('Salesforce updated');
            updateCount++;
            if (updateCount == 1) {
              updateCountLabel.textContent = `(${updateCount} record updated)`;
            }
            else {
              updateCountLabel.textContent = `(${updateCount} records updated)`;
            }
            updateGridCell(selectedContactId, 'TaskActivityNotes', pTaskObj.Description);
            notesCombo += '[TaskActivityNotes]\n';
            notesCombo +=  pTaskObj.Description + '\n';
            if(selectedContactNode.data.GotvInsidePlanNotes) {
              notesCombo += '[Inside Plan Notes]\n';
              notesCombo +=  selectedContactNode.data.GotvInsidePlanNotes + '\n'
            }
            if(selectedContactNode.data.GotvOutsidePlanNotes) {
              notesCombo += '[Outside Plan Notes]\n';
              notesCombo +=  selectedContactNode.data.GotvOutsidePlanNotes + '\n'
            } 
            if(selectedContactNode.data.GotvSpecialPlanNotes) {
              notesCombo += '[Special Plan Notes]\n';
              notesCombo +=  selectedContactNode.data.GotvSpecialPlanNotes + '\n'
            }                       
            if(selectedContactNode.data.NotesConsolidated) {
              notesCombo += '[Consolidated Notes]\n';
              notesCombo += selectedContactNode.data.NotesConsolidated;
            }
            updateGridCell(selectedContactId, 'NotesCombo', notesCombo);
            resolve(result);
          }
          else {
            let eType = event.type;
            let eMsg = event.message;
            let eWhere = event.where;
            alert('Salesforce update error: ' + eMsg);
            console.log(eType);
            console.log(eMsg);
            if (eWhere != undefined) console.log(eWhere);
            reject(event);
          }
        })
      });
    }

    function updateSalesforce() {
      return new Promise(function (resolve, reject) {
        GotvCcController.updateContact(selectedContactId, changedField, changeTo, (result, event) => {
          if (event.status) {
            notify.log('Salesforce updated');
            updateCount++;
            if (updateCount == 1) {
              updateCountLabel.textContent = `(${updateCount} record updated)`;
            }
            else {
              updateCountLabel.textContent = `(${updateCount} records updated)`;
            }
            resolve(result);
          }
          else {
            let eType = event.type;
            let eMsg = event.message;
            let eWhere = event.where;
            alert('Salesforce update error: ' + eMsg);
            console.log(eType);
            console.log(eMsg);
            if (eWhere != undefined) console.log(eWhere);
            reject(event);
          }
        })
      });
    }

    function showAccountGrid() {
      if (accountGridOptions)
        accountGridOptions.api.destroy();

      accountGridOptions = {
        columnDefs: accountColDefs,
        rowData: accountDataArray,
        rowSelection: 'single',
        onSelectionChanged: accountSelectionHandler,
        onRowDoubleClicked: rowDoubleClickedHandler,
        enableSorting: true,
        enableFilter: true,
        showToolPanel: false,
        toolPanelSuppressRowGroups: true,
        toolPanelSuppressValues: true,
        toolPanelSuppressPivots: true,
        toolPanelSuppressPivotMode: true
      };
      new agGrid.Grid(accountGridDiv, accountGridOptions);
    }

    function addOption(dropDown, name, id) {
      let opt = document.createElement("option");
      opt.text = name;
      opt.value = id;
      dropDown.add(opt, null);
    }

    function populateVoteBlockDropdown() {
      allowedResponsesArray = [];
      while (voteBlockDropdown.hasChildNodes()) {
        voteBlockDropdown.removeChild(voteBlockDropdown.childNodes[0]);
      }

      addOption(voteBlockDropdown, 'Vote Block', '');
      if (accountAllowedResponsesMap[selectedAccountId]) {
        allowedResponsesArray = accountAllowedResponsesMap[selectedAccountId].Allowed;
        for (let value of allowedResponsesArray) {
          addOption(voteBlockDropdown, value, value);
        }
      }
    }

    function populateViewsDropdown(pSelectRececnt) {
      let vId,vName,vType,vClass,vUserId,ptr = 1, currentSelection = 0;
      viewsArray = [];
      while (viewsDropdown.hasChildNodes()) {
        viewsDropdown.removeChild(viewsDropdown.childNodes[0]);
      }
      addOption(viewsDropdown, 'Everything View', '0');
      if(viewsMap) {
        for (let mapKey in viewsMap) {
          vClass = viewsMap[mapKey].ViewClass;
          if(vClass == selectedMainView) {
            vType   = viewsMap[mapKey].ViewType;
            vUserId = viewsMap[mapKey].ViewUserId;
            if(vType == 'G') {
              viewsArray.push(viewsMap[mapKey]);
              ptr++;
            } 
            if(vType == 'P' && vUserId == userId) {
              viewsArray.push(viewsMap[mapKey]);
              ptr++;
            }
          }
        }

        for(let i=0;i<viewsArray.length;i++) {
          vName = viewsArray[i].ViewName;
          vId   = viewsArray[i].ViewId;
          addOption(viewsDropdown, vName, i);
          if(vId == selectedViewId) currentSelection = i+1;
        }
        if (pSelectRececnt) {
          viewsDropdown.selectedIndex = currentSelection;
        }
      }
    }

    function populateUniverseDropdown(pSelectRececnt) {
      let uName, ptr = 1;
      universeArray = [];
      while (universeDropdown.hasChildNodes()) {
        universeDropdown.removeChild(universeDropdown.childNodes[0]);
      }

      if (universeMap[selectedAccountId]) {
        addOption(universeDropdown, 'Universe', '0');
        let thisMap = universeMap[selectedAccountId];
        for (let mapKey in thisMap) {
          if(thisMap[mapKey].UniverseType == selectedMainView) {
            universeArray.push(thisMap[mapKey]);
            uName = thisMap[mapKey].UniverseName;
            addOption(universeDropdown, uName, ptr);
            ptr++;
          }
        }
        if (pSelectRececnt) {
          universeDropdown.selectedIndex = ptr;
        }
      }
      else {
        addOption(universeDropdown, 'No Universes', '0');
      }
    }

    function rowDoubleClickedHandler() {
      let selectedNode    = accountGridOptions.api.getSelectedNodes()[0];
      selectedAccount     = selectedNode.data.AccountName;
      selectedAccountId   = selectedNode.data.Id;
      updateCount         = 0;
      selectAccountLabel.textContent = selectedAccount;
      
      updateCountLabel.textContent   = '(0 records updated)';
      please1.className            = 'NoData hide';
      please2.className            = 'NoData hide';
      please3.className            = 'NoData hide';
      tab2Content.className        = 'show';
      tab3Content.className        = 'show';
      checkBoxFilterDiv.className  = 'show';
      radioFilterDiv.className     = 'show';
      xMatchButton.classList       = 'Btn';
      populateVoteBlockDropdown();
      populateUniverseDropdown();
      populateViewsDropdown();
      
      console.log(`Fetching ${selectedAccount} contacts from Salesforce`);
      showLoadingMsg(true);
      if(userLevel == 'Admin') {
        showXmatchResults();    // sets hideRadio1
        showLicensureResults(); // sets hideRadio2      
        if(hideRadio1 && hideRadio2) {
          matchButton.className  = 'hide';
        } else {
          matchButton.className  = 'Btn';
        }
      }

      if(selectedMainView == 'D') {
        getDataEntryContactsForAccount(selectedAccountId);
      } else {
        getGotvContactsForAccount(selectedAccountId);
      }
 
    }

    function showXmatchResults() {
      let rec;
      
      hideRadio1       = false;
      tab4Id.className = 'tabs__link NoDisplay';
      tab4.className   = 'tabs__section NoDisplay';

      if(xMatchDetailMap[selectedAccountId]) {
        if(xMatchDetailMap[selectedAccountId]['Contact']) {
          hideRadio1 = true; // If Xmatch has been run for this Emp, can't let user re-run until they have clicked reset, which invokes a batch truncate.
          rec = xMatchDetailMap[selectedAccountId]['Contact'];
          if(rec.CompletedCnt > 0 && rec.HoldingCnt + rec.QueuedCnt + rec.PreparingCnt + rec.ProcessingCnt + rec.AbortedCnt + rec.FailedCnt == 0)  {
            getXmatches();
            tab4Id.className      = 'tabs__link';
            tab4.className        = 'tabs__section';
            resetXmatchContactButton.className = 'show';
          }
        }
      }

      if(hideRadio1) {
//      xmatchRadio2.className = 'hide';
        xmatchRadio1.disabled = true;
        XmatchRadio1Label.className = 'RadioDisabled';
      } else {
        xmatchRadio1.disabled = false;
        XmatchRadio1Label.className = '';
      }
    }

    function showLicensureResults() {
      let rec;

      hideRadio2       = false;
      tab5Id.className = 'tabs__link NoDisplay';
      tab5.className   = 'tabs__section NoDisplay';

      if(xMatchDetailMap[selectedAccountId]) {
        if(xMatchDetailMap[selectedAccountId]['Licensure__c']) {
          hideRadio2 = true; // If Xmatch has been run for this Emp, can't let user re-run until they have clicked reset, which invokes a batch truncate.
          rec = xMatchDetailMap[selectedAccountId]['Licensure__c'];
          if(rec.CompletedCnt > 0 && rec.HoldingCnt + rec.QueuedCnt + rec.PreparingCnt + rec.ProcessingCnt + rec.AbortedCnt + rec.FailedCnt == 0) {
            getLicensureXMatches();
            tab5Id.className      = 'tabs__link';
            tab5.className        = 'tabs__section';
            resetXmatchLicensureButton.className = 'show'; 
          } 
        }
      }

      if(hideRadio2) {
//        xmatchRadio2.className = 'hide';
        xmatchRadio2.disabled = true;
        XmatchRadio2Label.className = 'RadioDisabled';
      } else {
        xmatchRadio2.disabled = false;
        XmatchRadio2Label.className = '';
      }

    }

    function accountSelectionHandler() {
      selectedAccountNode = accountGridOptions.api.getSelectedNodes()[0];
      selectedAccount     = selectedAccountNode.data.AccountName;
      selectedAccountId   = selectedAccountNode.data.Id;
      selectAccountLabel.textContent = selectedAccount;
    }

    function contactSelectionHandler() {
      let test = contactGridOptions.api.getSelectedNodes();
      selectedContactNode = {};
      selectedContactName = selectedContactId = '';
      if (test.length > 0) {
        selectedContactNode = contactGridOptions.api.getSelectedNodes()[0];
        selectedContactName = selectedContactNode.data.FirstName + selectedContactNode.data.LastName;
        selectedContactId   = selectedContactNode.data.Id;

        if(taskNoteMap[selectedContactId]) {
          let task = taskNoteMap[selectedContactId];
          taskNotesInput.value        = task.Description;
          taskNotesDateInput.value    = task.ActivityDate;
          taskNotesSubjectInput.value = task.Subject;
        } else {
          taskNotesInput.value        = '';
          taskNotesDateInput.value    = '';
          taskNotesSubjectInput.value = '';
        }

      }
    }

    function getRecentContactsForAccount(id, dtA) {

      if(selectedMainView == 'D') {
        getDataEntryContactData(id, dtA).then(contactData => {
          processRecentContacts(contactData);
        }).catch(error => {
          console.log('Error' + error);
        });
      } else {
        getGotvContactData(id, dtA).then(contactData => {
        processRecentContacts(contactData);
        }).catch(error => {
          console.log('Error' + error);
        });
      }

    }

    function getDataEntryContactsForAccount(id) {
      getDataEntryContactData(id, null).then(contactData => {
        processContacts(contactData);
      }).then(function () {
        notify.log('Retrieved Contacts from Salesforce....');
        showDataEntryContactGrid();
        // Note not calling recount() here, as doing initial api.setSort is triggering contactSortChangeHandler, which does recount.
      }).catch(error => {
        console.log('Error' + error);
      });
    }

    function getDataEntryContactData (id, dtA) {
      return new Promise(function (resolve, reject) {
        GotvCcController.getDataEntryContactData(id, dtA, userLevel, userId, (result, event) => {
          if (event.status) {
            resolve(result);
          }
          else {
            reject(event);
          }
        }, { buffer: false });
      });      
    }

    function getGotvContactsForAccount(id) {
      getGotvContactData(id, null).then(contactData => {
        processContacts(contactData);
      }).then(function () {
        notify.log('Retrieved Contacts from Salesforce....');
        showGotvContactGrid();
        // Note: not calling recount() here, as doing initial api.setSort is triggering contactSortChangeHandler, which does recount.
      }).catch(error => {
        console.log('Error' + error);
      });
    }

    function getGotvContactData (id, dtA) {
      return new Promise(function (resolve, reject) {
        GotvCcController.getGotvContactData(id, dtA, userLevel, userId, (result, event) => {
          if (event.status) {
            resolve(result);
          }
          else {
            reject(event);
          }
        }, { buffer: false });
      });      
    }

    function updateGridRange(pVoteBlock) {
      itemsToUpdate = [];
      let changed = false;
      let updateRes;
      selectedNodes.forEach(function (value, index) {
        let rowNodeData = value.data;
        rowNodeData.GotvVoteBlockTime = pVoteBlock;
        itemsToUpdate.push(rowNodeData);
      });
      updateRes = contactGridOptions.api.updateRowData({ update: itemsToUpdate });
    }

    function updateGridCell(pId, pField, pValue) {
      let changed = false;
      let redraw = false;
      let rowNode = contactGridOptions.api.getRowNode(pId);
      let updateRes;
      itemsToUpdate = [];
      if (rowNode) {

        if (pField == '[AC]') {
          rowNode.data.Activist = pValue;
          changed = true;
        }  

        if (pField == '[BA]') {
          rowNode.data.MailingBa = pValue;
          changed = true;
        }  

        if (pField == '[BC]') {
          rowNode.data.GotvBoardChallenge = pValue;
          changed = true;
        }
        
        if (pField == '[BO]') {
          rowNode.data.GotvOffBothDays = pValue;
          changed = true;
        }        

        if (pField == '[CA]') {
          rowNode.data.Captain = pValue;
          changed = true;
        }  

        if (pField == '[CU]') {
          rowNode.data.CrossMatchUHW = pValue;
          changed = true;
        }  

        if (pField == '[CV]') {
          rowNode.data.VoteCaptain = pValue;
          changed = true;
        }  

        if (pField == '[DC]') {
          rowNode.data.DoNotCall = pValue;
          changed = true;
        }

        if (pField == '[GT]') {
          rowNode.data.GotvGettable = pValue;
          changed = true;
        }

        if (pField == '[HP]') {
          rowNode.data.GotvHardPull = pValue;
          changed = true;
        }

        if (pField == '[IB]') {
          rowNode.data.InCurrentBU = pValue;
          changed = true;
        } 

        if (pField == '[IL]') {
          rowNode.data.ID_Leaders__c = pValue;
          changed = true;
        } 

        if (pField == '[IN]') {
          rowNode.data.Inoculated__c = pValue;
          changed = true;
        } 

        if (pField == '[N1]') {
          rowNode.data.GotvWorksNightBeforeEday1 = pValue;
          changed = true;
        }

        if (pField == '[N2]') {
          rowNode.data.GotvWorksNightBeforeEday2 = pValue;
          changed = true;
        }

        if (pField == '[OB]') {
          rowNode.data.ThreeTouchOB = pValue;
          changed = true;
        }
        
        if (pField == '[OC]') {
          rowNode.data.OcMember = pValue;
          changed = true;
        } 

        if (pField == '[PR]') {
          rowNode.data.PhotoReleaseSigned = pValue;
          changed = true;
        } 

        if (pField == '[RC]') {
          rowNode.data.GotvReconfirmed = pValue;
          changed = true;
        }

        if (pField == '[SC]') {
          rowNode.data.Schedule_In_Hand__c = pValue;
          changed = true;
        } 

        if (pField == '[SL]') {
          rowNode.data.GotvSlip = pValue;
          changed = true;
        }

        if (pField == '[SP]') {
          rowNode.data.GotvSpecialPlan = pValue;
          changed = true;
        }

        if (pField == '[ST]') {
          rowNode.data.ThreeTouchST = pValue;
          changed = true;
        }

        if (pField == '[TP]') {
          rowNode.data.GotvTookPhoto = pValue;
          changed = true;
        } 

        if (pField == '[UC]') {
          rowNode.data.GotvUHWChallenge = pValue;
          changed = true;
        } 

        if (pField == '[VC]') {
          rowNode.data.ThreeTouchVC = pValue;
          changed = true;
        }

        if (pField == '[W1]') {
          rowNode.data.GotvWorksEday1 = pValue;
          changed = true;
        }

        if (pField == '[W2]') {
          rowNode.data.GotvWorksEday2 = pValue;
          changed = true;
        }        

        if (pField == 'GotvInsidePlanNotes') {
          rowNode.data.GotvInsidePlanNotes = pValue;
          changed = true;
          redraw = true;
        }

        if (pField == 'GotvOutsidePlanNotes') {
          rowNode.data.GotvOutsidePlanNotes = pValue;
          changed = true;
          redraw = true;
        }
        if (pField == 'GotvSpecialPlanNotes') {
          rowNode.data.GotvSpecialPlanNotes = pValue;
          changed = true;
          redraw = true;
        }
        if (pField == 'TaskActivityNotes') {
          rowNode.data.TaskActivityNotes = pValue;
          changed = true;
          redraw = true;
        }
        
        if (pField == 'GotvPlanType') {
          rowNode.data.GotvPlanType = pValue;
          changed = true;
        }
        if (pField == 'CardAssessment') {
          rowNode.data.CardAssessment = pValue;
          changed = true;
        }

        if (pField == 'NotesConsolidated') {
          rowNode.data.NotesConsolidated = pValue;
          changed = true;
          redraw = true;
        }

        if (pField == 'VerbalAssessment') {
          rowNode.data.VerbalAssessment = pValue;
          changed = true;
        }
        if (changed) {
          let cnt = 0;
          if (rowNode.data.ThreeTouchST) cnt++;
          if (rowNode.data.ThreeTouchVC) cnt++;
          if (rowNode.data.ThreeTouchOB) cnt++;
          itemsToUpdate.push(rowNode.data);
          if (redraw) {
            updateRes = contactGridOptions.api.redrawRows();
          } else {
            updateRes = contactGridOptions.api.updateRowData({ update: itemsToUpdate });
          }
        }
      }
    }

    function processRecentContacts(results) {
      return new Promise(function (resolve, reject) {
        let i, srcLen, srcRec, matched,phoneToUse;
        let rowNodeData, updateRes;
        itemsToUpdate = [];
        matched = false;
        srcLen = results.length;

        // AssignedVcName NoEdit (edit Id)
        // GotvAssess NoEdit (formula)
        
        if (srcLen > 0) {
          for (i = 0; i < srcLen; i++) {
            srcRec = results[i];
            if (contactMap[selectedAccountId][srcRec.Id]) { // Check we have contact, just in case new one was added.
              let rowNode = contactGridOptions.api.getRowNode(srcRec.Id);
              rowNodeData = rowNode.data;
              matched = true;

              rowNodeData.Captain              = srcRec.Captain__c;
              rowNodeData.CardAssessment       = clean(srcRec.Card_Assessment__c);              
              rowNodeData.Department           = srcRec.Department;
              rowNodeData.DoNotCall            = srcRec.DoNotCall;
              rowNodeData.FirstName            = toProperCase(srcRec.FirstName);              
              rowNodeData.LastName             = toProperCase(srcRec.LastName);              
              rowNodeData.NotesConsolidated    = clean(srcRec.Notes_Consolidated__c);
//            rowNodeData.NotesCombo - postpone for now.           
              rowNodeData.Title                = toProperCase(srcRec.Title);                            

              if(selectedMainView == 'G') {
                rowNodeData.AssistantName      = srcRec.AssistantName;
                rowNodeData.AssignedToVcName   = clean(srcRec.Assigned_to_VC_Name__c);
                rowNodeData.BU                 = srcRec.BU__c;
                rowNodeData.CaptainsOc         = srcRec.Captain_s_OC__c;
//              rowNodeData.CardAssess         = srcRec.Card_Assess__c (formula field)
                rowNodeData.CrossMatchUHW      = srcRec.Cross_Match_UHW__c;
                rowNodeData.CrossMatchFacility = srcRec.CrossMatchFacility__c;
                rowNodeData.DignityRegion      = srcRec.Dignity_Region__c;
                rowNodeData.DignitySubRegion   = srcRec.Dignity_Sub_Region__c;
                if (srcRec.GOTV_Exact_Vote_Time__c) {
                  rowNodeData.GotvExactVoteTime = new Date(srcRec.GOTV_Exact_Vote_Time__c).toLocaleString('en-US', dateOptions2);
                }

                rowNodeData.GotvAssessment     = clean(srcRec.GOTV_Assessment__c);

                rowNodeData.GotvBoardChallenge = srcRec.GOTV_Board_Challenge__c;
                if(srcRec.GOTV_Card_Signed_Date__c) {
                  rowNodeData.GotvCardSignedDate      = new Date(srcRec.GOTV_Card_Signed_Date__c).toLocaleString('en-US', dateOptions1);

                }
                rowNodeData.GotvChallenge             = srcRec.GOTV_Challenge__c;
                if (srcRec.GOTV_Exact_Vote_Time__c) {
                  rowNodeData.GotvExactVoteTime       = new Date(srcRec.GOTV_Exact_Vote_Time__c).toLocaleString('en-US', dateOptions2);
                }              
                rowNodeData.GotvGettable              = srcRec.GOTV_Gettable__c;
                rowNodeData.GotvHardPull              = srcRec.GOTV_Hard_Pull__c;
                rowNodeData.GotvHardPullReason        = srcRec.GOTV_Hard_Pull_Reason__c;
                rowNodeData.GotvInsidePlanNotes       = clean(srcRec.GOTV_Inside_Plan_Notes__c);
                rowNodeData.GotvHardPull              = srcRec.GotvOffBothDays;
                rowNodeData.GotvOutsidePlanNotes      = clean(srcRec.GOTV_Outside_Plan__c);
                rowNodeData.GotvPlanType              = srcRec.GOTV_Plan_Type__c;
                rowNodeData.GotvReconfirmed           = srcRec.Reconfirmed_GOTV__c;
                rowNodeData.GotvShiftScheduler        = toProperCase(srcRec.GOTV_Shift_Scheduler__c);
                rowNodeData.GotvSlip                  = srcRec.GOTV_Slip__c;
                rowNodeData.GotvSpecialPlan           = srcRec.GOTV_Special_Plan__c;
                rowNodeData.GotvSpecialPlanNotes      = clean(srcRec.GOTV_Special_Plan_Notes__c);
                rowNodeData.GotvTookPhoto             = srcRec.GOTV_Took_Photo__c;
                rowNodeData.GotvUHWChallenge          = srcRec.GOTV_UHW_Challenge__c;
                rowNodeData.GotvVoteBlockTime         = clean(srcRec.GOTV_Vote_Block_Time__c); // Overridable copy of vote block survey response
                rowNodeData.GotvVoteYesPetition       = clean(srcRec.GOTV_Vote_Yes_Petition__c);
                rowNodeData.GotvWhereAfterVoting      = clean(srcRec.GOTV_Where_After_Voting__c);
                rowNodeData.GotvWhereBeforeVoting     = clean(srcRec.GOTV_Where_Before_Voting__c);
                rowNodeData.GotvWorksEday1            = srcRec.GOTV_Works_Eday_1__c;
                rowNodeData.GotvWorksEday2            = srcRec.GOTV_Works_Eday2__c;
                rowNodeData.GotvWorksNightBeforeEday1 = srcRec.GOTV_Works_Night_Before_Eday1__c;

                rowNodeData.IdLeaders                 = srcRec.ID_Leaders__c;
                rowNodeData.Inoculated                = srcRec.Inoculated__c;
                
                if ('New_Org_Card_Signed_By__r' in srcRec) {
                  if (srcRec.New_Org_Card_Signed_By__r) {
                    rowNodeData.NewOrgCardSignedByName = srcRec.New_Org_Card_Signed_By__r.Name;
                  }
                }              
                rowNodeData.OcMember               = srcRec.OC_Member__c;
//              rowNodeData.OwnerName NoEdit (field not writable, change ID)
                phoneToUse = '';
                if (srcRec.MobilePhone)
                  phoneToUse = phoneFormat(srcRec.MobilePhone);
                else if (srcRec.HomePhone)
                  phoneToUse = phoneFormat(srcRec.HomePhone);
                else if (srcRec.Phone)
                  phoneToUse = phoneFormat(srcRec.Phone);
                rowNodeData.PhoneToUse             = phoneToUse;
                rowNodeData.PhotoReleaseSigned     = srcRec.Photo_Release_Signed__c;
                rowNodeData.PurpleUp               = srcRec.Purple_UP__c;
                rowNodeData.Shift                  = toProperCase(srcRec.GOTV_Shift_Scheduler__c);
                if(srcRec.Three_Touch_ST__c && srcRec.Three_Touch_VC__c && srcRec.Three_Touch__c)
                  rowNodeData.StAndVcAndObChecked  = true;
                if(srcRec.Three_Touch_ST__c && srcRec.Three_Touch_VC__c)
                  rowNodeData.StAndVcChecked = true;                
                
                rowNodeData.Staffing17        = srcRec.Staffing_17__c;
                rowNodeData.StickerUpActions  = srcRec.Sticker_Up_Actions__c;

//              rowNodeData.TaskActivityNotes postpone for now
                rowNodeData.ThreeTouchST     = srcRec.Three_Touch_ST__c;
                rowNodeData.ThreeTouchVC     = srcRec.Three_Touch_VC__c;
                rowNodeData.ThreeTouchOB     = srcRec.Three_Touch__c;

                rowNodeData.VerbalAssessment          = clean(srcRec.Verbal_Assessment__c);
                rowNodeData.VoteCaptain               = srcRec.Vote_Captain__c;
                rowNodeData.WorkDaysAtPrimaryWorksite = srcRec.Work_Days_at_Primary_Worksite__c;
                rowNodeData.WorksNightBeforeEday2     = srcRec.Works_Night_Before_Eday2__c;
              
                if ('Survey_Responses__r' in srcRec) {
                  if (srcRec.Survey_Responses__r) {
                    rowNodeData.VoteBlock = srcRec.Survey_Responses__r[0].Response_Value__c;
                    if (rowNodeData.VoteBlock.trim() == '' || rowNodeData.VoteBlock == null) {
                      rowNodeData.VoteBlock = '';
                    }
                  }
                }

              } else {

                rowNodeData.Activist            = srcRec.Activist__c; 
                rowNodeData.AssignedVcId        = srcRec.Assigned_to_VC__c;
                if ('AssignedLeader__r' in srcRec) {
                  if (srcRec.AssignedLeader__r) {
                    rowNodeData.AssignedLeaderName = srcRec.AssignedLeader__r.Name;
                  }
                }                
                rowNodeData.AssistantName       = srcRec.AssistantName;
                rowNodeData.BU                  = srcRec.BU__c;
                rowNodeData.BuildOcSupport      = srcRec.Build_OC_Support__c;
                rowNodeData.CaptainsOc          = srcRec.Captain_s_OC__c;
                rowNodeData.CellPhone           = phoneFormat(srcRec.MobilePhone);
                rowNodeData.CrossMatchUHW         = srcRec.Cross_Match_UHW__c;
                rowNodeData.rossMatchFacility   = srcRec.CrossMatchFacility__c;
                rowNodeData.DialysisBuildOc     = srcRec.Dialysis_Build_OC__c;
                rowNodeData.DialysisEmployer    = srcRec.Dialysis_Employer__c;
                rowNodeData.DialysisPhases      = srcRec.Dialysis_Phases__c;
                rowNodeData.DignityRegion       = srcRec.Dignity_Region__c;
                rowNodeData.DignitySubRegion    = srcRec.Dignity_Sub_Region__c;
                rowNodeData.DivSubRegion        = srcRec.Div_Sub_Region__c;
                rowNodeData.Division            = srcRec.Division__c;
                rowNodeData.HomePhone           = phoneFormat(srcRec.HomePhone);
  
                rowNodeData.IdLeaders           = srcRec.ID_Leaders__c;
                rowNodeData.InCurrentBU         = srcRec.In_Current_BU__c;
                rowNodeData.Inoculated          = srcRec.Inoculated__c;
                rowNodeData.LicListPhone        = phoneFormat(srcRec.Lic_List_Phone__c);
                rowNodeData.MailingBa           = srcRec.Mailing_BA__c;
                rowNodeData.MailingCity         = srcRec.MailingCity;
                rowNodeData.MailingZip          = srcRec.MailingPostalCode;
                rowNodeData.MailingState        = srcRec.MailingState;
                rowNodeData.MailingStreet       = srcRec.MailingStreet; 
                
                rowNodeData.OcMember            = srcRec.OC_Member__c;
                rowNodeData.OtherPhone          = phoneFormat(srcRec.OtherPhone);
                rowNodeData.Phone               = phoneFormat(srcRec.Phone);              
                rowNodeData.PhotoReleaseSigned  = srcRec.Photo_Release_Signed__c;
                rowNodeData.ScheduleInHand      = srcRec.Schedule_In_Hand__c;
                if ('Staffing_17_Collected_By__r' in srcRec) {
                  if (srcRec.Staffing_17_Collected_By__r) {
                    rowNodeData.Staffing17CollectedByName = srcRec.Staffing_17_Collected_By__r.Name;
                  }
                }              

                rowNodeData.WorkStatus          =  srcRec.Work_Status__c;
                rowNodeData.Worksite            = srcRec.Worksite__c;

              }
              itemsToUpdate.push(rowNodeData);
            }
          }
          if (matched) {
            updateRes = contactGridOptions.api.updateRowData({ update: itemsToUpdate });
            recount('processRecentContacts');
          }
        } else {
          console.log(`No recent changes for ${selectedAccount}`);
        }
        resolve('OK');
      })
    }

    function processContacts(results) {
      return new Promise(function (resolve, reject) {
        let i, len, rec, mapKey, buCount, name, phoneToUse,voteBlock;
        let id, accountId, lastName, firstName, department, division, title, cellPhone, homePhone, phone, doNotCall, shift;
        let mailingBa, mailingStreet,mailingCity,mailingState,mailingZip,ownerId,ownerName;
        let signedMembershipCardBy, signedMembershipCardDate, signedMembershipCard;
        let threeTouchST, threeTouchVC, threeTouchOB, gotvReconfirmed, gotvAssessment, gotvVoteYesPetition,gotvAssess,gotvBoardChallenge,gotvCardSignedDate;
        let gotvExactVoteTime, gotvInsidePlanNotes, gotvOffBothDays, gotvOutsidePlanNotes, gotvPlanType, gotvShiftScheduler, gotvSlip, gotvSpecialPlanNotes, gotvSpecialPlan;
        let gotvUHWChallenge, gotvWhereBeforeVoting, gotvWhereAfterVoting, gotvWorksNightBeforeEday1,worksNightBeforeEday2;
        let gotvWorksEday1, gotvWorksEday2, assignedVcId, assignedVcName, gotvGettable, gotvVoteBlockTime, cardAssessment, verbalAssessment;
        let gotvHardPullReason, voteCaptain,notesConsolidated,notesCombo;
        let stAndVcChecked,stAndVcAndObChecked;
        let gotvHardPull,gotvChallenge,cardAssess,assistantName;
        let activist,buildOcSupport,bu,captain,captainsOc,crossMatchUHW,crossMatchFacility,dialysisBuildOc,dialysisEmployer,dialysisPhases,divSubRegion,idLeaders,inCurrentBU,assignedLeader,assignedLeaderName,licListPhone;
        let subject,ocMember,otherPhone,photoReleaseSigned,dignityRegion,scheduleInHand,staffing17,dignitySubRegion,gotvTookPhoto,workDaysAtPrimaryWorksite,workStatus,worksite,inoculated,staffing17CollectedBy,newOrgCardSignedByName;
        let lastModifiedDate, staffing17CollectedByName, purpleUp, stickerUpActions, taskActivityNotes, taskRec, taskObj, taskRecOwner,taskRecLastModifiedBy, worksiteAddInfo, loa,x1, ics;
        let taskId, taskAccountId, taskActivityDate, taskSubject, taskDescription, taskLastModifiedDate,taskLastModifiedById,taskLastModifiedByName,taskOwnerName,taskOwnerId, taskType, taskWhoId

        currentGotvAssessmentsMap     = {};
        currentCardAssessmentMap      = {};
        currentVerbalAssessmentMap    = {};
        contactMap[selectedAccountId] = {};
        contactDataArray              = [];
        contactCount = slCount = 0;
        len = results.length;

        for (i = 0; i < len; i++) {
          id = accountId = buCount = name = lastName = firstName = department = division = title = phoneToUse = cellPhone = homePhone = phone = doNotCall = shift = signedMembershipCardBy = signedMembershipCardDate = threeTouchST = threeTouchVC = threeTouchOB = ownerId = ownerName = assignedVcId = assignedVcName = '';
          gotvReconfirmed = gotvAssessment = gotvVoteYesPetition = gotvBoardChallenge = gotvCardSignedDate = gotvExactVoteTime = gotvInsidePlanNotes = gotvOffBothDays = gotvOutsidePlanNotes = gotvPlanType = gotvShiftScheduler = gotvSlip = gotvSpecialPlanNotes = gotvSpecialPlan = gotvUHWChallenge = gotvWhereBeforeVoting = gotvWhereAfterVoting = gotvWorksNightBeforeEday1 = gotvWorksEday1 = gotvGettable = gotvVoteBlockTime = '';
          voteBlock = cardAssessment = verbalAssessment = notesCombo = workStatus = worksite = worksiteAddInfo = assignedLeader = assignedLeaderName = newOrgCardSignedByName = '';
          gotvHardPull = gotvChallenge = cardAssess = staffing17CollectedByName = purpleUp = stickerUpActions = taskActivityNotes = '';
          stAndVcChecked = stAndVcAndObChecked = signedMembershipCard =  false;
          rec = results[i];

          if (rec) {
            contactCount++;
            id                        = rec.Id;
            accountId                 = rec.AccountId;
            firstName                 = toProperCase(rec.FirstName);
            lastName                  = toProperCase(rec.LastName);
            title                     = toProperCase(rec.Title);
            department                = toProperCase(rec.Department);
            division                  = toProperCase(rec.Division__c);
            cellPhone                 = phoneFormat(rec.MobilePhone);
            homePhone                 = phoneFormat(rec.HomePhone);
            phone                     = phoneFormat(rec.Phone);
            shift                     = toProperCase(rec.Shift__c);
            doNotCall                 = rec.DoNotCall                        || false;
            threeTouchST              = rec.Three_Touch_ST__c                || false;
            threeTouchVC              = rec.Three_Touch_VC__c                || false;
            threeTouchOB              = rec.Three_Touch__c                   || false;
            signedMembershipCardBy    = rec.Signed_Membership_Card_By__c     || '';
            signedMembershipCard      = rec.Signed_Membership_Card__c        || false;            

            gotvBoardChallenge        = rec.GOTV_Board_Challenge__c          || false;
            gotvOffBothDays           = rec.GOTV_Off_Both_Days__c            || false;
            gotvReconfirmed           = rec.Reconfirmed_GOTV__c              || false;
            gotvSlip                  = rec.GOTV_Slip__c                     || false;
            gotvSpecialPlan           = rec.GOTV_Special_Plan__c             || false;
            gotvUHWChallenge          = rec.GOTV_UHW_Challenge__c            || false;
            gotvWorksNightBeforeEday1 = rec.GOTV_Works_Night_Before_Eday1__c || false;
            worksNightBeforeEday2     = rec.Works_Night_Before_Eday2__c      || false;
            gotvWorksEday1            = rec.GOTV_Works_Eday_1__c             || false;
            gotvWorksEday2            = rec.GOTV_Works_Eday2__c              || false;
            gotvGettable              = rec.GOTV_Gettable__c                 || false;
            gotvHardPull              = rec.GOTV_Hard_Pull__c                || false;
            gotvInsidePlanNotes       = clean(rec.GOTV_Inside_Plan_Notes__c);
            gotvOutsidePlanNotes      = clean(rec.GOTV_Outside_Plan__c);
            gotvPlanType              = rec.GOTV_Plan_Type__c                || '';
            gotvShiftScheduler        = toProperCase(rec.GOTV_Shift_Scheduler__c);
            gotvSpecialPlanNotes      = clean(rec.GOTV_Special_Plan_Notes__c);
            ownerId                   = rec.Owner.Id                         || '';
            ownerName                 = rec.Owner.Name                       || '';
            assignedVcId              = rec.Assigned_to_VC__c                || '';
            assignedVcName            = rec.Assigned_to_VC_Name__c           || '';
            division                  = rec.Division__c                      || '';
            gotvAssess                = rec.GOTV_Assess__c                   || '';
            gotvChallenge             = rec.GOTV_Challenge__c                || '';
            gotvBoardChallenge        = rec.GOTV_Board_Challenge__c          || false;
            mailingBa                 = rec.Mailing_BA__c                    || false;
            mailingStreet             = toProperCase(rec.MailingStreet);
            mailingCity               = toProperCase(rec.MailingCity);
            mailingState              = rec.MailingState                     || '';
            mailingZip                = rec.MailingPostalCode                || '';
            gotvHardPullReason        = rec.GOTV_Hard_Pull_Reason__c         || '';
            voteCaptain               = rec.Vote_Captain__c                  || '';
            cardAssessment            = clean(rec.Card_Assessment__c);
            verbalAssessment          = clean(rec.Verbal_Assessment__c);
            gotvAssessment            = clean(rec.GOTV_Assessment__c);
            gotvVoteYesPetition       = clean(rec.GOTV_Vote_Yes_Petition__c);
            gotvWhereAfterVoting      = toProperCase(clean(rec.GOTV_Where_After_Voting__c));
            gotvWhereBeforeVoting     = toProperCase(clean(rec.GOTV_Where_Before_Voting__c));
            gotvVoteBlockTime         = clean(rec.GOTV_Vote_Block_Time__c); // Overridable copy of vote block survey response
            notesConsolidated         = clean(rec.Notes_Consolidated__c);

            assistantName             = rec.AssistantName                    || '';
            activist                  = rec.Activist__c                      || '';
            bu                        = rec.BU__c                            || '';
            buildOcSupport            = rec.Build_OC_Support__c              || '';
            captain                   = rec.Captain__c                       || '';
            captainsOc                = rec.Captain_s_OC__c                  || '';
            cardAssess                = rec.Card_Assess__c                   || '';            
            crossMatchUHW             = rec.Cross_Match_UHW__c               || '';
            crossMatchFacility        = rec.CrossMatchFacility__c            || '';
            dialysisBuildOc           = rec.Dialysis_Build_OC__c             || '';
            dialysisEmployer          = rec.Dialysis_Employer__c             || '';
            dialysisPhases            = rec.Dialysis_Phases__c               || '';
            divSubRegion              = rec.Div_Sub_Region__c                || '';
            idLeaders                 = rec.ID_Leaders__c                    || '';
            inCurrentBU               = rec.In_Current_BU__c                 || '';
            assignedLeader            = rec.AssignedLeader__c                || '';
            licListPhone              = phoneFormat(rec.Lic_List_Phone__c);
            subject                   = toProperCase(rec.Subject__c);
            ocMember                  = rec.OC_Member__c                     || false;
            otherPhone                = rec.OtherPhone                       || '';
            photoReleaseSigned        = rec.Photo_Release_Signed__c          || '';
            dignityRegion             = rec.Dignity_Region__c                || '';
            scheduleInHand            = rec.Schedule_In_Hand__c              || '';
            staffing17                = rec.Staffing_17__c                   || '';
            dignitySubRegion          = rec.Dignity_Sub_Region__c            || '';
            gotvTookPhoto             = rec.GOTV_Took_Photo__c               || '';
            workDaysAtPrimaryWorksite = rec.Work_Days_at_Primary_Worksite__c || '';
            workStatus                = rec.Work_Status__c                   || '';
            worksite                  = rec.Worksite__c                      || '';
            worksiteAddInfo           = rec.Worksite_Add_Info__c             || '';
            inoculated                = rec.Inoculated__c                    || false;
            loa                       = rec.LOA__c                           || false;
            x1                        = rec.X1_1_complete__c                 || false;
            ics                       = rec.Ics2__c                          || false;
            staffing17CollectedBy     = rec.Staffing_17_Collected_By__c      || '';
            lastModifiedDate          = new Date(rec.LastModifiedDate).toLocaleString('en-US', dateOptions1);
            purpleUp                  = rec.Purple_UP__c          || '';
            stickerUpActions          = rec.Sticker_Up_Actions__c || '';

            if(gotvInsidePlanNotes.trim().lenghth < 3) {
              gotvInsidePlanNotes = '';
            }

            if(gotvOutsidePlanNotes.trim().lenghth < 3) {
              gotvOutsidePlanNotes = '';
            }

            if(notesConsolidated.trim().lenghth < 3) {
              notesConsolidated = '';
            }

            if(gotvSpecialPlanNotes.trim().lenghth < 3) {
              gotvSpecialPlanNotes = '';
            } else {
              gotvSpecialPlanNotes = gotvSpecialPlanNotes.trim().toLowerCase();
            }

            if(rec.GOTV_Card_Signed_Date__c) {
              gotvCardSignedDate = new Date(rec.GOTV_Card_Signed_Date__c).toLocaleString('en-US', dateOptions1);
            }
            if (rec.Signed_Membership_Card_Date__c) {
              signedMembershipCardDate = new Date(rec.Signed_Membership_Card_Date__c).toLocaleString('en-US', dateOptions1);
            }

            if (rec.GOTV_Exact_Vote_Time__c) {
              gotvExactVoteTime = new Date(rec.GOTV_Exact_Vote_Time__c).toLocaleString('en-US', dateOptions2);
            }

            if ('Survey_Responses__r' in rec) {
              if (rec.Survey_Responses__r) {
                voteBlock = rec.Survey_Responses__r[0].Response_Value__c;
                if (voteBlock.trim() == '' || voteBlock == null) {
                  voteBlock = '';
                }
              }
            }

            if ('Staffing_17_Collected_By__r' in rec) {
              if (rec.Staffing_17_Collected_By__r) {
                staffing17CollectedByName = rec.Staffing_17_Collected_By__r.Name;
              }
            }

            if ('AssignedLeader__r' in rec) {
              if (rec.AssignedLeader__r) {
                assignedLeaderName = rec.AssignedLeader__r.Name;
              }
            }

            if ('New_Org_Card_Signed_By__r' in rec) {
              if (rec.New_Org_Card_Signed_By__r) {
                newOrgCardSignedByName = rec.New_Org_Card_Signed_By__r.Name;
              }
            }

            if ('Tasks' in rec) {
              if (rec.Tasks.length > 0) {

                taskRec = rec.Tasks[0];  // There should only be 1 GotvNote per contact.

                taskRecOwner           = taskRec.Owner;
                taskRecLastModifiedBy  = taskRec.LastModifiedBy;
                taskId                 = taskRec.Id;
                taskAccountId          = taskRec.AccountId;
                taskActivityDate       = taskRec.ActivityDate       || '';
                taskSubject            = clean(taskRec.Subject);
                taskDescription        = clean(taskRec.Description);
                taskLastModifiedDate   = taskRec.LastModifiedDate   || '';
                taskType               = taskRec.Type               || '';
                taskWhoId              = taskRec.WhoId              || '';
                taskOwnerId            = taskRecOwner.Id            || '';
                taskOwnerName          = taskRecOwner.Name          || '';
                taskLastModifiedById   = taskRecLastModifiedBy.Id   || '';
                taskLastModifiedByName = taskRecLastModifiedBy.Name || '';

                taskObj = {
                  Id:                taskId,
                  AccountId:         taskAccountId,
                  ActivityDate:      taskActivityDate,
                  Subject:           taskSubject,
                  Description:       taskDescription,
                  LastModifiedDate:  taskLastModifiedDate,
                  Type:              taskType,
                  WhoId:             taskWhoId,
                  OwnerId:           taskOwnerId,
                  OwnerName:         taskOwnerName,
                  LastModifiedById:  taskLastModifiedById,
                  LastModifiedByName:taskLastModifiedByName
                } 

                taskActivityNotes = taskDescription;
                taskNoteMap[taskWhoId] = taskObj;

              }
            }

            if(taskActivityNotes) {
              notesCombo += '[TaskActivityNotes]\n';
              notesCombo += taskActivityNotes + '\n';
            }
            if(gotvInsidePlanNotes) {
              notesCombo += '[Inside Plan Notes]\n';
              notesCombo +=  gotvInsidePlanNotes + '\n'
            }
            if(gotvOutsidePlanNotes) {
              notesCombo += '[Outside Plan Notes]\n';
              notesCombo +=  gotvOutsidePlanNotes + '\n'
            } 
            if(gotvSpecialPlanNotes) {
              notesCombo += '[Special Plan Notes]\n';
              notesCombo +=  gotvSpecialPlanNotes + '\n'
            }                       
            if(notesConsolidated) {
              notesCombo += '[Consolidated Notes]\n';
              notesCombo += notesConsolidated;
            }

            name = lastName + ', ' + firstName;

            phoneToUse = '';
            if (cellPhone)
              phoneToUse = cellPhone;
            else if (homePhone)
              phoneToUse = homePhone;
            else if (phone)
              phoneToUse = phone;
            
            if (!ownerMap[ownerName]) {
              ownerMap[ownerName] = { Name: ownerName, Id: ownerId };
            }

            if (!vcMap[assignedVcName]) {
              vcMap[assignedVcName] = { Name: assignedVcName, Id: assignedVcId };
            }

            if (!currentGotvAssessmentsMap[gotvAssessment]) {
              currentGotvAssessmentsMap[gotvAssessment] = gotvAssessment;
            }

            if (!currentCardAssessmentMap[cardAssessment]) {
              currentCardAssessmentMap[cardAssessment] = cardAssessment;
            }

            if (!currentCardAssessmentMap[verbalAssessment]) {
              currentCardAssessmentMap[verbalAssessment] = verbalAssessment;
            }

            if(threeTouchST && threeTouchVC)
              stAndVcChecked = true;
            if(threeTouchST && threeTouchVC && threeTouchOB)
              stAndVcAndObChecked = true;

            contactDataArray.push({AccountId:accountId,AssignedVcId:assignedVcId,AssignedVcName:assignedVcName,BU:bu,BuCount:buCount,CardAssessment:cardAssessment,Department:department,Division:division,DoNotCall:doNotCall,
              FirstName:firstName,GotvAssess:gotvAssess,GotvAssessment:gotvAssessment,GotvBoardChallenge:gotvBoardChallenge,
              GotvCardSignedDate:gotvCardSignedDate,GotvExactVoteTime:gotvExactVoteTime,
              GotvGettable:gotvGettable,GotvHardPullReason:gotvHardPullReason,GotvInsidePlanNotes:gotvInsidePlanNotes,GotvOffBothDays:gotvOffBothDays,GotvOutsidePlanNotes:gotvOutsidePlanNotes,GotvPlanType:gotvPlanType,
              GotvReconfirmed:gotvReconfirmed,GotvShiftScheduler:gotvShiftScheduler,GotvSlip:gotvSlip,GotvSpecialPlan:gotvSpecialPlan,GotvSpecialPlanNotes:gotvSpecialPlanNotes,GotvUHWChallenge:gotvUHWChallenge,
              GotvVoteBlockTime:gotvVoteBlockTime,GotvVoteYesPetition:gotvVoteYesPetition,GotvWhereAfterVoting:gotvWhereAfterVoting,GotvWhereBeforeVoting:gotvWhereBeforeVoting,
              GotvWorksEday1:gotvWorksEday1,GotvWorksEday2:gotvWorksEday2,GotvWorksNightBeforeEday1:gotvWorksNightBeforeEday1,WorksNightBeforeEday2:worksNightBeforeEday2,
              CellPhone:cellPhone,HomePhone:homePhone,Phone:phone,PhoneToUse:phoneToUse,Id:id,LastName:lastName,MailingCity:mailingCity,MailingState:mailingState,MailingBa:mailingBa,MailingStreet:mailingStreet,MailingZip:mailingZip,OwnerId:ownerId,OwnerName:ownerName,
              Shift:shift,SignedMembershipCard:signedMembershipCard,SignedMembershipCardBy:signedMembershipCardBy,SignedMembershipCardDate:signedMembershipCardDate,
              ThreeTouchOB:threeTouchOB,ThreeTouchST:threeTouchST,ThreeTouchVC:threeTouchVC,Title:title,VerbalAssessment:verbalAssessment,VoteBlock:voteBlock,VoteCaptain:voteCaptain,AssignedVcName:assignedVcName,R: 0, NotesConsolidated:notesConsolidated,NotesCombo:notesCombo,
              GotvHardPull:gotvHardPull,GotvChallenge:gotvChallenge,CardAssess:cardAssess, AssistantName:assistantName,
              StAndVcChecked:stAndVcChecked,StAndVcAndObChecked:stAndVcAndObChecked,
              Activist:activist, BuildOcSupport:buildOcSupport, Captain:captain, CaptainsOc:captainsOc, CrossMatchUHW:crossMatchUHW, CrossMatchFacility:crossMatchFacility, DialysisBuildOc:dialysisBuildOc, 
              DialysisEmployer:dialysisEmployer, DialysisPhases:dialysisPhases, DivSubRegion:divSubRegion, IdLeaders:idLeaders, InCurrentBU:inCurrentBU, AssignedLeader:assignedLeader, AssignedLeaderName:assignedLeaderName, LicListPhone:licListPhone, 
              Subject:subject, OcMember:ocMember, OtherPhone:otherPhone, PhotoReleaseSigned:photoReleaseSigned, DignityRegion:dignityRegion, ScheduleInHand:scheduleInHand, Staffing17:staffing17, DignitySubRegion:dignitySubRegion, 
              GotvTookPhoto:gotvTookPhoto, WorkDaysAtPrimaryWorksite:workDaysAtPrimaryWorksite, WorkStatus:workStatus, Worksite:worksite, Inoculated:inoculated, Staffing17CollectedBy:staffing17CollectedBy, 
              NewOrgCardSignedByName:newOrgCardSignedByName, Staffing17CollectedByName:staffing17CollectedByName, PurpleUp:purpleUp,StickerUpActions:stickerUpActions,TaskActivityNotes:taskActivityNotes,
              LOA:loa, WorksiteAddInfo:worksiteAddInfo, X1:x1, Ics: ics
            });
            contactMap[selectedAccountId][id] = {AccountId:accountId,AssignedVcId:assignedVcId,AssignedVcName:assignedVcName,BU:bu,BuCount:buCount,CardAssessment:cardAssessment,Department:department,Division:division,DoNotCall:doNotCall, FirstName:firstName,GotvAssess:gotvAssess,GotvAssessment:gotvAssessment,GotvBoardChallenge:gotvBoardChallenge,GotvBoardChallenge:gotvBoardChallenge, GotvCardSignedDate:gotvCardSignedDate,GotvCardSignedDate:gotvCardSignedDate,GotvExactVoteTime:gotvExactVoteTime, GotvGettable:gotvGettable,GotvHardPullReason:gotvHardPullReason,GotvInsidePlanNotes:gotvInsidePlanNotes,GotvOffBothDays:gotvOffBothDays,GotvOutsidePlanNotes:gotvOutsidePlanNotes,GotvPlanType:gotvPlanType, GotvReconfirmed:gotvReconfirmed,GotvShiftScheduler:gotvShiftScheduler,GotvSlip:gotvSlip,GotvSpecialPlan:gotvSpecialPlan,GotvSpecialPlanNotes:gotvSpecialPlanNotes,GotvUHWChallenge:gotvUHWChallenge, GotvVoteBlockTime:gotvVoteBlockTime,GotvVoteYesPetition:gotvVoteYesPetition,GotvWhereAfterVoting:gotvWhereAfterVoting,GotvWhereBeforeVoting:gotvWhereBeforeVoting, GotvWorksEday1:gotvWorksEday1,GotvWorksEday2:gotvWorksEday2,GotvWorksNightBeforeEday1:gotvWorksNightBeforeEday1,WorksNightBeforeEday2:worksNightBeforeEday2, Id:id,LastName:lastName,MailingCity:mailingCity,MailingState:mailingState,MailingStreet:mailingStreet,MailingZip:mailingZip,OwnerId:ownerId,OwnerName:ownerName,PhoneToUse:phoneToUse, Shift:shift,SignedMembershipCard:signedMembershipCard,SignedMembershipCardBy:signedMembershipCardBy,SignedMembershipCardDate:signedMembershipCardDate, ThreeTouchOB:threeTouchOB,ThreeTouchST:threeTouchST,ThreeTouchVC:threeTouchVC,Title:title,VerbalAssessment:verbalAssessment,VoteBlock:voteBlock,VoteCaptain:voteCaptain,AssignedVcName:assignedVcName,NotesConsolidated:notesConsolidated,NotesCombo:notesCombo,StAndVcChecked:stAndVcChecked,GotvHardPull:gotvHardPull,GotvChallenge:gotvChallenge,CardAssess:cardAssess,AssistantName:assistantName,StAndVcAndObChecked:stAndVcAndObChecked};
          }
          else {
            console.log('record error');
          }
        }
        console.log(contactDataArray);
        resolve(contactDataArray);
      });
    }

    function showLoadingMsg(show) {
      if (show) // modal window fake
        modalLoadingDiv.setAttribute('class', 'modalDialog');
      else
        modalLoadingDiv.setAttribute('class', 'hide');
    }

    function showXmatchForm(show) {
      if (show) {
        createXmatchDiv.setAttribute('class', 'CreateXmatch');
      }
      else
      createXmatchDiv.setAttribute('class', 'hide');
    }

    function showCreateUniverseForm(show) {
      if (show) {
        createUniverseDiv.setAttribute('class', 'CreateUniverse');
        universeNameInput.focus();
      }
      else
        createUniverseDiv.setAttribute('class', 'hide');
    }

    function showInsidePlanNotesDialog(show) {
      if (show)
        editInsidePlanNotesDiv.setAttribute('class', 'EditNotes');
      else
        editInsidePlanNotesDiv.setAttribute('class', 'hide');
    }

    function showOutsidePlanNotesDialog(show) {
      if (show)
        editOutsidePlanNotesDiv.setAttribute('class', 'EditNotes');
      else
        editOutsidePlanNotesDiv.setAttribute('class', 'hide');
    }

    function showSpecialPlanNotesDialog(show) {
      if (show)
        editSpecialPlanNotesDiv.setAttribute('class', 'EditNotes');
      else
        editSpecialPlanNotesDiv.setAttribute('class', 'hide');
    }

    function showConsNotesDialog(show) {
      if (show)
        editConsolidatedNotesDiv.setAttribute('class', 'EditNotes');
      else
        editConsolidatedNotesDiv.setAttribute('class', 'hide');
    }

    function showTaskActivityNotesDialog(show) {
      if (show)
        editTaskActivityNotesDiv.setAttribute('class', 'EditNotes');
      else
        editTaskActivityNotesDiv.setAttribute('class', 'hide');
    }

    function phoneFormat(s) {
      let s1;
      if (s == null)
        s1 = null;
      else {
        s1 = s.trim().replace(/[^0-9]/g, '');
        if (s1.length < 10)
          s1 = null;
        else
          s1 = '(' + s1.substr(0, 3) + ') ' + s1.substr(3, 3) + '-' + s1.substr(6);
      }
      return s1;
    }

    function rowNumValueGetter(params) {
      return params.data.R;
    }

    function gotvHardPullCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'GotvHardPull';
      checkbox.id = params.data.Id + ' [HP]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function touchStCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'ThreeTouchST';
      checkbox.id = params.data.Id + ' [ST]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function touchVcCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'ThreeTouchVC';
      checkbox.id = params.data.Id + ' [VC]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function touchObCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'ThreeTouchOB';
      checkbox.id = params.data.Id + ' [OB]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function ocMemberCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'OcMember';
      checkbox.id = params.data.Id + ' [OC]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function photoReleaseSignedCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'PhotoReleaseSigned';
      checkbox.id = params.data.Id + ' [PR]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function captainCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'Captain';
      checkbox.id = params.data.Id + ' [CA]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function crossMatchUHWCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'CrossMatchUHW';
      checkbox.id = params.data.Id + ' [CU]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function voteCaptainCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'VoteCaptain';
      checkbox.id = params.data.Id + ' [CV]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function activistCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'Activist';
      checkbox.id = params.data.Id + ' [AC]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function mailingBaCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'MailingBA';
      checkbox.id = params.data.Id + ' [BA]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function scheduleInHandCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'ScheduleInHand';
      checkbox.id = params.data.Id + ' [SC]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function gotvBoardChallengeCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'BoardChallenge';
      checkbox.id = params.data.Id + ' [BC]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function gotvUHWChallengeCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'UHWChallenge';
      checkbox.id = params.data.Id + ' [UC]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function signedMembershipCardCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'SignedMembershipCard';
      checkbox.id = params.data.Id + ' [MC]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function gotvGotvTookPhotoCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'GotvTookPhoto';
      checkbox.id = params.data.Id + ' [TP]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }
    
    function slipCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'Slip';
      checkbox.id = params.data.Id + ' [SL]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function boCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'OffBoth';
      checkbox.id = params.data.Id + ' [BO]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function idLeadersCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'IdLeaders';
      checkbox.id = params.data.Id + ' [IL]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function inoculatedCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'Inoculated';
      checkbox.id = params.data.Id + ' [IN]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function spCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'SpecialPlan';
      checkbox.id = params.data.Id + ' [SP]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function gotvGettableCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'Gettable';
      checkbox.id = params.data.Id + ' [GT]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function worksNightBeforeEday1CellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'WorksNightB4E1';
      checkbox.id = params.data.Id + ' [N1]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function worksNightBeforeEday2CellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'WorksNightB4E2';
      checkbox.id = params.data.Id + ' [N2]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function worksEday1CellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'WorksEday1';
      checkbox.id = params.data.Id + ' [W1]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function worksEday2CellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'WorksEday2';
      checkbox.id = params.data.Id + ' [W2]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function reconfirmedCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'Reconfirmed';
      checkbox.id = params.data.Id + ' [RC]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function doNotCallCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'DoNotCall';
      checkbox.id = params.data.Id + ' [DC]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function loaCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'LOA';
      checkbox.id = params.data.Id + ' [LO]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function inCurrentBuCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'InCurrentBU';
      checkbox.id = params.data.Id + ' [IB]';
      checkbox.checked = params.value;
      if(userLevel == 'Admin' ) {
        checkbox.addEventListener('change', checkboxChangeHandler, false);
      } else {
        checkbox.disabled = true;
      }
      return checkbox;
    }

    function inCurrentBuCellRenderer_x(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'X_InCurrentBU';
      checkbox.checked = params.value;
      checkbox.disabled = true;
      return checkbox;
    }

    function icsCellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'ICS';
      checkbox.id = params.data.Id + ' [IC]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }

    function x1CellRenderer(params) {
      let checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = 'X1';
      checkbox.id = params.data.Id + ' [X1]';
      checkbox.checked = params.value;
      checkbox.addEventListener('change', checkboxChangeHandler, false);
      return checkbox;
    }


    function initAgGrid() {
      agGrid.LicenseManager.setLicenseKey("SEIU-UWH_Site_1Devs7_February_2018__MTUxNzk2MTYwMDAwMA==f54417966e3979c429e6a1af033c1a9a");

      accountColDefs = [
        { headerName: 'Division',    field: 'Division',    width: 120, suppressMenu: true,  sortingOrder: ['asc', 'desc'] },
        { headerName: 'Name',        field: 'AccountName', width: 400, suppressMenu: true,  sortingOrder: ['asc', 'desc'], sort: 'asc' },
        { headerName: 'BU',          field: 'BuCount',     width:  60, suppressMenu: true,  sortingOrder: ['asc', 'desc'], cellClass: 'cellRight' },
        { headerName: 'Region',      field: 'Region',      width: 120, suppressMenu: true,  sortingOrder: ['asc', 'desc'] },
        { headerName: 'Coordinator', field: 'Coord',       width: 160, suppressMenu: false, sortingOrder: ['asc', 'desc'], filter: 'set', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true } },
        { headerName: 'Organizer1',  field: 'Org1',        width: 160, suppressMenu: false, sortingOrder: ['asc', 'desc'], filter: 'set', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true } }
      ];
    }

    function initAgGridContact() {
      xMatchedLicensureColDefs = [
        { headerName: 'Id',                       field: 'Id',                   hide: true, width: 170, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left', valueGetter: idValueGetter },
        { headerName: 'Last',                     field: 'LastName',             width: 140, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'First',                    field: 'FirstName',            width: 140, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'Middle',                   field: 'MiddleName',           width: 140, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'License Agency',           field: 'LicenseAgency',        width: 260, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'License Exp Date',         field: 'LicenseExpDate',       width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'License Status',           field: 'LicenseStatus',        width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'License Type',             field: 'LicenseType',          width: 230, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'License Street',           field: 'LicenseStreet',        width: 210, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'License City ',            field: 'LicenseCity',          width: 180, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'State',                    field: 'LicenseState',         width:  70, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'Zip',                      field: 'LicenseZip',           width:  70, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'Email',                    field: 'Email',                width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },    
        { headerName: 'Phone1',                   field: 'Phone1',               width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },  
        { headerName: 'Phone2',                   field: 'Phone2',               width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] }, 
        { headerName: 'Phone3',                   field: 'Phone3',               width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] } 
      ];

      xMatchedLicensureDefaultColDefs = {
        headerClass: 'XHeaderLeft',
        cellClass: 'XCellLeft', 
        suppressMenu:    false,
        suppressSorting: false
      };

      xMatchedColDefs = [ 
        { headerName: 'Id',                       field: 'Id',                       hide: true, width: 170, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left', valueGetter: idValueGetter },
        { headerName: 'Last',                     field: 'LastName',                 width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'First',                    field: 'FirstName',                width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'Middle',                   field: 'MiddleName',               width:  90, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'BU',                       field: 'InCurrentBU',              width:  60, suppressMenu: false, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: inCurrentBuCellRenderer_x, cellClass: 'XCellCenter', headerClass: 'XHdrCenter'},
        { headerName: 'Account',                  field: 'AccountName',              width: 320, suppressMenu: false, suppressSorting: false, sortingOrder: ['asc', 'desc'], },
        { headerName: 'Department',               field: 'Department',               width: 250, suppressMenu: false, suppressSorting: false, sortingOrder: ['asc', 'desc'], filter: 'set', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true } },
        { headerName: 'Member Status',            field: 'MemberStatus',             width: 130, suppressMenu: true,  suppressSorting: true},                        
        { headerName: 'Division',                 field: 'Division',                 width: 120, suppressMenu: false, suppressSorting: false, sortingOrder: ['asc', 'desc'], filter: 'set', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true } },
        { headerName: 'Email',                    field: 'Email',                    width: 250, suppressMenu: false, suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'Home Phone',               field: 'HomePhone',                width: 130, suppressMenu: true,  suppressSorting: true},
        { headerName: 'Cell Phone',               field: 'CellPhone',                width: 130, suppressMenu: true,  suppressSorting: true},
        { headerName: 'Phone',                    field: 'Phone',                    width: 130, suppressMenu: true,  suppressSorting: true},
        { headerName: 'Street',                   field: 'MailingStreet',            width: 210, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc']},
        { headerName: 'City',                     field: 'MailingCity',              width: 170, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc']},
        { headerName: 'State',                    field: 'MailingState',             width:  70, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc']},
        { headerName: 'Zip',                      field: 'MailingZip',               width:  70, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc']}
      ];

      xMatchedDefaultColDefs = {
        headerClass: 'XHeaderLeft',
        cellClass: 'XCellLeft', 
        suppressMenu:    false,
        suppressSorting: false
      };

      dataEntryContactColDefs = [
        { headerName: 'StAndVcChecked',           field: 'StAndVcChecked',           hide: true, width: 120, suppressMenu: true,  editable: true, pinned: 'left' },
        { headerName: 'StAndVcAndObChecked',      field: 'StAndVcAndObChecked',      hide: true, width: 120, suppressMenu: true,  editable: true, pinned: 'left' },
        { headerName: '#',                        field: 'R', width:  40, suppressMenu: true,  editable: false, pinned: 'left' },
        { headerName: 'Last',                     field: 'LastName',                 width: 120, suppressMenu: true,  editable: true, pinned: 'left' },
        { headerName: 'First',                    field: 'FirstName',                width: 120, suppressMenu: true,  editable: true, pinned: 'left' },
        { headerName: 'Department',               field: 'Department',               width: 200, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true },        
        { headerName: 'In BU',                    field: 'InCurrentBU',              width:  80, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: inCurrentBuCellRenderer,  cellClass: 'cellCenter filterCol', headerClass: 'HeaderCenter'},        
        { headerName: 'DNC',                      field: 'DoNotCall',                width:  50, suppressMenu: true,  suppressSorting: true, cellRenderer: doNotCallCellRenderer, enableCellChangeFlash: true, headerClass: 'HeaderLeft' },
        { headerName: 'LOA',                      field: 'LOA',                      width:  50, suppressMenu: true,  suppressSorting: true, cellRenderer: loaCellRenderer, enableCellChangeFlash: true, headerClass: 'HeaderLeft' },
        { headerName: 'X1',                       field: 'X1',                       width:  50, suppressMenu: true,  suppressSorting: true, cellRenderer: x1CellRenderer,  enableCellChangeFlash: true, headerClass: 'HeaderLeft' },
        { headerName: 'ICS',                      field: 'Ics',                      width:  50, suppressMenu: true,  suppressSorting: true, cellRenderer: icsCellRenderer,  enableCellChangeFlash: true, headerClass: 'HeaderLeft' },        
        { headerName: 'Phone',                    field: 'Phone',                    width: 130, suppressMenu: true,  editable: true, cellClass: 'cellCenter', headerClass: 'HeaderCenter'},
        { headerName: 'Home Phone',               field: 'HomePhone',                width: 130, suppressMenu: true,  editable: true, cellClass: 'cellCenter', headerClass: 'HeaderCenter'},
        { headerName: 'Cell Phone',               field: 'CellPhone',                width: 130, suppressMenu: true,  editable: true, cellClass: 'cellCenter', headerClass: 'HeaderCenter'},
        { headerName: 'Other Phone',              field: 'OtherPhone',               width: 130, suppressMenu: true,  editable: true, cellClass: 'cellCenter', headerClass: 'HeaderCenter'},
        { headerName: 'Lic List Phone',           field: 'LicListPhone',             width: 130, suppressMenu: true,  editable: true, cellClass: 'cellCenter', headerClass: 'HeaderCenter'},
        { headerName: 'Street',                   field: 'MailingStreet',            width: 210, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr'  },
        { headerName: 'City',                     field: 'MailingCity',              width: 170, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr'  },
        { headerName: 'State',                    field: 'MailingState',             width:  70, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr'  },
        { headerName: 'Zip',                      field: 'MailingZip',               width:  70, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr'  },
        { headerName: 'Mailing BA',               field: 'MailingBa',                width: 110, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: mailingBaCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Activist',                 field: 'Activist',                 width: 110, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: activistCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Build OC Support',         field: 'BuildOcSupport',           width: 200, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Card_Assessment }, headerClass: 'HeaderCenter' },
        { headerName: 'BU',                       field: 'BU',                       width: 130, suppressMenu: true, editable: true, headerClass: 'HeaderLeft' },
        { headerName: 'Dialysis Build OC',        field: 'DialysisBuildOc',          width: 190, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Card_Assessment }, headerClass: 'HeaderLeft'},
        { headerName: 'Dialysis Employer',        field: 'DialysisEmployer',         width: 150, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Dialysis_Employers }, cellClass: 'cellLeft', headerClass: 'HeaderLeft' },
        { headerName: 'Dialysis Phases',          field: 'DialysisPhases',           width: 130, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Dialysis_Phases },    cellClass: 'cellLeft', headerClass: 'HeaderLeft' },        
        { headerName: 'Div Sub Region',           field: 'DivSubRegion',             width: 130, suppressMenu: true},
        { headerName: 'Subject',                  field: 'Subject',                  width: 130, suppressMenu: true},
        { headerName: 'Schedule In Hand',         field: 'ScheduleInHand',           width: 150, suppressMenu: true, headerClass: 'HeaderLeft', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: scheduleInHandCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Staffing 17',              field: 'Staffing17',               width: 130, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Staffing_17 }, cellClass: 'cellLeft filterCol', headerClass: 'HeaderLeft' },
        { headerName: 'Staffing 17 Collected By', field: 'Staffing17CollectedByName',width: 180, suppressMenu: true, cellClass: 'NoEdit', headerClass: 'NoEditHdr' },
        { headerName: 'Work Status',              field: 'WorkStatus',               width: 130, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Work_Status }, editable: true },
        { headerName: 'Worksite',                 field: 'Worksite',                 width: 360, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true },
        { headerName: 'Worksite Add Info',        field: 'WorksiteAddInfo',          width: 360, suppressMenu: true,  editable: true },
        { headerName: 'Task Activity Notes',      field: 'TaskActivityNotes',        tooltipField: 'TaskActivityNotes', width: 200, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr' },
        { headerName: 'Notes Consolidated',       field: 'NotesConsolidated',        tooltipField: 'NotesConsolidated', width: 200, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr' }
              
      ];
      
      dataEntryContactDefaultColDefs = {
        headerClass: 'HeaderLeft',
        cellClass: 'cellLeft', 
        sortingOrder: ['asc', 'desc'],
        suppressMenu:    false,
        suppressSorting: false
      };

// { headerName: 'Captain',                  field: 'Captain',                  width: 100, suppressMenu: true, headerClass: 'HeaderLeft', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: captainCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
// { headerName: 'Captains OC',              field: 'CaptainsOc',               width: 130, suppressMenu: true, sortingOrder: ['asc', 'desc'], editable: true, cellClass: 'cellLeft', headerClass: 'HeaderCenter'},
// { headerName: 'OcMember',                 field: 'OcMember',                 width: 130, suppressMenu: true, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: ocMemberCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderLeft' },
// { headerName: 'DignityRegion',            field: 'DignityRegion',            width: 130, editable: true, cellClass: 'cellLeft'},
// { headerName: 'DignitySubRegion',         field: 'DignitySubRegion',         width: 130, editable: true, cellClass: 'cellLeft'},
// { headerName: 'Work days at primary worksite',field: 'WorkDaysAtPrimaryWorksite',width: 210, suppressMenu: true, headerClass: 'HeaderLeft' },
// { headerName: 'Gotv Board Challenge',     field: 'GotvBoardChallenge',       width: 170, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: gotvBoardChallengeCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'Editable' },
// { headerName: 'CardSignedDate',           field: 'GotvCardSignedDate',       width: 160, editable: true},
// { headerName: 'Gotv UHW Challenge',       field: 'GotvUHWChallenge',         width: 170, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: gotvUHWChallengeCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'Editable' }

      gotvContactColDefs = [
        { headerName: 'StAndVcChecked',           field: 'StAndVcChecked',           hide: true, width: 120, suppressMenu: true,  editable: true, pinned: 'left' },
        { headerName: 'StAndVcAndObChecked',      field: 'StAndVcAndObChecked',      hide: true, width: 120, suppressMenu: true,  editable: true, pinned: 'left' },
        { headerName: '#',                        field: 'R', type: 'numericColumn', width:  40, suppressMenu: true,  editable: false, pinned: 'left' },
        { headerName: 'Last',                     field: 'LastName',                 width: 120, suppressMenu: true,  editable: true,  pinned: 'left' },
        { headerName: 'First',                    field: 'FirstName',                width: 120, suppressMenu: true,  editable: true,  pinned: 'left' },
        { headerName: 'Plan Type',                field: 'GotvPlanType',             width: 100, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: GOTV_PlanType },  cellClass: 'filterCol', pinned: 'left' },
        { headerName: 'ST',                       field: 'ThreeTouchST',             width:  60, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: touchStCellRenderer,      cellClass: 'cellCenter filterCol', enableCellChangeFlash: true, headerClass: 'HeaderCenter', pinned: 'left' },
        { headerName: 'VC',                       field: 'ThreeTouchVC',             width:  60, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: touchVcCellRenderer,      cellClass: 'cellCenter filterCol', enableCellChangeFlash: true, headerClass: 'HeaderCenter', pinned: 'left' },
        { headerName: 'OB',                       field: 'ThreeTouchOB',             width:  60, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: touchObCellRenderer,      cellClass: 'cellCenter filterCol', enableCellChangeFlash: true, headerClass: 'HeaderCenter', pinned: 'left' },
        { headerName: 'Slip',                     field: 'GotvSlip',                 width:  60, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: slipCellRenderer,         cellClass: 'cellCenter filterCol', enableCellChangeFlash: true, headerClass: 'HeaderCenter', pinned: 'left' },
        { headerName: 'Gettable',                 field: 'GotvGettable',             width:  90, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: gotvGettableCellRenderer, cellClass: 'cellCenter filterCol', enableCellChangeFlash: true, headerClass: 'HeaderLeft',   pinned: 'left' },
        { headerName: 'Owner',                    field: 'OwnerName',                width: 150, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellClass: 'filterCol', headerClass: 'HeaderLeft', editable: true },
        { headerName: 'Assistant Name',           field: 'AssistantName',            width: 150, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, headerClass: 'HeaderLeft', editable: true},
        { headerName: 'Department',               field: 'Department',               width: 200, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true },
        { headerName: 'Title',                    field: 'Title',                    width: 240, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true },
        { headerName: 'Shift',                    field: 'Shift',                    width: 110, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Shifts } },
        { headerName: 'Vote Yes',                 field: 'GotvVoteYesPetition',      width: 220, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: GOTV_VoteYes },headerClass: 'HeaderLeft' },
        { headerName: 'Gotv Assess',              field: 'GotvAssess',               width: 120, suppressMenu: true,  cellClass: 'NoEditCenter', headerClass: 'NoEditHdrCenter' },
        { headerName: 'GOTV Assessment',          field: 'GotvAssessment',           width: 190, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: GOTV_Assessments }, headerClass: 'HeaderLeft' },
        { headerName: 'Vote Block',               field: 'VoteBlock',                width: 180, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr' },
        { headerName: 'Vote Block',               field: 'GotvVoteBlockTime',        width: 180, menuTabs: ['filterMenuTab'], filter: 'agSetColumnFilter', filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: allowedResponsesArray }, headerClass: 'HeaderLeft' },
        { headerName: 'EVT',                      field: 'GotvExactVoteTime',        width: 180, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellClass: 'cellLeft', headerClass: 'HeaderLeft' },
        { headerName: 'Before',                   field: 'GotvWhereBeforeVoting',    tooltipField: 'GotvWhereBeforeVoting', width: 300, suppressMenu: true,  editable: true, headerClass: 'HeaderLeft'},
        { headerName: 'After',                    field: 'GotvWhereAfterVoting',     tooltipField: 'GotvWhereAfterVoting',  width: 300, suppressMenu: true,  editable: true, headerClass: 'HeaderLeft'},
        { headerName: 'Recon',                    field: 'GotvReconfirmed',          width:  90, suppressSorting: true, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: reconfirmedCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Wrk N1',                   field: 'GotvWorksNightBeforeEday1',width:  90, suppressSorting: true, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: worksNightBeforeEday1CellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Wrk E1',                   field: 'GotvWorksEday1',           width:  90, suppressSorting: true, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: worksEday1CellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Shift Scheduler',          field: 'GotvShiftScheduler',       width: 170, suppressMenu: true, editable: true, cellClass: 'cellLeft', headerClass: 'HeaderLeft' },
        { headerName: 'Wrk N2',                   field: 'WorksNightBeforeEday2',    width:  90, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: worksNightBeforeEday2CellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Wrk E2',                   field: 'GotvWorksEday2',           width:  90, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: worksEday2CellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Off Both',                 field: 'GotvOffBothDays',          width: 150, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: boCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'SP',                       field: 'GotvSpecialPlan',          width:  90, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: spCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'HP',                       field: 'GotvHardPull',             width:  60, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: gotvHardPullCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Hard Pull Reason',         field: 'GotvHardPullReason',       width: 170, suppressMenu: true,  editable: true },
        { headerName: 'GotvChallenge',            field: 'GotvChallenge',            width: 150, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: GOTV_CHALLENGE }, cellClass: 'cellLeft', headerClass: 'HeaderLeft'},
        { headerName: 'CardAssess',               field: 'CardAssess',               width: 150, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellClass: 'NoEdit cellCenter', headerClass: 'NoEditHdrCenter' },
        { headerName: 'Card Assessment',          field: 'CardAssessment',           width: 220, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Card_Assessment }, cellClass: 'cellLeft filterCol', headerClass: 'Editable' },
        { headerName: 'Verbal Assessment',        field: 'VerbalAssessment',         width: 190, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Card_Assessment }, cellClass: 'cellLeft filterCol', headerClass: 'Editable' },
        { headerName: 'Vote Captain',             field: 'VoteCaptain',              width: 120, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: voteCaptainCellRenderer, enableCellChangeFlash: true, cellClass: 'cellCenter', headerClass: 'HeaderCenter' },
        { headerName: 'AssignedVcName',           field: 'AssignedVcName',           width: 170, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr'},
        { headerName: 'DNC',                      field: 'DoNotCall',                width:  50, suppressMenu: true,  suppressSorting: true,  cellRenderer: doNotCallCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'Editable' },
        { headerName: 'Phone',                    field: 'PhoneToUse',               width: 130, suppressMenu: true,  suppressSorting: true,  cellClass: 'cellLeft NoEdit', headerClass: 'BasicHdr', valueGetter: phoneValueGetter },
        { headerName: 'BU',                       field: 'BU',                       width: 130, suppressMenu: true, headerClass: 'HeaderLeft' },
        { headerName: 'Cross Match UHW',          field: 'CrossMatchUHW',            width: 170, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: crossMatchUHWCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },        
        { headerName: 'Cross Match Facility',     field: 'CrossMatchFacility',       width: 190, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true    ,  cellClass: 'cellLeft', enableCellChangeFlash: true, headerClass: 'HeaderLeft' },        
        { headerName: 'Id Leaders',               field: 'IdLeaders',                width: 130, suppressMenu: true, headerClass: 'HeaderLeft', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: idLeadersCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Assigned Leader',          field: 'AssignedLeaderName',       width: 150, cellClass: 'NoEdit', headerClass: 'NoEditHdr',filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true } },
        { headerName: 'PhotoReleaseSigned',       field: 'PhotoReleaseSigned',       width: 130, suppressMenu: true, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: photoReleaseSignedCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderLeft' },
        { headerName: 'Gotv Took Photo',          field: 'GotvTookPhoto',            width: 170, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: gotvGotvTookPhotoCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'Editable' },
        { headerName: 'Inoculated',               field: 'Inoculated',               width: 120, suppressSorting: true, menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellRenderer: inoculatedCellRenderer, cellClass: 'cellCenter', enableCellChangeFlash: true, headerClass: 'HeaderCenter' },
        { headerName: 'Purple Up',                field: 'PurpleUp',                 width: 190, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Purple_Up }, cellClass: 'cellLeft filterCol', headerClass: 'HeaderLeft' },
        { headerName: 'Sticker Up Actions',       field: 'StickerUpActions',         width: 190, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: { values: Sticker_Up_Actions }, cellClass: 'cellLeft filterCol', headerClass: 'HeaderLeft' },
        { headerName: 'New Org Card Signed By',   field: 'NewOrgCardSignedByName',   width: 170, suppressMenu: true, cellClass: 'NoEdit', headerClass: 'NoEditHdr' },
        { headerName: 'SP Notes',                 field: 'GotvSpecialPlanNotes',     tooltipField: 'GotvSpecialPlanNotes', width: 200, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr' },
        { headerName: 'Task Activity Notes',      field: 'TaskActivityNotes',        tooltipField: 'TaskActivityNotes',    width: 200, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr' },
        { headerName: 'Inside Plan Notes',        field: 'GotvInsidePlanNotes',      tooltipField: 'GotvInsidePlanNotes',  width: 200, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr' },
        { headerName: 'Outside Plan',             field: 'GotvOutsidePlanNotes',     tooltipField: 'GotvOutsidePlanNotes', width: 200, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr' },
        { headerName: 'Notes Consolidated',       field: 'NotesConsolidated',        tooltipField: 'NotesConsolidated',    width: 200, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr' }
      ];

      gotvContactDefaultColDefs = {
        headerClass: 'HeaderLeft',
        cellClass: 'cellLeft', 
        sortingOrder: ['asc', 'desc'],
        suppressMenu:    false,
        suppressSorting: false
      };

    }

    // Note: Tried usnig tooltip: toolTipFn instead of tooltipField, but neither are updated when cell is changed. :(
    // function toolTipFn(params) {
    //   console.log(params);
    //   return params.data.NotesCombo;
    // }

    function idValueGetter(params) {
        return params.data.Id;
    }

    function phoneValueGetter(params) {
      if (params.data.DoNotCall)
        return 'Do not call';
      else
        return params.data.PhoneToUse;
    }

    function resize(pLen, pMin) {
      let retVal;
      if (pLen > 20)
        retVal = 693;
      else
        retVal = pLen * 33;

      if (retVal < pMin)
        retVal = pMin;

      return retVal;
    }

    async function getData() {
      let tStart,tEnd,testURL;
      tStart  = performance.now();
      testURL = await getURL();
      tEnd    = performance.now();
      console.log(`Call to getURL() took ${tEnd - tStart} milliseconds.`);
      console.log('testURL:',testURL);

      tStart       = performance.now();
      xMatchDetail = await getXMatchDetail();
      status       = await processXmatchDetail(xMatchDetail);
      tEnd         = performance.now();
      console.log(`Call to getXMatchDetail() and processing took ${tEnd - tStart} milliseconds.`);

      tStart   = performance.now();
      viewData = await getViews();
      tEnd     = performance.now();
      console.log(`Call to getViews() took ${tEnd - tStart} milliseconds.`);

      tStart = performance.now();
      status = await processViewData(viewData);
      tEnd   = performance.now();
      console.log(`Processing views took ${tEnd - tStart} milliseconds.`);

      tStart = performance.now();
      accountData = await getAccountData();
      tEnd   = performance.now();
      console.log(`Call to getAccountData() took ${tEnd - tStart} milliseconds.`);
      
      tStart = performance.now();
      status = await processAccountData(accountData);
      tEnd   = performance.now();
      console.log(`Processing accounts took ${tEnd - tStart} milliseconds.`);

      return status;
    }

    var status,accountGridOptions, accountColDefs, contactGridOptions, allContactColDefs, contactDefaultColDefs,  xMatchedGridOptions, xMatchedColDefs, xMatchedDefaultColDefs;
    var allContactDefaultColDefs,dataEntryContactColDefs,dataEntryContactDefaultColDefs,gotvContactColDefs,gotvContactDefaultColDefs;
    var selectedAccount, selectedAccountId, selectedContactName, selectedContactId, selectedUniverseFilters,selectedUniverseObject, selectedUniverseName, selectedUniverseId, changedField, changeTo;
    var accountMap, accountData, accountDataArray, xMatchCounts; 
    var contactMap, contactData, contactDataArray, contactCount;
    var ownerAssessmentSummaryDataArray;
    var shownBefore, updateCount = 0, intervalId, monitoring = false, ownerMap = {}, vcMap = {}, voteBlockMap = {}, voteBlockArray;
    var threeTouchCountMap1 = {}, threeTouchCountMap2 = {}, voteBlockCountMap = {}, ownerVoteBlockCountMap = {}, ownerThreeTouchCountMap1 = {}, ownerThreeTouchCountMap2 = {};
    var slCount, totalsDataArray = []
    var filterSoql = '';
    var currentGotvAssessmentsMap = {}, currentVoteYesMap = {}, currentVoteBlockMap = {}, universeMap = {}, universeArray = [];
    var currentCardAssessmentMap = {}, currentVerbalAssessmentMap = {};
    var accountAllowedResponsesMap = {}, allowedResponsesArray = [];
    var selectedAccountNode, selectedContactNode, selectedNodes = [];
    var itemsToUpdate = [], filterCnt = 0;
    var viewsArray = [],viewsMap  = {},viewData,selectedSort,selectedViewObject,selectedViewColumns,selectedViewId,selectedViewName;
    var selectedViewSort,xMatchedDataArray = [],xmatchDetailDataArray = [], taskNoteMap = {}, selectedMainView = 'D', selectedTab = 1, xMatchCountsMap = {};
    var xMatchDetailMap = {}, xMatchDetail;
    var xMatchedLicensureGridOptions, xMatchedLicensureColDefs, xMatchedLicensureDefaultColDefs,xMatchedLicensureDataArray = [];
    var hideRadio1 = false,hideRadio2 = false;

    const navigationDiv                = document.getElementById('NavigationDiv');
    const modalLoadingDiv              = document.getElementById('ModalLoadingDiv');
    const titleButton                  = document.getElementById('TitleBtn');
    const tab2Content                  = document.getElementById('Tab2Content');
    const tab3Content                  = document.getElementById('Tab3Content');
    const tab2ControlsDiv              = document.getElementById('Tab2ControlsDiv');
    const currentFilterDiv             = document.getElementById('CurrentFilterDiv');
    const please1                      = document.getElementById('Please1');
    const please2                      = document.getElementById('Please2');
    const please3                      = document.getElementById('Please3');
    const checkBoxFilterDiv            = document.getElementById('CheckBoxFilterDiv');
    const radioFilterDiv               = document.getElementById('RadioFilterDiv');
    const countsDiv1                   = document.getElementById('CountsDiv1');
    const countsDiv2                   = document.getElementById('CountsDiv2');
    const countsDiv3                   = document.getElementById('CountsDiv3');
    const createUniverseDiv            = document.getElementById('CreateUniverseDiv');
    const createViewDiv                = document.getElementById('CreateViewDiv');
    const editInsidePlanNotesDiv       = document.getElementById('EditInsidePlanNotesDiv');
    const editOutsidePlanNotesDiv      = document.getElementById('EditOutsidePlanNotesDiv');
    const editSpecialPlanNotesDiv      = document.getElementById('EditSpecialPlanNotesDiv');    
    const editTaskActivityNotesDiv     = document.getElementById('EditTaskActivityNotesDiv');        
    const editConsolidatedNotesDiv     = document.getElementById('EditConsolidatedNotesDiv');
    const accountGridDiv               = document.getElementById('AccountGridDiv');
    const contactGridDiv               = document.getElementById('ContactGridDiv');
    const xMatchedGridDiv              = document.getElementById('XMatchedGridDiv');
    const xMatchButtonsDiv             = document.getElementById('XmatchButtonsDiv');
    const xMatchedLicensureGridDiv     = document.getElementById('XMatchedLicensureGridDiv');
    const tab1Id                       = document.getElementById('Tab1Id');
    const tab2Id                       = document.getElementById('Tab2Id');
    const tab3Id                       = document.getElementById('Tab3Id');
    const tab4Id                       = document.getElementById('Tab4Id');
    const tab5Id                       = document.getElementById('Tab5Id');
    const tab4                         = document.getElementById('tab4');
    const tab5                         = document.getElementById('tab5');
    
    const selectAccountLabel           = document.getElementById('SelectAccountLbl');    
    const accountFilterInput           = document.getElementById('AccountFilterInput');
    const contactFilterInput           = document.getElementById('ContactFilterInput');
    const monitorButton                = document.getElementById('MonitorBtn');
    const initButton                   = document.getElementById('InitBtn');
    const hideStVcCheckBox             = document.getElementById('HideStVcCheckBox'); 
    const hideStVcObCheckBox           = document.getElementById('HideStVcObCheckBox');
    const assignButton                 = document.getElementById('AssignBtn');
    const filterResetButton            = document.getElementById('FilterResetBtn');
    const createXmatchDiv              = document.getElementById('CreateXmatchDiv');
    const xMatchButton                 = document.getElementById('XmatchBtn');
    const xMatchedButton               = document.getElementById('XmatchedBtn');
    const matchButton                  = document.getElementById('MatchBtn');
    const closeXmatchButton            = document.getElementById('CloseXmatchBtn');
    const viewResetButton              = document.getElementById('ViewResetBtn');
    const universeNameInput            = document.getElementById('UniverseNameInput');
    const universeDescInput            = document.getElementById('UniverseDescInput');
    const viewNameInput                = document.getElementById('ViewNameInput');
    const viewDescInput                = document.getElementById('ViewDescInput');    
    const saveUniverseButton           = document.getElementById('SaveUniverseBtn');
    const deleteUniverseButton         = document.getElementById('DeleteUniverseBtn');
    const closeUniverseButton          = document.getElementById('CloseUniverseBtn');
    const saveViewButton               = document.getElementById('SaveViewBtn');
    const closeViewButton              = document.getElementById('CloseViewBtn');
    const deleteViewButton             = document.getElementById('DeleteViewBtn'); 
    const viewsButton                  = document.getElementById('ViewsBtn');
    const universeButton               = document.getElementById('UniverseBtn');
    const saveAsCsvButton1             = document.getElementById("SaveAsCsvButton1");
    
    const xBatchMessage                = document.getElementById('XBatchMessage');

    const insidePlanNotesInput         = document.getElementById('InsidePlanNotesInput');
    const outsidePlanNotesInput        = document.getElementById('OutsidePlanNotesInput');
    const specialPlanNotesInput        = document.getElementById('SpecialPlanNotesInput');
    const taskNotesInput               = document.getElementById('TaskNotesInput');
    const taskNotesDateInput           = document.getElementById('TaskActivityDate');
    const taskNotesSubjectInput        = document.getElementById('TaskSubject');
    const consolidatedNotesInput       = document.getElementById('ConsolidatedNotesInput');

    const saveInsidePlanNotesButton    = document.getElementById('SaveInsidePlanNotesBtn');
    const saveOutsidePlanNotesButton   = document.getElementById('SaveOutsidePlanNotesBtn');
    const saveSpecialPlanNotesButton   = document.getElementById('SaveSpecialPlanNotesBtn');
    const saveTaskActivityNotesButton  = document.getElementById('SaveTaskActivityNotesBtn');


    const closeInsidePlanNotesButton   = document.getElementById('CloseInsidePlanNotesBtn');
    const closeOutsidePlanNotesButton  = document.getElementById('CloseOutsidePlanNotesBtn');
    const closeSpecialPlanNotesButton  = document.getElementById('CloseSpecialPlanNotesBtn');
    const closeTaskActivityNotesButton = document.getElementById('CloseTaskActivityNotesBtn');    
    const closeConsNotesButton         = document.getElementById('CloseConsNotesBtn');
    
    const resetXmatchContactButton     = document.getElementById('ResetXmatchContactBtn');
    const resetXmatchLicensureButton   = document.getElementById('ResetXmatchLicensureBtn');

    const monitorLabel                 = document.getElementById('MonitorLbl');
    const updateCountLabel             = document.getElementById('UpdateCountLbl');

    const filterLabel                  = document.getElementById('FilterDescDiv');
    const screensize                   = document.getElementById('ScreenSize');
    const currentFilter                = document.getElementById('CurrentFilter');
    const voteBlockDiv                 = document.getElementById('VoteBlockDiv');
    const voteBlockDropdown            = document.getElementById('VoteBlockSelectList');
    const universeDropdown             = document.getElementById('UniverseSelectList');
    const viewsDropdown                = document.getElementById('ViewSelectList');
    const universeInputDiv             = document.getElementById('UniverseInputDiv');
    const viewInputDiv                 = document.getElementById('ViewInputDiv');
    const typeTotalsContainerDiv       = document.getElementById('TypeTotalsContainerDiv');
    const sumTotalsContainerDiv        = document.getElementById('SumTotalsContainerDiv');
    const voteBlockContainerDiv        = document.getElementById('VoteBlockContainerDiv');
    const ownerVoteBlockContainerDiv   = document.getElementById('OwnerVoteBlockContainerDiv');
    const ownerThreeTouchContainerDiv1 = document.getElementById('OwnerThreeTouchContainerDiv1');
    const ownerThreeTouchContainerDiv2 = document.getElementById('OwnerThreeTouchContainerDiv2');
    const filtersDiv                   = document.getElementById('filters-div');
    const filtersIcon                  = document.getElementById('filters-icon');
    const viewsIcon                    = document.getElementById('views-icon');

    const kaiserCheckBox               = document.getElementById('KaiserCheckBox');
    const kaiserNorthCheckBox          = document.getElementById('KaiserNorthCheckBox');
    const kaiserSouthCheckBox          = document.getElementById('KaiserSouthCheckBox');
    const hospitalCheckBox             = document.getElementById('HospitalCheckBox');
    const hospitalNorthCheckBox        = document.getElementById('HospitalNorthCheckBox');
    const hospitalSouthCheckBox        = document.getElementById('HospitalSouthCheckBox');

    const mainViewDiv    = document.getElementById('MainViewDiv');
    const mainViewRadio1 = document.getElementById('MainViewRadio1');
    const mainViewRadio2 = document.getElementById('MainViewRadio2');
    const xmatchRadio1   = document.getElementById('XmatchRadio1');
    const xmatchRadio2   = document.getElementById('XmatchRadio2');
    
    const notify = humane.create({ baseCls: 'humane-libnotify' });
    const dateOptions1 = { year: 'numeric', month: 'numeric', day: 'numeric' };
    const dateOptions2 = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' };

    const r1 = new RegExp(/&amp/, 'gm');
    const r2 = new RegExp(/&#39/, 'gm');
    const r3 = new RegExp(/&;/, 'gm');
    const r4 = new RegExp(/&quot/, 'gm');
    const r5 = new RegExp(/';/, 'gm');
    const r6 = new RegExp(/&gt/, 'gm');
    const r7 = new RegExp(/>;/, 'gm');
    const r8 = new RegExp(/&lt/, 'gm');
    const r9 = new RegExp(/<;/, 'gm');
    const rQuote = new RegExp(/'/, 'g');

    // ToDo: Get these from metadata?
    const GOTV_Assessments = [
      '',
      '1. Voting UHW EVT',
      '2. Voting UHW No EVT',
      '3. Undecided',
      '4. Voting No/Not Voting UHW',
      '6. Not Voting',
      '9. Challenge'
    ];

    const Card_Assessment = [
      '',
      '1. SEIU-UHW Leader Producing',
      '2. SEIU-UHW Supporter',
      '3. Undecided',
      '4. Anti-Union',
      '5. NUHW Supporter',
      '6. Management Leader or activist',
      '7. NUHW leader or activist',
      '9. Reported to be NLE'
    ];

/*     const Verbal_Assessment = [
      '',
      '1. SEIU-UHW Leader Producing',
      '2. SEIU-UHW Supporter',
      '3. Undecided',
      '4. Anti-Union',
      '5. NUHW Supporter',
      '6. Management Leader or Activist',
      '7. NUHW Leader or Activist',
      '9. Reported to be NLE'
    ]; */

    const Staffing_17 = [
      '',
      '1. Signed Petition and Completed 2 or more activities',
      '2. Signed Petition',
      '3. Undecided',
      '4. Anti-Union',
      '5. Anti-Union Leader or Activist',
      '6. UNAC Supporter',
      '7. UNAC Leader',
      '9. NLE'
    ];

    const GOTV_VoteYes = [
      '',
      '1. SEIU-UHW Leader Producing',
      '2. SEIU-UHW Supporter',
      '3. Undecided',
      '4. Anti-Union',
      '5. NUHW Supporter',
      '6. Management Leader or Activist',
      '7. NUHW Leader or Activist',
      '9. Reported to be NLE'
    ];

    const GOTV_CHALLENGE = [
      '',
      'Board Challenge',
      'Employer Challenge',
      'UHW Challenge'
    ];

    const Dialysis_Employers = [
      '',
      'DaVita',
      'Fresenius'
    ];

    const Dialysis_Phases = [
      '',      
      '1. Signed, 2 Capts, 2 Petitions',
      '2. Signed',
      '3. Undecided',
      '4. Anti-Union',
      '5. Anti & Campaigning',
      '6. UNAC Supporter',
      '7. UNAC & Campaigning',
      '9. Reported to be NLE'
    ];

    const Purple_Up = [
      '',
      'Yes',
      'Refused'
    ];

    const Sticker_Up_Actions = [
      '',
      'Sticker Up 1',
      'Refused Sticker Up 1',
      'Sticker Up 2',
      'Refused Sticker Up 2',
      'Sticker Up 3',
      'Refused Sticker Up 3'
    ];

    const GOTV_PlanType = ['', 'Inside', 'Outside', 'Both'];
    const Shifts = ['', 'AM', 'PM', 'Day-12 hour', 'Eve-12 hour', 'Night-12 hour', 'NOC', 'Swing', 'Varies', 'Full-time', 'Part-time', 'Per Diem'];

    const nameSort = [
      { colId: 'LastName', sort: 'asc' },
      { colId: 'FirstName', sort: 'asc' }
    ];

    const nameSortDesc = [
      { colId: 'LastName',  sort: 'desc' },
      { colId: 'FirstName', sort: 'desc' }
    ];

    const titleSort = [
      { colId: 'Title',  sort: 'desc' }
    ] 

    const xmatchSort = [
      { colId: 'LastName',    sort: 'asc' },
      { colId: 'FirstName',   sort: 'asc' },
      { colId: 'AccountName', sort: 'asc' }
    ];

    const initialSort = [
      { colId: 'Owner', sort: 'asc' },
      { colId: 'VoteBlock', sort: 'asc' }
    ];

    const Work_Status = [
      '',
      'Full-Time',
      'Part-Time',
      'Per Diem',
      'On Call',
      'Temporary'
    ];

    const XmatchBatchLimit = 9;

    // ***************** Main Program Entry *****************
    var sessionId, userId, userFirstName, userLastName, userDepartment, userTitle, userProfileId, userRoleId,baseURL, userLevel;
    tab2Content.className = 'hide';
    tab3Content.className = 'hide';

    Visualforce.remoting.escape = false;

    init();
    initAgGrid();
    showLoadingMsg(true);

    getData().then(retVal => {
      console.log(retVal);
    });
 
  </script>

  <script>        
    <apex:includeScript value="{!$Resource.puretabsJs}" />
    <apex:includeScript value="{!$Resource.MomentJs}" />
    <apex:stylesheet value="{!URLFOR($Resource.HumaneZip, 'libnotify.css')}" />
    <apex:includeScript value="{!URLFOR($Resource.HumaneZip,'humane.js')}" />
  </script>
</body>

</html>
</apex:page>