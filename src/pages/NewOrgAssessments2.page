<apex:page sidebar="false" docType="html-5.0" showHeader="false" standardStylesheets="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1"></meta>
        <script src="/soap/ajax/31.0/connection.js" type="text/javascript"></script>
        <script src="/soap/ajax/31.0/apex.js" type="text/javascript"></script>

        <apex:includeScript value="{!$Resource.jquery_2_1_3_min}"/>
        <apex:includeScript value="{!URLFOR($Resource.jQueryUiMinZip2,'jquery-ui.min.js')}"/>
        <apex:includeScript value="{!$Resource.agGridEnterpriseMin411}"/>

        <apex:stylesheet value="{!URLFOR($Resource.jQueryUiMinZip2, 'jquery-ui.min.css')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.jQueryUiMinZip2, 'jquery-ui.theme.min.css')}"/>

        <apex:stylesheet value="https://fonts.googleapis.com/css?family=Didact+Gothic"/>
        <apex:stylesheet value="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700"/>

        <style>

            fieldset.radiogroup  {
                margin: 0;
                padding: 0;
                margin-bottom: 1.25em;
                padding: .125em;
            }

            ul.radio  {
                margin: 0;
                padding: 0;
                margin-left: 20px;
                list-style: none;
            }

            ul.radio li {
                border: 1px transparent solid;
            }

            .PageTitle {
                background-color: lightsalmon;
                font-size: 2em;
                text-align: center;
            }

            body {
                font-size: 1.1em !important;
                /*              font-family: 'Roboto', sans-serif; */
            }

            #Step1 {
                margin-top: 10px;
                margin-bottom: 10px;
            }

            #Step1a {
                display:none;
            }

            #Step1Counts {
                margin-left: 164px;
                margin-top: 3px;
                color:indianred;
                font-size: 1.2em;
            }

            #Step2 {
                margin-top: 10px;
                margin-bottom: 10px;
                display:none;
            }

            #FilteredCountLabel {
                margin-left: 525px;
                margin-top: 3px;
                color:indianred;
                font-size: 1.2em;
            }

            #Step3 {
                margin-top: 10px;
                margin-bottom: 10px;
                display:none;
            }

            .Step {
                width:1233px;
                background-color: #CDE8F0;
                padding: 5px;
                min-height: 170px;
            }

            .StepLabel {
                font-size: 1.2em;
                color:indianred;
                font-weight: bold;
            }

            #EmpSelectList {
                font-size: 1em;
                width: 322px;
                margin-left: 15px;
                background-color: aliceblue;
            }

            #NewOrgGridDiv {
                height: 100px;
                display: none;
            }

            #ContactsGridDiv {
                height: 300px;
                display: none;
                margin-top: 5px;
            }

            #ContactsSpacerDiv {
                height: 2px;
                margin-top:5px;
                background-color: #c355d7;
                padding-top: 3px;
            }

            #StatusDiv1 {
                margin-top:5px;
            }

            #StatusDiv {
                margin-top: 5px;
                float: left;
                min-height: 224px;
                width: 20%;
                background-color: #DDE9DD;
                overflow-y: auto;
            }

            .center-align {
                text-align: right;
            }

            .center-align {
                text-align: center;
            }

            .empColumn {
                padding-left: 3px !important;
                background-color: #FFEC81;
                background-color: lightsalmon;
            }

            .mainColumn {
                text-align: center;
                background-color: #FFEC81;
                background-color: lightsalmon;
            }

        </style>

    </head>

    <body>

    <div id="tabContainer">
        <ul>
            <li><a href="#fragment-1"><span>Data   </span></a></li>
            <li><a href="#fragment-2"><span>Reports</span></a></li>
        </ul>

        <div class="tabpage" id="fragment-1">

            <div id="PageTitle1" class="PageTitle">New Organizing Assessment Data</div>

            <div id="Step1">
                <hr/>
                <label class="StepLabel">Step 1 - Select Employer </label>
                <select id="EmpSelectList"></select>
                <label id="Step1Counts"></label>
                <hr/>
            </div>

            <div id="Step1a">
                <div id="StatusDiv1" class="StatusDiv"></div>
                <div id="StatusDiv2" class="StatusDiv"></div>
                <div id="NewOrgGridDiv" class="ag-fresh"></div>
            </div>

            <div id="Step2">
                <div id="Step2a">
                    <hr/>
                    <label class="StepLabel">Step 2 - Select Filters</label>
                    <label id="FilteredCountLabel">Filtered Count:</label>
                    <hr/>
                </div>

                <div id="ContactsGridDiv" class="ag-fresh"></div>
            </div>

            <div id="Step3">

                <div id="Step3a">
                    <hr/>
                    <label class="StepLabel">Step 3 - Select Report Grouping</label>
                    <hr/>
                </div>

                <fieldset class="radiogroup">
                    <ul class="radio">
                        <li><input type="radio" name="rptGrp" id="rptGrp1" value="1"/><label for="rptGrp1">Organizer, Department, Shift</label></li>
                        <li><input type="radio" name="rptGrp" id="rptGrp2" value="2"/><label for="rptGrp2">Shift,Departent</label></li>
                        <li><input type="radio" name="rptGrp" id="rptGrp3" value="3"/><label for="rptGrp3">Shift,Verbal</label></li>
                        <li><input type="radio" name="rptGrp" id="rptGrp4" value="4"/><label for="rptGrp4">Department,Card</label></li>
                    </ul>
                </fieldset>
            </div>

        </div>

        <div class="tabpage" id="fragment-2">
            <div id="PageTitle2" class="PageTitle">New Organizing Assessment Reports</div>
            <hr/>
        </div>
    </div>

    <script type="text/javascript">

        function phoneFormat(s) {
            var s1;
            if(s == null || s == '')
                s1 = 'n/a';
            else {
                s1 = s.replace('-', '');
                s1 = s1.replace(' ', '');
                s1 = s1.replace('(', '');
                s1 = s1.replace(')', '');
                s1 = s1.substr(0, 3) + '-' + s1.substr(3, 3) + '-' + s1.substr(6);
            }
            return s1;
        }

        function toProperCase(s)
        // My version - handles hyphenated names correctly :)
        {
            var s1;
            if(s == null)
                s1 = '';
            else
                s1 = s.toLowerCase().replace(/\b[a-zA-Z]/g,function($1) {return $1.toUpperCase();});

            return s1;
        }

        function loadAssessments(accountId) {
            // Note:  Chris/Christina use the In_BU flag as a quick way to filter out people who they know they don't want to include in their final pool of eligible voters.

            // Christina 4/13/16:
            //   A lot of times when organizers are building a list for a new facility that we’re organizing they may gather schedules for as many departments as they can get their hands on and include all the
            //   people they can find. This leads to a very extensive list and often includes people that as the campaign progresses, they decide we are not going to organize. Instead of having to create every
            //   report and list based on individual bargaining units, we have taken to just marking everyone they plan to include in the election bargaining units we file for, as “In Current BU”. This simplifies
            //   creating lists and reports.

            var assessmentQuery = "SELECT In_Current_BU__c,Account.Name,AccountId,Department,Employer__c,FID__c,FirstName,Id,BU__c,LastName,MobilePhone,Shift__c,Worksite__c, Card_Assessment__c,GOTV_Assessment__c,Verbal_Assessment__c " +
                    "FROM Contact Where AccountId = '" + accountId + "'";

            console.log(assessmentQuery);
            var assessmentResults = sforce.connection.query(assessmentQuery);

            if(buildAssessmentMaps(assessmentResults)) {
                haveContacts = contactsDataArray.length > 0;
                processAssessmentMaps();
                step1a.setAttribute('style','display:block');
                step2Div.setAttribute('style','display:block');
                step3Div.setAttribute('style','display:block');
                newOrgGridDiv.setAttribute('style','display:block');
                contactsGridDiv.setAttribute('style','display:block');
                newOrgGridOptions.api.refreshView();

                if(runAlready && contactsGridDisplayed) {
                    console.log('destroying contact grid');
                    contactsGridOptions.api.removeEventListener('afterFilterChanged',contactsFilterChangedHandler);
                    contactsGridOptions.api.destroy();
                }

                contactsGridOptions = {
                    debug:true,
                    columnDefs: contactsColumnDefs,
                    groupHeaders: false,
                    rowData: contactsDataArray,
                    enableSorting: true,
                    enableFilter: true,
                    suppressContextMenu: true,
                    suppressMenuMainPanel: true,
                    suppressMenuColumnPanel: true,
                    suppressMenuHide: true,
                    onGridReady:contactsGridReadyHandler
                };
                debugger;
                new agGrid.Grid(contactsGridDiv, contactsGridOptions);

                filteredCounts.innerHTML = 'Unfiltered Count: ' + contactsDataArray.length;
                contactsGridDisplayed    = true;
                contactsGridOptions.api.addEventListener('afterFilterChanged',contactsFilterChangedHandler);
                //    contactsGridOptions.api.addEventListener('onGridReady',contactsGridReadyHandler);

            }
            else {
                if(runAlready && contactsGridDisplayed) {
                    statusDiv1.innerHTML = 'Destroying contact grid...';
                    console.log('destroying contact grid');
                    contactsGridOptions.api.removeEventListener('afterFilterChanged',contactsFilterChangedHandler);
                    contactsGridOptions.api.destroy();
                }
            }

            //    }
            //    catch (e) {alert('An error occurred retrieving Assessments ' + e.faultstring);}
        }

        function contactsGridReadyHandler() {
            contactsGridDisplayed = true;
            console.log('contactsGridReadyHandler...');
        }

        function contactsFilterChangedHandler() {
            console.log('Filtered length: ' + contactsGridOptions.api.getModel().getRowCount() );
            filteredCounts.innerHTML = 'Filtered Count: ' + contactsGridOptions.api.getModel().getRowCount();
        }

        function buildAssessmentMaps(results) {
            var accountName;
            var accountId;
            var department;
            var employer;
            var fid;
            var firstName;
            var id;
            var bu;
            var inCurrentBU;
            var lastName;
            var mobilePhone;
            var shift;
            var worksite;
            var cardAssessment;
            var gotvAssessment;
            var verbalAssessment;

            var processedAll;
            var contactCnt;
            var gotRecords;

            cardAssessmentMap   = {};
            gotvAssessmentMap   = {};
            verbalAssessmentMap = {};
            contactsDataArray   = [];

            contactCnt = 0;
            while (!processedAll) {
                records = results.getArray('records');
                if(records.length) {
                    gotRecords  = true;
                    accountName = toProperCase(records[0].Account.Name);
                    for (i = 0; i < records.length; i++) {
                        accountId = cardAssessment = gotvAssessment = verbalAssessment = department = employer = fid = firstName = lastName = id = inCurrentBU = mobilePhone = shift = worksite = '';
                        contactCnt++;
                        accountId        = records[i].AccountId;
                        verbalAssessment = records[i].Verbal_Assessment__c || '0.noentry';
                        cardAssessment   = records[i].Card_Assessment__c   || '0.noentry';
                        gotvAssessment   = records[i].GOTV_Assessment__c   || '0.noentry';
                        department       = records[i].Department           || '';
                        fid              = records[i].FID__c               || '';
                        firstName        = records[i].FirstName            || '';
                        lastName         = records[i].LastName             || '';
                        id               = records[i].Id                   || '';
                        bu               = records[i].BU__c                || '';
                        inCurrentBU      = records[i].In_Current_BU__c     || '';
                        mobilePhone      = records[i].MobilePhone          || '';
                        shift            = records[i].Shift__c             || '';
                        worksite         = records[i].Worksite__c          || '';

                        verbalAssessment = verbalAssessment.replace(/ /g,'').toLowerCase();
                        cardAssessment   = cardAssessment.replace(/ /g,'').toLowerCase();
                        gotvAssessment   = gotvAssessment.replace(/ /g,'').toLowerCase();

                        contactsDataArray.push({FirstName: firstName,LastName: lastName,Department: department,BU:bu,InCurrentBU: inCurrentBU,Shift: shift,Worksite: worksite,VerbalAssessment: verbalAssessment,CardAssessment: cardAssessment,GotvAssessment: gotvAssessment});

                        if (!verbalAssessmentMap[accountId])
                            verbalAssessmentMap[accountId] = {};

                        if (!verbalAssessmentMap[accountId]['0.noentry'])
                            verbalAssessmentMap[accountId]['0.noentry'] = {Count: 0};

                        if (!verbalAssessmentMap[accountId][verbalAssessment])
                            verbalAssessmentMap[accountId][verbalAssessment] = {Count: 1};
                        else
                            verbalAssessmentMap[accountId][verbalAssessment].Count++;

                        if (!cardAssessmentMap[accountId])
                            cardAssessmentMap[accountId] = {};

                        if (!cardAssessmentMap[accountId]['0.noentry'])
                            cardAssessmentMap[accountId]['0.noentry'] = {Count: 0};

                        if (!cardAssessmentMap[accountId][cardAssessment])
                            cardAssessmentMap[accountId][cardAssessment] = {Count: 1};
                        else
                            cardAssessmentMap[accountId][cardAssessment].Count++;

                        if (!gotvAssessmentMap[accountId])
                            gotvAssessmentMap[accountId] = {};

                        if (!gotvAssessmentMap[accountId]['0.noentry'])
                            gotvAssessmentMap[accountId]['0.noentry'] = {Count: 0};

                        if (!gotvAssessmentMap[accountId][gotvAssessment])
                            gotvAssessmentMap[accountId][gotvAssessment] = {Count: 1};
                        else
                            gotvAssessmentMap[accountId][gotvAssessment].Count++;
                    }

                    if (results.done == 'true') {
                        processedAll = true;
                        step1Counts.innerHTML = 'Contact Count: ' + contactCnt;
                    }
                    else {
                        contactBatchCount++;
                        results = sforce.connection.queryMore(results.queryLocator);
                    }
                }
                else
                {
                    processedAll = true;
                    gotRecords   = false;
                }
            }

            return contactCnt;
        }

        function processAssessmentMaps(){

            var mapKey;
            var key;
            var va0 = va1 = va2 = va3 = va4 = va5 = va6 = va7 = va8 = va9 = 0;
            var ca0 = ca1 = ca2 = ca3 = ca4 = ca5 = ca6 = ca7 = ca8 = ca9 = 0;
            var ga0 = ga1 = ga2 = ga3 = ga4 = ga5 = ga6 = ga7 = ga8 = ga9 = 0;

            for (mapKey in verbalAssessmentMap) {
                accountId = mapKey;
                verbalAssessment = verbalAssessmentMap[accountId];
                for (key in verbalAssessment) {
                    switch (key) {
                        case '0.noentry' :
                            va0 = verbalAssessment[key].Count;
                            break;
                        case '1.seiu-uhwleaderproducing' :
                            va1 = verbalAssessment[key].Count;
                            break;
                        case '2.seiu-uhwsupporter' :
                            va2 = verbalAssessment[key].Count;
                            break;
                        case '3.undecided' :
                            va3 = verbalAssessment[key].Count;
                            break;
                        case '4.anti-union' :
                            va4 = verbalAssessment[key].Count;
                            break;
                        case '5.nuhwsupporter':
                            va5 = verbalAssessment[key].Count;
                            break;
                        case '6.managementleaderoractivist' :
                            va6 = verbalAssessment[key].Count;
                            break;
                        case '7.nuhwleaderoractivist' :
                            va7 = verbalAssessment[key].Count;
                            break;
                        case '9.reportedtobenle' :
                            va9 = verbalAssessment[key].Count;
                            break;
                        default :
                            // bad data check - shouldn't happen.
                            console.log('Unexpected Verbal Assessment value : ' + key);
                    }
                }
            }

            for (mapKey in cardAssessmentMap) {
                accountId = mapKey;
                cardAssessment = cardAssessmentMap[accountId];
                for (key in cardAssessment) {
                    switch (key) {
                        case '0.noentry' :
                            ca0 = cardAssessment[key].Count;
                            break;
                        case '1.seiu-uhwleaderproducing' :
                            ca1 = cardAssessment[key].Count;
                            break;
                        case '2.seiu-uhwsupporter' :
                            ca2 = cardAssessment[key].Count;
                            break;
                        case '3.undecided' :
                            ca3 = cardAssessment[key].Count;
                            break;
                        case '4.anti-union' :
                            ca4 = cardAssessment[key].Count;
                            break;
                        case '5.nuhwsupporter' :
                            ca5 = cardAssessment[key].Count;
                            break;
                        case '6.managementleaderoractivist' :
                            ca6 = cardAssessment[key].Count;
                            break;
                        case '7.nuhwleaderoractivist' :
                            va7 = verbalAssessment[key].Count;
                            break;
                        case '9.reportedtobenle' :
                            ca9 = cardAssessment[key].Count;
                            break;
                        default :
                            // bad data check - shouldn't happen.
                            console.log('Unexpected Card Assessment value : ' + key);
                    }
                }
            }

            for (mapKey in gotvAssessmentMap) {
                accountId = mapKey;
                gotvAssessment = gotvAssessmentMap[accountId];

                for (key in gotvAssessment) {
                    switch (key) {
                        case '0.noentry' :
                            ga0 = gotvAssessment[key].Count;
                            break;
                        case '1.votingseiu-uhwwithexactvotetime&plan' :
                            ga1 = gotvAssessment[key].Count;
                            break;
                        case '2.votingseiu-uhw,noexactvotetime' :
                            ga2 = gotvAssessment[key].Count;
                            break;
                        case '3.undecided' :
                            ga3 = gotvAssessment[key].Count;
                            break;
                        case '4.voting"no"or"notvotingforseiu-uhw"' :
                            ga4 = gotvAssessment[key].Count;
                            break;
                        case '5.nuhwvoter' :
                            ga5 = gotvAssessment[key].Count;
                            break;
                        case '6.willnotbevoting' :
                            ga6 = gotvAssessment[key].Count;
                            break;
                        case '9.challenge' :
                            ga9 = gotvAssessment[key].Count;
                            break;
                        default :
                            // bad data check - shouldn't happen.
                            console.log('Unexpected Gotv Assessment value : ' + key);
                    }
                }

                ptr = 0;
                for (i = 0, l = newOrgDataArray.length; i < l; i++) {
                    if (newOrgDataArray[i].Id == accountId) {
                        ptr = i;
                        break;
                    }
                }

                newOrgDataArray[ptr].CA0 = ca0;
                newOrgDataArray[ptr].CA1 = ca1;
                newOrgDataArray[ptr].CA2 = ca2;
                newOrgDataArray[ptr].CA3 = ca3;
                newOrgDataArray[ptr].CA4 = ca4;
                newOrgDataArray[ptr].CA5 = ca5;
                newOrgDataArray[ptr].CA6 = ca6;
                newOrgDataArray[ptr].CA7 = ca7;
                newOrgDataArray[ptr].CA8 = ca8;
                newOrgDataArray[ptr].CA9 = ca9;
                newOrgDataArray[ptr].CATotal = ca1 + ca2 + ca3 + ca4 + ca5 + ca6 + ca7 + ca8 + ca9;

                newOrgDataArray[ptr].VA0 = va0;
                newOrgDataArray[ptr].VA1 = va1;
                newOrgDataArray[ptr].VA2 = va2;
                newOrgDataArray[ptr].VA3 = va3;
                newOrgDataArray[ptr].VA4 = va4;
                newOrgDataArray[ptr].VA5 = va5;
                newOrgDataArray[ptr].VA6 = va6;
                newOrgDataArray[ptr].VA7 = va7;
                newOrgDataArray[ptr].VA8 = va8;
                newOrgDataArray[ptr].VA9 = va9;
                newOrgDataArray[ptr].VATotal = va1 + va2 + va3 + va4 + va5 + va6 + va7 + va8 + va9;

                newOrgDataArray[ptr].GA0 = ga0;
                newOrgDataArray[ptr].GA1 = ga1;
                newOrgDataArray[ptr].GA2 = ga2;
                newOrgDataArray[ptr].GA3 = ga3;
                newOrgDataArray[ptr].GA4 = ga4;
                newOrgDataArray[ptr].GA5 = ga5;
                newOrgDataArray[ptr].GA6 = ga6;
                newOrgDataArray[ptr].GA7 = ga7;
                newOrgDataArray[ptr].GA8 = ga8;
                newOrgDataArray[ptr].GA9 = ga9;
                newOrgDataArray[ptr].GATotal = ga1 + ga2 + ga3 + ga4 + ga5 + ga6 + ga7 + ga8 + ga9;
            }
        }

        function setStatus(pSuffix,pLabel,pText) {
            var statTField           = 'statusText'  + pSuffix;
            var statLField           = 'statusLabel' + pSuffix;
            var statTFieldId         = document.getElementById(statTField);
            var statLFieldId         = document.getElementById(statLField);
            statTFieldId.value       = pText;
            statLFieldId.textContent = pLabel;
        }

        function empDropdownHandler(e) {
            var accountRec;
            var empName;
            var empAccountId;
            var assessmentStage;
            var active;

            empAccountId    = empDropdown.value;
            accountRec      = empMap[empAccountId];
            empName         = accountRec.Name;
            assessmentStage = accountRec.Stage;
            active          = accountRec.Active;

            if(runAlready) {
                newOrgGridOptions.api.destroy();
            }
            else
                runAlready = true;

            newOrgDataArray = [];

            newOrgDataArray.push({Id: empAccountId, AccountName: empName, AssessmentStage: assessmentStage, Active: active,
                CATotal:0, CA0:0, CA1:0, CA2:0, CA3:0, CA4:0, CA5:0, CA6:0, CA7:0, CA8:0, CA9:0,
                VATotal:0, VA0:0, VA1:0, VA2:0, VA3:0, VA4:0, VA5:0, VA6:0, VA7:0, VA8:0, VA9:0,
                GATotal:0, GA0:0, GA1:0, GA2:0, GA3:0, GA4:0, GA5:0, GA6:0, GA7:0, GA8:0, GA9:0});

            newOrgGridOptions = {
                debug:false,
                columnDefs: newOrgColumnDefs,
                groupHeaders: true,
                rowData: newOrgDataArray,
                suppressCellSelection: true,
                suppressMenuColumnPanel: true,
                suppressMenuFilterPanel: true,
                suppressMenuMainPanel: true,
                suppressMovableColumns: true
            };
            //       debugger;
            new agGrid.Grid(newOrgGridDiv, newOrgGridOptions);
            loadAssessments(empAccountId);

        }

        function init() {

            empDropdown    = document.getElementById("EmpSelectList");
            empDropdown.addEventListener("change", empDropdownHandler, false);

            opt = document.createElement("option");
            opt.text = 'Choose Employer';
            opt.name = 'Choose Employer';
            opt.value = 0;
            empDropdown.add(opt, null);

            runAlready = false;
            contactsGridDisplayed = false;
        }

        function initAgGrid() {

            contactsColumnDefs = [
                {headerName: 'FirstName',   field: 'FirstName',        width: 110, suppressMenu:true},
                {headerName: 'LastName',    field: 'LastName',         width: 110, suppressMenu:true},
                {headerName: 'BU',          field: 'BU',               width: 100, sortingOrder: ['asc','desc']},
                {headerName: 'In BU',       field: 'InCurrentBU',      width: 100, sortingOrder: ['asc','desc']},
                {headerName: 'Department',  field: 'Department',       width: 190, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Shift',       field: 'Shift',            width: 100, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Worksite',    field: 'Worksite',         width: 260, sortingOrder: ['asc','desc']},
                {headerName: 'Verbal',      field: 'VerbalAssessment', width: 170, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'Card',        field: 'CardAssessment',   width: 170, sortingOrder: ['asc','desc'], filter: 'set'},
                {headerName: 'GOTV',        field: 'GotvAssessment',   width: 170, sortingOrder: ['asc','desc'], filter: 'set'}
            ];

            newOrgColumnDefs = [
                {
                    headerName: "Assessment Counts",
                    children: [
                        {headerName: 'Employer',  field: 'AccountName',      width: 390, cellClass: 'empColumn'},
                        {headerName: 'Stage',     field: 'AssessmentStage',  width: 100, cellClass: 'mainColumn'},
                        {headerName: 'Active',    field: 'Active',           width: 100, cellClass: 'mainColumn'}
                    ]
                },
                {
                    headerName: "Verbal Assessment",
                    groupId: "Verbal",
                    children: [
                        {headerName: "Total",                field: "VATotal", width: 200, columnGroupShow: 'closed', cellClass: 'mainColumn'},
                        {headerName: "0. No Entry",          field: "VA0", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "1. Leader",            field: "VA1", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "2. Supporter",         field: "VA2", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "3. Undecided",         field: "VA3", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "4. Anti-Union",        field: "VA4", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "5. NUHW Supporter",    field: "VA5", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "6. Management friend", field: "VA6", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "7. NUHW leader",       field: "VA7", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "9. NLE",               field: "VA9", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'}
                    ]
                },
                {
                    headerName: "Card Assessment",
                    groupId: "Card",
                    children: [
                        {headerName: "Total",                field: "CATotal", width: 200, columnGroupShow: 'closed', cellClass: 'mainColumn'},
                        {headerName: "0. No Entry",          field: "CA0", width: 110, columnGroupShow: 'open', cellClass: 'mainColumnm'},
                        {headerName: "1. Leader",            field: "CA1", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "2. Supporter",         field: "CA2", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "3. Undecided",         field: "CA3", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "4. Anti-Union",        field: "CA4", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "5. NUHW Supporter",    field: "CA5", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "6. Management friend", field: "CA6", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "7. NUHW leader",       field: "CA7", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "9. NLE",               field: "CA9", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'}
                    ]
                },
                {
                    headerName: "GOTV Assessment",
                    groupId: "Gotv",
                    children: [
                        {headerName: "Total",                                           field: "GATotal", width: 200, columnGroupShow: 'closed', cellClass: 'mainColumn'},
                        {headerName: "0. No Entry",                                     field: "GA0", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "1. Voting SEIU-UHW with Exact Vote Time & Plan",  field: "GA1", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "2. Voting SEIU-UHW, no exact vote time",          field: "GA2", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "3. Undecided",                                    field: "GA3", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "4. Voting 'No' or 'Not Voting for SEIU-UHW'",     field: "GA4", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "5. NUHW Voter",                                   field: "GA5", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "6. Will not be Voting",                           field: "GA6", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'},
                        {headerName: "9. Challenge",                                    field: "GA9", width: 110, columnGroupShow: 'open', cellClass: 'mainColumn'}
                    ]
                }
            ]
        }

        function loadNewOrgAccounts(){

            // Only get Accounts that have contacts:
            var query = "SELECT Account.Id,Account.Name,Account.Assessment_Stage__c,Account.Active__c,Count(Id) From Contact Where Account.Account_Group__c = 'New Organizing' And Account.Assessment_Stage__c In ('GOTV','Probing','Verbal','Card','Vote Yes Petition')" +
                    "Group By Account.Id,Account.Name,Account.Assessment_Stage__c,Account.Active__c Order By Account.Name,Account.Active__c Desc,Account.Assessment_Stage__c Desc";

            // try {
            var queryResults = sforce.connection.query(query);
            processNewOrgAccounts(queryResults);
            //}
            //catch(e) {alert('An error occurred retrieving Accounts: ' + e.faultstring);}
        }

        function processNewOrgAccounts(accountResults) {
            var accountRec;
            var empName;
            var empAccountId;
            var accountRecords;
            var assessmentStage;
            var active;

            accountIdsArray     = [];
            accountMap          = {};

            accountRecords = accountResults.getArray('records');
            len = accountRecords.length-1;

            for (i = 0; i <= len; i++) {
                accountRec      = accountRecords[i];
                empAccountId    = accountRec.Id;
                empName         = toProperCase(accountRec.Name);
                assessmentStage = accountRec.Assessment_Stage__c;
                active          = accountRec.Active__c || 'No';

                opt = document.createElement("option");
                opt.text  = empName;
                opt.name  = empName;
                opt.value = empAccountId;
                empMap[empAccountId] = {Id: empAccountId, Name:empName, Stage:assessmentStage,Active:active};
                empDropdown.add(opt, null);
            }
        }

        // ***************** Globals *****************
        var newOrgDataArray     = [];
        var contactsDataArray   = [];
        var newOrgGridOptions   = {};
        var contactsGridOptions = {};

        var newOrgGridDiv;
        var newOrgColumnDefs;
        var contactsColumnDefs;
        var contactsGridDiv;

        var empMap              = {};
        var contactOwnerIdMap   = {};
        var contactOwnerMap     = {};
        var contactBatchCount   = 0;

        var cardAssessmentMap   = {};
        var gotvAssessmentMap   = {};
        var verbalAssessmentMap = {};

        var empDropdown;
        var opt;

        var runAlready;
        var haveContacts;
        var countsButton;
        var output;
        var statusDiv1;
        var statusDiv2;
        var step1Counts;
        var step1a;
        var filteredCounts;
        var contactsGridDisplayed;

        // ***************** Main Program Entry *****************
        document.addEventListener('DOMContentLoaded', function () {

            sforce.connection.sessionId = "{!$Api.Session_ID}";

            newOrgGridDiv   = document.getElementById('NewOrgGridDiv');
            contactsGridDiv = document.getElementById('ContactsGridDiv');
            statusDiv1      = document.getElementById('StatusDiv1');
            statusDiv2      = document.getElementById('StatusDiv2');
            countsButton    = document.getElementById('GetCountsButton');
            step2Div        = document.getElementById('Step2');
            step3Div        = document.getElementById('Step3');
            step1a          = document.getElementById('Step1a');
            step1Counts     = document.getElementById('Step1Counts');
            filteredCounts  = document.getElementById('FilteredCountLabel');

            $("#tabContainer").tabs();

            init();
            initAgGrid();
            loadNewOrgAccounts();
        });

    </script>
    </body>
</apex:page>